{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[400],{568:function(e,t){Prism.languages.stan={comment:/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,string:{pattern:/\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,greedy:!0},directive:{pattern:/^([ \\t]*)#include\\b.*/m,lookbehind:!0,alias:\"property\"},\"function-arg\":{pattern:/(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,lookbehind:!0,alias:\"function\"},constraint:{pattern:/(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,lookbehind:!0,inside:{expression:{pattern:/(=\\s*)(?:(?!\\s*(?:>$|,\\s*\\w+\\s*=))[\\s\\S])+/,lookbehind:!0,inside:null},property:/\\b[a-z]\\w*(?=\\s*=)/i,operator:/=/,punctuation:/^<|>$|[,]/}},keyword:[/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/,/\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/],function:/\\b[a-z]\\w*(?=\\s*\\()/i,number:/(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,boolean:/\\b(?:false|true)\\b/,operator:/<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,punctuation:/[()\\[\\]{},;]/},Prism.languages.stan.constraint.inside.expression.inside=Prism.languages.stan}}]);","name":"static/js/400.7f857333.chunk.js","map":{"version":3,"sources":["static/js/400.7f857333.chunk.js"],"names":["this","push","568","module","exports","Prism","languages","stan","comment","string","pattern","greedy","directive","lookbehind","alias","function-arg","constraint","inside","expression","property","operator","punctuation","keyword","function","number","boolean"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,GAGxBC,MAAMC,UAAUC,KAAO,CACrBC,QAAW,yCACXC,OAAU,CAGRC,QAAS,kCACTC,QAAQ,GAEVC,UAAa,CACXF,QAAS,yBACTG,YAAY,EACZC,MAAO,YAETC,eAAgB,CACdL,QAAS,qHACTG,YAAY,EACZC,MAAO,YAETE,WAAc,CACZN,QAAS,uDACTG,YAAY,EACZI,OAAQ,CACNC,WAAc,CACZR,QAAS,6CACTG,YAAY,EACZI,OAAQ,MAGVE,SAAY,sBACZC,SAAY,IACZC,YAAe,cAGnBC,QAAW,CAAC,iTACZ,mGACAC,SAAY,uBACZC,OAAU,+CACVC,QAAW,qBACXL,SAAY,8CACZC,YAAe,gBAEjBhB,MAAMC,UAAUC,KAAKS,WAAWC,OAAOC,WAAWD,OAASZ,MAAMC,UAAUC"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[400],{\n\n/***/ 568:\n/***/ (function(module, exports) {\n\n// https://mc-stan.org/docs/2_24/reference-manual/bnf-grammars.html\nPrism.languages.stan = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n  'string': {\n    // String literals can contain spaces and any printable ASCII characters except for \" and \\\n    // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n    pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n    greedy: true\n  },\n  'directive': {\n    pattern: /^([ \\t]*)#include\\b.*/m,\n    lookbehind: true,\n    alias: 'property'\n  },\n  'function-arg': {\n    pattern: /(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'constraint': {\n    pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n    lookbehind: true,\n    inside: {\n      'expression': {\n        pattern: /(=\\s*)(?:(?!\\s*(?:>$|,\\s*\\w+\\s*=))[\\s\\S])+/,\n        lookbehind: true,\n        inside: null // see below\n\n      },\n      'property': /\\b[a-z]\\w*(?=\\s*=)/i,\n      'operator': /=/,\n      'punctuation': /^<|>$|[,]/\n    }\n  },\n  'keyword': [/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/, // these are functions that are known to take another function as their first argument.\n  /\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/],\n  'function': /\\b[a-z]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator': /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n  'punctuation': /[()\\[\\]{},;]/\n};\nPrism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-stan.js"],"names":["Prism","languages","stan","pattern","greedy","lookbehind","alias","inside","constraint","expression"],"mappings":";;;;;AAAA;AAEAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuB;AACtB,aAAW,wCADW;AAEtB,YAAU;AACT;AACA;AACAC,WAAO,EAAE,iCAHA;AAITC,UAAM,EAAE;AAJC,GAFY;AAQtB,eAAa;AACZD,WAAO,EAAE,wBADG;AAEZE,cAAU,EAAE,IAFA;AAGZC,SAAK,EAAE;AAHK,GARS;AActB,kBAAgB;AACfH,WAAO,EAAE,oHADM;AAEfE,cAAU,EAAE,IAFG;AAGfC,SAAK,EAAE;AAHQ,GAdM;AAmBtB,gBAAc;AACbH,WAAO,EAAE,sDADI;AAEbE,cAAU,EAAE,IAFC;AAGbE,UAAM,EAAE;AACP,oBAAc;AACbJ,eAAO,EAAE,4CADI;AAEbE,kBAAU,EAAE,IAFC;AAGbE,cAAM,EAAE,IAHK,CAGA;;AAHA,OADP;AAMP,kBAAY,qBANL;AAOP,kBAAY,GAPL;AAQP,qBAAe;AARR;AAHK,GAnBQ;AAiCtB,aAAW,CACV,gTADU,EAEV;AACA,mGAHU,CAjCW;AAsCtB,cAAY,sBAtCU;AAuCtB,YAAU,8CAvCY;AAwCtB,aAAW,oBAxCW;AA0CtB,cAAY,6CA1CU;AA2CtB,iBAAe;AA3CO,CAAvB;AA8CAP,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBM,UAArB,CAAgCD,MAAhC,CAAuCE,UAAvC,CAAkDF,MAAlD,GAA2DP,KAAK,CAACC,SAAN,CAAgBC,IAA3E,C","file":"x","sourcesContent":["// https://mc-stan.org/docs/2_24/reference-manual/bnf-grammars.html\n\nPrism.languages.stan = {\n\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n\t'string': {\n\t\t// String literals can contain spaces and any printable ASCII characters except for \" and \\\n\t\t// https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n\t\tpattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n\t\tgreedy: true\n\t},\n\t'directive': {\n\t\tpattern: /^([ \\t]*)#include\\b.*/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n\n\t'function-arg': {\n\t\tpattern: /(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'constraint': {\n\t\tpattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'expression': {\n\t\t\t\tpattern: /(=\\s*)(?:(?!\\s*(?:>$|,\\s*\\w+\\s*=))[\\s\\S])+/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'property': /\\b[a-z]\\w*(?=\\s*=)/i,\n\t\t\t'operator': /=/,\n\t\t\t'punctuation': /^<|>$|[,]/\n\t\t}\n\t},\n\t'keyword': [\n\t\t/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/,\n\t\t// these are functions that are known to take another function as their first argument.\n\t\t/\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/\n\t],\n\t'function': /\\b[a-z]\\w*(?=\\s*\\()/i,\n\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,\n\t'boolean': /\\b(?:false|true)\\b/,\n\n\t'operator': /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n\t'punctuation': /[()\\[\\]{},;]/\n};\n\nPrism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;\n"]}}