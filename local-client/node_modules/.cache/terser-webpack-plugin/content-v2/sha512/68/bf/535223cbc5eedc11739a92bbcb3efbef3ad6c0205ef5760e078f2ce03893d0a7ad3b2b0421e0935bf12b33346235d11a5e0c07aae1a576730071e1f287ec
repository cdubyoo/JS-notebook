{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[326],{494:function(e,t){!function(e){e.languages.pug={comment:{pattern:/(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,lookbehind:!0},\"multiline-script\":{pattern:/(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0,inside:e.languages.javascript},filter:{pattern:/(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"}}},\"multiline-plain-text\":{pattern:/(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,lookbehind:!0},markup:{pattern:/(^[\\t ]*)<.+/m,lookbehind:!0,inside:e.languages.markup},doctype:{pattern:/((?:^|\\n)[\\t ]*)doctype(?: .+)?/,lookbehind:!0},\"flow-control\":{pattern:/(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,lookbehind:!0,inside:{each:{pattern:/^each .+? in\\b/,inside:{keyword:/\\b(?:each|in)\\b/,punctuation:/,/}},branch:{pattern:/^(?:if|unless|else|case|when|default|while)\\b/,alias:\"keyword\"},rest:e.languages.javascript}},keyword:{pattern:/(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,lookbehind:!0},mixin:[{pattern:/(^[\\t ]*)mixin .+/m,lookbehind:!0,inside:{keyword:/^mixin/,function:/\\w+(?=\\s*\\(|\\s*$)/,punctuation:/[(),.]/}},{pattern:/(^[\\t ]*)\\+.+/m,lookbehind:!0,inside:{name:{pattern:/^\\+\\w+/,alias:\"function\"},rest:e.languages.javascript}}],script:{pattern:/(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,lookbehind:!0,inside:e.languages.javascript},\"plain-text\":{pattern:/(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,lookbehind:!0},tag:{pattern:/(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,lookbehind:!0,inside:{attributes:[{pattern:/&[^(]+\\([^)]+\\)/,inside:e.languages.javascript},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,lookbehind:!0,inside:e.languages.javascript},\"attr-name\":/[\\w-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[!=(),]+/}}],punctuation:/:/,\"attr-id\":/#[\\w\\-]+/,\"attr-class\":/\\.[\\w\\-]+/}},code:[{pattern:/(^[\\t ]*(?:-|!?=)).+/m,lookbehind:!0,inside:e.languages.javascript}],punctuation:/[.\\-!=|]+/};for(var t=/(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/.source,n=[{filter:\"atpl\",language:\"twig\"},{filter:\"coffee\",language:\"coffeescript\"},\"ejs\",\"handlebars\",\"less\",\"livescript\",\"markdown\",{filter:\"sass\",language:\"scss\"},\"stylus\"],a={},i=0,r=n.length;i<r;i++){var s=n[i];s=\"string\"===typeof s?{filter:s,language:s}:s,e.languages[s.language]&&(a[\"filter-\"+s.filter]={pattern:RegExp(t.replace(\"{{filter_name}}\",(function(){return s.filter})),\"m\"),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},rest:e.languages[s.language]}})}e.languages.insertBefore(\"pug\",\"filter\",a)}(Prism)}}]);","name":"static/js/326.dc79c886.chunk.js","map":{"version":3,"sources":["static/js/326.dc79c886.chunk.js"],"names":["this","push","494","module","exports","Prism","languages","pug","comment","pattern","lookbehind","multiline-script","inside","javascript","filter","filter-name","alias","multiline-plain-text","markup","doctype","flow-control","each","keyword","punctuation","branch","rest","mixin","function","name","script","plain-text","tag","attributes","attr-value","attr-name","attr-id","attr-class","code","filter_pattern","source","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,IAExB,SAAWC,GAQTA,EAAMC,UAAUC,IAAM,CAGpBC,QAAW,CACTC,QAAS,gDACTC,YAAY,GAIdC,mBAAoB,CAClBF,QAAS,uFACTC,YAAY,EACZE,OAAQP,EAAMC,UAAUO,YAG1BC,OAAU,CACRL,QAAS,wEACTC,YAAY,EACZE,OAAQ,CACNG,cAAe,CACbN,QAAS,WACTO,MAAO,cAIbC,uBAAwB,CACtBR,QAAS,sFACTC,YAAY,GAEdQ,OAAU,CACRT,QAAS,gBACTC,YAAY,EACZE,OAAQP,EAAMC,UAAUY,QAE1BC,QAAW,CACTV,QAAS,kCACTC,YAAY,GAGdU,eAAgB,CACdX,QAAS,sEACTC,YAAY,EACZE,OAAQ,CACNS,KAAQ,CACNZ,QAAS,iBACTG,OAAQ,CACNU,QAAW,kBACXC,YAAe,MAGnBC,OAAU,CACRf,QAAS,gDACTO,MAAO,WAETS,KAAMpB,EAAMC,UAAUO,aAG1BS,QAAW,CACTb,QAAS,yDACTC,YAAY,GAEdgB,MAAS,CACT,CACEjB,QAAS,qBACTC,YAAY,EACZE,OAAQ,CACNU,QAAW,SACXK,SAAY,oBACZJ,YAAe,WAGnB,CACEd,QAAS,iBACTC,YAAY,EACZE,OAAQ,CACNgB,KAAQ,CACNnB,QAAS,SACTO,MAAO,YAETS,KAAMpB,EAAMC,UAAUO,cAG1BgB,OAAU,CACRpB,QAAS,oDACTC,YAAY,EACZE,OAAQP,EAAMC,UAAUO,YAE1BiB,aAAc,CACZrB,QAAS,qEACTC,YAAY,GAEdqB,IAAO,CACLtB,QAAS,+DACTC,YAAY,EACZE,OAAQ,CACNoB,WAAc,CAAC,CACbvB,QAAS,kBACTG,OAAQP,EAAMC,UAAUO,YACvB,CACDJ,QAAS,YACTG,OAAQ,CACNqB,aAAc,CACZxB,QAAS,iCACTC,YAAY,EACZE,OAAQP,EAAMC,UAAUO,YAE1BqB,YAAa,2BACbX,YAAe,cAGnBA,YAAe,IACfY,UAAW,WACXC,aAAc,cAGlBC,KAAQ,CAAC,CACP5B,QAAS,wBACTC,YAAY,EACZE,OAAQP,EAAMC,UAAUO,aAE1BU,YAAe,aAgBjB,IAdA,IAAIe,EAAiB,oFAAoFC,OAErGC,EAAU,CAAC,CACb1B,OAAQ,OACR2B,SAAU,QACT,CACD3B,OAAQ,SACR2B,SAAU,gBACT,MAAO,aAAc,OAAQ,aAAc,WAAY,CACxD3B,OAAQ,OACR2B,SAAU,QACT,UACCC,EAAc,GAETC,EAAI,EAAGC,EAAIJ,EAAQK,OAAQF,EAAIC,EAAGD,IAAK,CAC9C,IAAI7B,EAAS0B,EAAQG,GACrB7B,EAA2B,kBAAXA,EAAsB,CACpCA,OAAQA,EACR2B,SAAU3B,GACRA,EAEAT,EAAMC,UAAUQ,EAAO2B,YACzBC,EAAY,UAAY5B,EAAOA,QAAU,CACvCL,QAASqC,OAAOR,EAAeS,QAAQ,mBAAmB,WACxD,OAAOjC,EAAOA,UACZ,KACJJ,YAAY,EACZE,OAAQ,CACNG,cAAe,CACbN,QAAS,WACTO,MAAO,YAETS,KAAMpB,EAAMC,UAAUQ,EAAO2B,aAMrCpC,EAAMC,UAAU0C,aAAa,MAAO,SAAUN,GAxKhD,CAyKGrC"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[326],{\n\n/***/ 494:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  // TODO:\n  // - Add CSS highlighting inside <style> tags\n  // - Add support for multi-line code blocks\n  // - Add support for interpolation #{} and !{}\n  // - Add support for tag interpolation #[]\n  // - Add explicit support for plain text using |\n  // - Add support for markup embedded in plain text\n  Prism.languages.pug = {\n    // Multiline stuff should appear before the rest\n    // This handles both single-line and multi-line comments\n    'comment': {\n      pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n      lookbehind: true\n    },\n    // All the tag-related part is in lookbehind\n    // so that it can be highlighted by the \"tag\" pattern\n    'multiline-script': {\n      pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    // See at the end of the file for known filters\n    'filter': {\n      pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: true,\n      inside: {\n        'filter-name': {\n          pattern: /^:[\\w-]+/,\n          alias: 'variable'\n        }\n      }\n    },\n    'multiline-plain-text': {\n      pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n      lookbehind: true\n    },\n    'markup': {\n      pattern: /(^[\\t ]*)<.+/m,\n      lookbehind: true,\n      inside: Prism.languages.markup\n    },\n    'doctype': {\n      pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n      lookbehind: true\n    },\n    // This handle all conditional and loop keywords\n    'flow-control': {\n      pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n      lookbehind: true,\n      inside: {\n        'each': {\n          pattern: /^each .+? in\\b/,\n          inside: {\n            'keyword': /\\b(?:each|in)\\b/,\n            'punctuation': /,/\n          }\n        },\n        'branch': {\n          pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n          alias: 'keyword'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    'keyword': {\n      pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n      lookbehind: true\n    },\n    'mixin': [// Declaration\n    {\n      pattern: /(^[\\t ]*)mixin .+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^mixin/,\n        'function': /\\w+(?=\\s*\\(|\\s*$)/,\n        'punctuation': /[(),.]/\n      }\n    }, // Usage\n    {\n      pattern: /(^[\\t ]*)\\+.+/m,\n      lookbehind: true,\n      inside: {\n        'name': {\n          pattern: /^\\+\\w+/,\n          alias: 'function'\n        },\n        rest: Prism.languages.javascript\n      }\n    }],\n    'script': {\n      pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'plain-text': {\n      pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n      lookbehind: true\n    },\n    'tag': {\n      pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n      lookbehind: true,\n      inside: {\n        'attributes': [{\n          pattern: /&[^(]+\\([^)]+\\)/,\n          inside: Prism.languages.javascript\n        }, {\n          pattern: /\\([^)]+\\)/,\n          inside: {\n            'attr-value': {\n              pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n              lookbehind: true,\n              inside: Prism.languages.javascript\n            },\n            'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n            'punctuation': /[!=(),]+/\n          }\n        }],\n        'punctuation': /:/,\n        'attr-id': /#[\\w\\-]+/,\n        'attr-class': /\\.[\\w\\-]+/\n      }\n    },\n    'code': [{\n      pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }],\n    'punctuation': /[.\\-!=|]+/\n  };\n  var filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/.source; // Non exhaustive list of available filters and associated languages\n\n  var filters = [{\n    filter: 'atpl',\n    language: 'twig'\n  }, {\n    filter: 'coffee',\n    language: 'coffeescript'\n  }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {\n    filter: 'sass',\n    language: 'scss'\n  }, 'stylus'];\n  var all_filters = {};\n\n  for (var i = 0, l = filters.length; i < l; i++) {\n    var filter = filters[i];\n    filter = typeof filter === 'string' ? {\n      filter: filter,\n      language: filter\n    } : filter;\n\n    if (Prism.languages[filter.language]) {\n      all_filters['filter-' + filter.filter] = {\n        pattern: RegExp(filter_pattern.replace('{{filter_name}}', function () {\n          return filter.filter;\n        }), 'm'),\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          rest: Prism.languages[filter.language]\n        }\n      };\n    }\n  }\n\n  Prism.languages.insertBefore('pug', 'filter', all_filters);\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-pug.js"],"names":["Prism","languages","pug","pattern","lookbehind","inside","javascript","alias","markup","rest","filter_pattern","source","filters","filter","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"mappings":"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","file":"x","sourcesContent":["(function(Prism) {\n\t// TODO:\n\t// - Add CSS highlighting inside <style> tags\n\t// - Add support for multi-line code blocks\n\t// - Add support for interpolation #{} and !{}\n\t// - Add support for tag interpolation #[]\n\t// - Add explicit support for plain text using |\n\t// - Add support for markup embedded in plain text\n\n\tPrism.languages.pug = {\n\n\t\t// Multiline stuff should appear before the rest\n\n\t\t// This handles both single-line and multi-line comments\n\t\t'comment': {\n\t\t\tpattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t// All the tag-related part is in lookbehind\n\t\t// so that it can be highlighted by the \"tag\" pattern\n\t\t'multiline-script': {\n\t\t\tpattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\n\t\t// See at the end of the file for known filters\n\t\t'filter': {\n\t\t\tpattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'filter-name': {\n\t\t\t\t\tpattern: /^:[\\w-]+/,\n\t\t\t\t\talias: 'variable'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t'multiline-plain-text': {\n\t\t\tpattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'markup': {\n\t\t\tpattern: /(^[\\t ]*)<.+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.markup\n\t\t},\n\t\t'doctype': {\n\t\t\tpattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n\t\t\tlookbehind: true\n\t\t},\n\n\t\t// This handle all conditional and loop keywords\n\t\t'flow-control': {\n\t\t\tpattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'each': {\n\t\t\t\t\tpattern: /^each .+? in\\b/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'keyword': /\\b(?:each|in)\\b/,\n\t\t\t\t\t\t'punctuation': /,/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'branch': {\n\t\t\t\t\tpattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.javascript\n\t\t\t}\n\t\t},\n\t\t'keyword': {\n\t\t\tpattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'mixin': [\n\t\t\t// Declaration\n\t\t\t{\n\t\t\t\tpattern: /(^[\\t ]*)mixin .+/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'keyword': /^mixin/,\n\t\t\t\t\t'function': /\\w+(?=\\s*\\(|\\s*$)/,\n\t\t\t\t\t'punctuation': /[(),.]/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// Usage\n\t\t\t{\n\t\t\t\tpattern: /(^[\\t ]*)\\+.+/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'name': {\n\t\t\t\t\t\tpattern: /^\\+\\w+/,\n\t\t\t\t\t\talias: 'function'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'script': {\n\t\t\tpattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\n\t\t'plain-text': {\n\t\t\tpattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'tag': {\n\t\t\tpattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attributes': [\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /&[^(]+\\([^)]+\\)/,\n\t\t\t\t\t\tinside: Prism.languages.javascript\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /\\([^)]+\\)/,\n\t\t\t\t\t\tinside: {\n\t\t\t\t\t\t\t'attr-value': {\n\t\t\t\t\t\t\t\tpattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n\t\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\t\tinside: Prism.languages.javascript\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n\t\t\t\t\t\t\t'punctuation': /[!=(),]+/\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'attr-id': /#[\\w\\-]+/,\n\t\t\t\t'attr-class': /\\.[\\w\\-]+/\n\t\t\t}\n\t\t},\n\t\t'code': [\n\t\t\t{\n\t\t\t\tpattern: /(^[\\t ]*(?:-|!?=)).+/m,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: Prism.languages.javascript\n\t\t\t}\n\t\t],\n\t\t'punctuation': /[.\\-!=|]+/\n\t};\n\n\tvar filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/.source;\n\n\t// Non exhaustive list of available filters and associated languages\n\tvar filters = [\n\t\t{filter:'atpl',language:'twig'},\n\t\t{filter:'coffee',language:'coffeescript'},\n\t\t'ejs',\n\t\t'handlebars',\n\t\t'less',\n\t\t'livescript',\n\t\t'markdown',\n\t\t{filter:'sass',language:'scss'},\n\t\t'stylus'\n\t];\n\tvar all_filters = {};\n\tfor (var i = 0, l = filters.length; i < l; i++) {\n\t\tvar filter = filters[i];\n\t\tfilter = typeof filter === 'string' ? {filter: filter, language: filter} : filter;\n\t\tif (Prism.languages[filter.language]) {\n\t\t\tall_filters['filter-' + filter.filter] = {\n\t\t\t\tpattern: RegExp(filter_pattern.replace('{{filter_name}}', function () { return filter.filter; }), 'm'),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'filter-name': {\n\t\t\t\t\t\tpattern: /^:[\\w-]+/,\n\t\t\t\t\t\talias: 'variable'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages[filter.language]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tPrism.languages.insertBefore('pug', 'filter', all_filters);\n\n}(Prism));\n"]}}