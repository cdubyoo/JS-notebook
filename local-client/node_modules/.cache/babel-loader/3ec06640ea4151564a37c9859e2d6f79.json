{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\jbook\\\\src\\\\components\\\\cell-list.tsx\",\n    _s = $RefreshSig$();\n\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport CellListItem from './cell-list-item';\nimport AddCell from './add-cell';\n\nconst CellList = () => {\n  _s();\n\n  const cells = useTypedSelector(({\n    cells: {\n      order,\n      data\n    }\n  }) => order.map(id => data[id]));\n  const renderedCells = cells.map(cell => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddCell, {\n      nextCellId: cell.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CellListItem, {\n      cell: cell\n    }, cell.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderedCells, /*#__PURE__*/_jsxDEV(AddCell, {\n      nextCellId: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CellList, \"ij3ho+NMbIxaBKnXgl+evU0tiZI=\", false, function () {\n  return [useTypedSelector];\n});\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/components/cell-list.tsx"],"names":["useTypedSelector","CellListItem","AddCell","CellList","cells","order","data","map","id","renderedCells","cell"],"mappings":";;;;;;AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,KAAK,GAAGJ,gBAAgB,CAAC,CAAC;AAAEI,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAT,GAAD,KAC3BD,KAAK,CAACE,GAAN,CAAWC,EAAD,IAAQF,IAAI,CAACE,EAAD,CAAtB,CAD0B,CAA9B;AAIA,QAAMC,aAAa,GAAGL,KAAK,CAACG,GAAN,CAAWG,IAAD,iBAC5B;AAAA,4BACI,QAAC,OAAD;AAAS,MAAA,UAAU,EAAEA,IAAI,CAACF;AAA1B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,YAAD;AAA4B,MAAA,IAAI,EAAEE;AAAlC,OAAmBA,IAAI,CAACF,EAAxB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADkB,CAAtB;AAOA,sBACI;AAAA,eACKC,aADL,eAEI,QAAC,OAAD;AAAS,MAAA,UAAU,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAlBD;;GAAMN,Q;UACYH,gB;;;KADZG,Q;AAoBN,eAAeA,QAAf","sourcesContent":["import { useTypedSelector } from '../hooks/use-typed-selector'\r\nimport CellListItem from './cell-list-item'\r\nimport AddCell from './add-cell'\r\n\r\nconst CellList: React.FC = () => {\r\n    const cells = useTypedSelector(({ cells: { order, data } }) => \r\n        order.map((id) => data[id])\r\n    )\r\n\r\n    const renderedCells = cells.map((cell) => (\r\n        <>\r\n            <AddCell nextCellId={cell.id} />\r\n            <CellListItem key={cell.id} cell={cell} />\r\n        </>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            {renderedCells}\r\n            <AddCell nextCellId={null} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CellList"]},"metadata":{},"sourceType":"module"}