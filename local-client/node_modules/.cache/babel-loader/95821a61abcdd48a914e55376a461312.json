{"ast":null,"code":"import { ActionType } from '../action-types';\nimport bundle from '../../bundler';\nlet timer;\nexport const bundlerMiddleware = ({\n  getState,\n  dispatch\n}) => next => action => {\n  next(action);\n\n  if (action.type !== ActionType.UPDATE_CELL) {\n    return;\n  }\n\n  const {\n    cells: {\n      data: cellData\n    }\n  } = getState();\n  const cell = cellData[action.payload.id];\n\n  if (cell.type === 'text') {\n    return;\n  }\n\n  clearTimeout(timer);\n  timer = setTimeout(async () => {\n    console.log(\"starting bundling\");\n    const result = await bundle(action.payload.content);\n    dispatch({\n      type: ActionType.BUNDLE_CREATED,\n      payload: result\n    });\n    console.log(\"dispatched bundled created\");\n  }, 750);\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/state/middlewares/bundler-middleware.ts"],"names":["ActionType","bundle","timer","bundlerMiddleware","getState","dispatch","next","action","type","UPDATE_CELL","cells","data","cellData","cell","payload","id","clearTimeout","setTimeout","console","log","result","content","BUNDLE_CREATED"],"mappings":"AACA,SAASA,UAAT,QAA2B,iBAA3B;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,IAAIC,KAAJ;AACA,OAAO,MAAMC,iBAA6B,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IACzEC,MADmF,IACxE;AACPD,EAAAA,IAAI,CAACC,MAAD,CAAJ;;AAEA,MAAIA,MAAM,CAACC,IAAP,KAAgBR,UAAU,CAACS,WAA/B,EAA4C;AACxC;AACH;;AACD,QAAM;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAEC;AAAR;AAAT,MAAgCR,QAAQ,EAA9C;AACA,QAAMS,IAAI,GAAGD,QAAQ,CAACL,MAAM,CAACO,OAAP,CAAeC,EAAhB,CAArB;;AAEA,MAAIF,IAAI,CAACL,IAAL,KAAc,MAAlB,EAA0B;AACtB;AACH;;AACDQ,EAAAA,YAAY,CAACd,KAAD,CAAZ;AACAA,EAAAA,KAAK,GAAGe,UAAU,CAAC,YAAY;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,UAAMC,MAAM,GAAG,MAAMnB,MAAM,CAACM,MAAM,CAACO,OAAP,CAAeO,OAAhB,CAA3B;AAEAhB,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAER,UAAU,CAACsB,cADZ;AAELR,MAAAA,OAAO,EAAEM;AAFJ,KAAD,CAAR;AAIAF,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,GATiB,EASf,GATe,CAAlB;AAUH,CAxBM","sourcesContent":["import { Middleware } from './middleware'\r\nimport { ActionType } from '../action-types'\r\nimport bundle from '../../bundler'\r\n\r\nlet timer: any\r\nexport const bundlerMiddleware: Middleware = ({ getState, dispatch }) => (next) => (\r\naction) => {\r\n    next(action)\r\n\r\n    if (action.type !== ActionType.UPDATE_CELL) {\r\n        return\r\n    }\r\n    const { cells: { data: cellData } } = getState()\r\n    const cell = cellData[action.payload.id]\r\n\r\n    if (cell.type === 'text') {\r\n        return\r\n    }    \r\n    clearTimeout(timer)\r\n    timer = setTimeout(async () => {\r\n        console.log(\"starting bundling\")\r\n        const result = await bundle(action.payload.content)\r\n\r\n        dispatch({\r\n            type: ActionType.BUNDLE_CREATED,\r\n            payload: result\r\n        })\r\n        console.log(\"dispatched bundled created\")\r\n    }, 750)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}