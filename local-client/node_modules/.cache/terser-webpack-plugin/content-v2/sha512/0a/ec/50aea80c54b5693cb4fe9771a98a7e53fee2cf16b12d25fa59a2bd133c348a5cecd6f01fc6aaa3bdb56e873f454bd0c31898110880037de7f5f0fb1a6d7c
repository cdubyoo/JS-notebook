{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[34],{202:function(e,t){Prism.languages.autoit={comment:[/;.*/,{pattern:/(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,lookbehind:!0}],url:{pattern:/(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,lookbehind:!0},string:{pattern:/([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,greedy:!0,inside:{variable:/([%$@])\\w+\\1/}},directive:{pattern:/(^\\s*)#\\w+/m,lookbehind:!0,alias:\"keyword\"},function:/\\b\\w+(?=\\()/,variable:/[$@]\\w+/,keyword:/\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,number:/\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,boolean:/\\b(?:True|False)\\b/i,operator:/<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,punctuation:/[\\[\\]().,:]/}}}]);","name":"static/js/34.b7af2839.chunk.js","map":{"version":3,"sources":["static/js/34.b7af2839.chunk.js"],"names":["this","push","202","module","exports","Prism","languages","autoit","comment","pattern","lookbehind","url","string","greedy","inside","variable","directive","alias","function","keyword","number","boolean","operator","punctuation"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAEnEC,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,OAAS,CACvBC,QAAW,CAAC,MAAO,CAEjBC,QAAS,gEACTC,YAAY,IAEdC,IAAO,CACLF,QAAS,gDACTC,YAAY,GAEdE,OAAU,CACRH,QAAS,kCACTI,QAAQ,EACRC,OAAQ,CACNC,SAAY,iBAGhBC,UAAa,CACXP,QAAS,cACTC,YAAY,EACZO,MAAO,WAETC,SAAY,cAEZH,SAAY,UACZI,QAAW,yOACXC,OAAU,kDACVC,QAAW,sBACXC,SAAY,+CACZC,YAAe"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[34],{\n\n/***/ 202:\n/***/ (function(module, exports) {\n\nPrism.languages.autoit = {\n  \"comment\": [/;.*/, {\n    // The multi-line comments delimiters can actually be commented out with \";\"\n    pattern: /(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,\n    lookbehind: true\n  }],\n  \"url\": {\n    pattern: /(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n    lookbehind: true\n  },\n  \"string\": {\n    pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      \"variable\": /([%$@])\\w+\\1/\n    }\n  },\n  \"directive\": {\n    pattern: /(^\\s*)#\\w+/m,\n    lookbehind: true,\n    alias: 'keyword'\n  },\n  \"function\": /\\b\\w+(?=\\()/,\n  // Variables and macros\n  \"variable\": /[$@]\\w+/,\n  \"keyword\": /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n  \"number\": /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n  \"boolean\": /\\b(?:True|False)\\b/i,\n  \"operator\": /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,\n  \"punctuation\": /[\\[\\]().,:]/\n};\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-autoit.js"],"names":["Prism","languages","autoit","pattern","lookbehind","greedy","inside","alias"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB;AACxB,aAAW,CACV,KADU,EAEV;AACC;AACAC,WAAO,EAAE,+DAFV;AAGCC,cAAU,EAAE;AAHb,GAFU,CADa;AASxB,SAAO;AACND,WAAO,EAAE,+CADH;AAENC,cAAU,EAAE;AAFN,GATiB;AAaxB,YAAU;AACTD,WAAO,EAAE,iCADA;AAETE,UAAM,EAAE,IAFC;AAGTC,UAAM,EAAE;AACP,kBAAY;AADL;AAHC,GAbc;AAoBxB,eAAa;AACZH,WAAO,EAAE,aADG;AAEZC,cAAU,EAAE,IAFA;AAGZG,SAAK,EAAE;AAHK,GApBW;AAyBxB,cAAY,aAzBY;AA0BxB;AACA,cAAY,SA3BY;AA4BxB,aAAW,wOA5Ba;AA6BxB,YAAU,iDA7Bc;AA8BxB,aAAW,qBA9Ba;AA+BxB,cAAY,8CA/BY;AAgCxB,iBAAe;AAhCS,CAAzB,C","file":"x","sourcesContent":["Prism.languages.autoit = {\n\t\"comment\": [\n\t\t/;.*/,\n\t\t{\n\t\t\t// The multi-line comments delimiters can actually be commented out with \";\"\n\t\t\tpattern: /(^\\s*)#(?:comments-start|cs)[\\s\\S]*?^\\s*#(?:comments-end|ce)/m,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t\"url\": {\n\t\tpattern: /(^\\s*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n\t\tlookbehind: true\n\t},\n\t\"string\": {\n\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t\"variable\": /([%$@])\\w+\\1/\n\t\t}\n\t},\n\t\"directive\": {\n\t\tpattern: /(^\\s*)#\\w+/m,\n\t\tlookbehind: true,\n\t\talias: 'keyword'\n\t},\n\t\"function\": /\\b\\w+(?=\\()/,\n\t// Variables and macros\n\t\"variable\": /[$@]\\w+/,\n\t\"keyword\": /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n\t\"number\": /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n\t\"boolean\": /\\b(?:True|False)\\b/i,\n\t\"operator\": /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,\n\t\"punctuation\": /[\\[\\]().,:]/\n};"]}}