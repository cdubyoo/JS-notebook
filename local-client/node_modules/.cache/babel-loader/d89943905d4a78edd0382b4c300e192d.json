{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import'./code-editor.css';import'./syntax.css';import{useRef}from'react';import MonacoEditor from'@monaco-editor/react';import prettier from'prettier';import parser from'prettier/parser-babel';import codeShift from'jscodeshift';import Highlighter from'monaco-jsx-highlighter';var CodeEditor=function CodeEditor(_ref){var onChange=_ref.onChange,initialValue=_ref.initialValue;var editorRef=useRef();// work around for onChange to display value\nvar onEditorDidMount=function onEditorDidMount(getValue,monacoEditor){var _monacoEditor$getMode;// reference monacoEditor\neditorRef.current=monacoEditor;monacoEditor.onDidChangeModelContent(function(){onChange(getValue());});(_monacoEditor$getMode=monacoEditor.getModel())===null||_monacoEditor$getMode===void 0?void 0:_monacoEditor$getMode.updateOptions({tabSize:2});var highlighter=new Highlighter(// @ts-ignore\nwindow.monaco,codeShift,monacoEditor);highlighter.highLightOnDidChangeModelContent(function(){},function(){},undefined,function(){});};var onFormatClick=function onFormatClick(){// get current value from editor\nvar unformatted=editorRef.current.getModel().getValue();// format that value\nvar formatted=prettier.format(unformatted,{parser:'babel',plugins:[parser],useTabs:false,semi:true,singleQuote:true}).replace(/\\n$/,'');// remove new line\n// set the formatted value back in the editor\neditorRef.current.setValue(formatted);};return/*#__PURE__*/_jsxs(\"div\",{className:\"editor-wrapper\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"button button-format is-primary is-small\",onClick:onFormatClick,children:\"Format\"}),/*#__PURE__*/_jsx(MonacoEditor,{editorDidMount:onEditorDidMount,value:initialValue,theme:\"dark\",language:\"javascript\",height:\"100%\",options:{wordWrap:'on',minimap:{enabled:false},showUnused:false,folding:false,lineNumbersMinChars:3,fontSize:16,scrollBeyondLastLine:false,automaticLayout:true}})]});};export default CodeEditor;","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/components/code-editor.tsx"],"names":["useRef","MonacoEditor","prettier","parser","codeShift","Highlighter","CodeEditor","onChange","initialValue","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","highlighter","window","monaco","highLightOnDidChangeModelContent","undefined","onFormatClick","unformatted","formatted","format","plugins","useTabs","semi","singleQuote","replace","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":"wFAAA,MAAO,mBAAP,CACA,MAAO,cAAP,CACA,OAASA,MAAT,KAAuB,OAAvB,CACA,MAAOC,CAAAA,YAAP,KAA6C,sBAA7C,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,WAAP,KAAwB,wBAAxB,CAQA,GAAMC,CAAAA,UAAqC,CAAG,QAAxCA,CAAAA,UAAwC,MAAgC,IAA7BC,CAAAA,QAA6B,MAA7BA,QAA6B,CAAnBC,YAAmB,MAAnBA,YAAmB,CAC1E,GAAMC,CAAAA,SAAS,CAAGT,MAAM,EAAxB,CACA;AACA,GAAMU,CAAAA,gBAAgC,CAAG,QAAnCA,CAAAA,gBAAmC,CAACC,QAAD,CAAWC,YAAX,CAA4B,2BACjE;AACAH,SAAS,CAACI,OAAV,CAAoBD,YAApB,CACAA,YAAY,CAACE,uBAAb,CAAqC,UAAM,CACvCP,QAAQ,CAACI,QAAQ,EAAT,CAAR,CACH,CAFD,EAGA,uBAAAC,YAAY,CAACG,QAAb,wEAAyBC,aAAzB,CAAuC,CAAEC,OAAO,CAAE,CAAX,CAAvC,EAEA,GAAMC,CAAAA,WAAW,CAAG,GAAIb,CAAAA,WAAJ,CAChB;AACAc,MAAM,CAACC,MAFS,CAGhBhB,SAHgB,CAIhBQ,YAJgB,CAApB,CAMAM,WAAW,CAACG,gCAAZ,CACI,UAAM,CAAE,CADZ,CAEI,UAAM,CAAE,CAFZ,CAGIC,SAHJ,CAII,UAAM,CAAE,CAJZ,EAMH,CApBD,CAsBA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxB;AACA,GAAMC,CAAAA,WAAW,CAAGf,SAAS,CAACI,OAAV,CAAkBE,QAAlB,GAA6BJ,QAA7B,EAApB,CAEA;AACA,GAAMc,CAAAA,SAAS,CAAGvB,QAAQ,CAACwB,MAAT,CAAgBF,WAAhB,CAA6B,CAC3CrB,MAAM,CAAE,OADmC,CAE3CwB,OAAO,CAAE,CAACxB,MAAD,CAFkC,CAG3CyB,OAAO,CAAE,KAHkC,CAI3CC,IAAI,CAAE,IAJqC,CAK3CC,WAAW,CAAE,IAL8B,CAA7B,EAMfC,OANe,CAMP,KANO,CAMA,EANA,CAAlB,CAMsB;AACtB;AACAtB,SAAS,CAACI,OAAV,CAAkBmB,QAAlB,CAA2BP,SAA3B,EACH,CAdD,CAgBA,mBACQ,aAAK,SAAS,CAAC,gBAAf,wBACI,eACI,SAAS,CAAC,0CADd,CAEI,OAAO,CAAEF,aAFb,oBADJ,cAOA,KAAC,YAAD,EACI,cAAc,CAAEb,gBADpB,CAEI,KAAK,CAAEF,YAFX,CAGI,KAAK,CAAC,MAHV,CAII,QAAQ,CAAC,YAJb,CAKI,MAAM,CAAC,MALX,CAMI,OAAO,CAAE,CACLyB,QAAQ,CAAE,IADL,CAELC,OAAO,CAAE,CAAEC,OAAO,CAAE,KAAX,CAFJ,CAGLC,UAAU,CAAE,KAHP,CAILC,OAAO,CAAE,KAJJ,CAKLC,mBAAmB,CAAE,CALhB,CAMLC,QAAQ,CAAE,EANL,CAOLC,oBAAoB,CAAE,KAPjB,CAQLC,eAAe,CAAE,IARZ,CANb,EAPA,GADR,CA2BH,CApED,CAsEA,cAAenC,CAAAA,UAAf","sourcesContent":["import './code-editor.css'\r\nimport './syntax.css'\r\nimport { useRef } from 'react'\r\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react'\r\nimport prettier from 'prettier'\r\nimport parser from 'prettier/parser-babel'\r\nimport codeShift from 'jscodeshift'\r\nimport Highlighter from 'monaco-jsx-highlighter'\r\n\r\ninterface CodeEditorProps {\r\n    initialValue: string\r\n    // function with arg of value that returns nothing\r\n    onChange(value: string): void\r\n}\r\n\r\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\r\n    const editorRef = useRef<any>()\r\n    // work around for onChange to display value\r\n    const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\r\n        // reference monacoEditor\r\n        editorRef.current = monacoEditor\r\n        monacoEditor.onDidChangeModelContent(() => {\r\n            onChange(getValue())\r\n        })\r\n        monacoEditor.getModel()?.updateOptions({ tabSize: 2 })\r\n\r\n        const highlighter = new Highlighter(\r\n            // @ts-ignore\r\n            window.monaco,\r\n            codeShift,\r\n            monacoEditor\r\n        )\r\n        highlighter.highLightOnDidChangeModelContent(\r\n            () => {},\r\n            () => {},\r\n            undefined,\r\n            () => {}\r\n        )\r\n    }\r\n\r\n    const onFormatClick = () => {\r\n        // get current value from editor\r\n        const unformatted = editorRef.current.getModel().getValue()\r\n\r\n        // format that value\r\n        const formatted = prettier.format(unformatted, {\r\n            parser: 'babel',\r\n            plugins: [parser],\r\n            useTabs: false,\r\n            semi: true,\r\n            singleQuote: true\r\n        }).replace(/\\n$/, '') // remove new line\r\n        // set the formatted value back in the editor\r\n        editorRef.current.setValue(formatted)\r\n    }\r\n\r\n    return (\r\n            <div className=\"editor-wrapper\">\r\n                <button \r\n                    className=\"button button-format is-primary is-small\" \r\n                    onClick={onFormatClick}\r\n                >\r\n                    Format\r\n                </button>\r\n            <MonacoEditor \r\n                editorDidMount={onEditorDidMount}\r\n                value={initialValue}\r\n                theme=\"dark\" \r\n                language=\"javascript\"  \r\n                height=\"100%\" \r\n                options={{\r\n                    wordWrap: 'on',\r\n                    minimap: { enabled: false },\r\n                    showUnused: false,\r\n                    folding: false,\r\n                    lineNumbersMinChars: 3,\r\n                    fontSize: 16,\r\n                    scrollBeyondLastLine: false,\r\n                    automaticLayout: true,\r\n                }}\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default CodeEditor"]},"metadata":{},"sourceType":"module"}