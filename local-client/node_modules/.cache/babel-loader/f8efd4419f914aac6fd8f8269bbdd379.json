{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTypedSelector } from \"./use-typed-selector\";\nexport const useCumulativeCode = cellId => {\n  _s();\n\n  return useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const showFunc = `\n            import _React from 'react';\n            import _ReactDOM from 'react-dom';\n            var show = (value) => {\n                const root = document.querySelector('#root')\n\n                if (typeof value === 'object') {\n                    if (value.$$typeof && value.props) {\n                        _ReactDOM.render(value, root)\n                    } else {\n                        root.innerHTML = JSON.stringify(value)\n                    }\n                } else {\n                    root.innerHTML = value\n                }\n            }\n        `;\n    const showFuncNoop = 'var show = () => {}';\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cellId) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  });\n};\n\n_s(useCumulativeCode, \"4E8l+eUOHjvoqwxLSolHjmdFz+I=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/hooks/use-cumulate-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","data","order","cells","orderedCells","map","id","showFunc","showFuncNoop","cumulativeCode","c","type","push","content"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,sBAAjC;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAoB;AAAA;;AACjD,SAAOF,gBAAgB,CAAEG,KAAD,IAAW;AAC/B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,KAA9B;AACA,UAAMC,YAAY,GAAGF,KAAK,CAACG,GAAN,CAAUC,EAAE,IAAIL,IAAI,CAACK,EAAD,CAApB,CAArB;AAGA,UAAMC,QAAQ,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAhBQ;AAiBA,UAAMC,YAAY,GAAG,qBAArB;AACA,UAAMC,cAAc,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAT,IAAcN,YAAd,EAA4B;AACxB,UAAIM,CAAC,CAACC,IAAF,KAAW,MAAf,EAAuB;AACnB,YAAID,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACjBU,UAAAA,cAAc,CAACG,IAAf,CAAoBL,QAApB;AACH,SAFD,MAEO;AACHE,UAAAA,cAAc,CAACG,IAAf,CAAoBJ,YAApB;AACH;;AACDC,QAAAA,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB;AACH;;AACD,UAAIH,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACjB;AACH;AACJ;;AACD,WAAOU,cAAP;AACH,GAtCsB,CAAvB;AAuCH,CAxCM;;GAAMX,iB;UACFD,gB","sourcesContent":["import { useTypedSelector } from \"./use-typed-selector\"\r\n\r\nexport const useCumulativeCode = (cellId: string) => {\r\n    return useTypedSelector((state) => {\r\n        const { data, order } = state.cells\r\n        const orderedCells = order.map(id => data[id])\r\n\r\n\r\n        const showFunc = `\r\n            import _React from 'react';\r\n            import _ReactDOM from 'react-dom';\r\n            var show = (value) => {\r\n                const root = document.querySelector('#root')\r\n\r\n                if (typeof value === 'object') {\r\n                    if (value.$$typeof && value.props) {\r\n                        _ReactDOM.render(value, root)\r\n                    } else {\r\n                        root.innerHTML = JSON.stringify(value)\r\n                    }\r\n                } else {\r\n                    root.innerHTML = value\r\n                }\r\n            }\r\n        `\r\n        const showFuncNoop = 'var show = () => {}'\r\n        const cumulativeCode = []\r\n        for (let c of orderedCells) {\r\n            if (c.type === 'code') {\r\n                if (c.id === cellId) {\r\n                    cumulativeCode.push(showFunc)\r\n                } else {\r\n                    cumulativeCode.push(showFuncNoop)\r\n                }\r\n                cumulativeCode.push(c.content)\r\n            }\r\n            if (c.id === cellId) {\r\n                break\r\n            }\r\n        }\r\n        return cumulativeCode\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}