{"ast":null,"code":"Prism.languages.elixir = {\n  comment: /#.*/m,\n  regex: {\n    pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n    greedy: !0\n  },\n  string: [{\n    pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n    greedy: !0,\n    inside: {}\n  }, {\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: !0,\n    inside: {}\n  }, {\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0,\n    inside: {}\n  }],\n  atom: {\n    pattern: /(^|[^:]):\\w+/,\n    lookbehind: !0,\n    alias: \"symbol\"\n  },\n  \"attr-name\": /\\w+\\??:(?!:)/,\n  capture: {\n    pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n    lookbehind: !0,\n    alias: \"function\"\n  },\n  argument: {\n    pattern: /(^|[^&])&\\d+/,\n    lookbehind: !0,\n    alias: \"variable\"\n  },\n  attribute: {\n    pattern: /@\\w+/,\n    alias: \"variable\"\n  },\n  number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n  keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n  boolean: /\\b(?:true|false|nil)\\b/,\n  operator: [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n    pattern: /([^<])<(?!<)/,\n    lookbehind: !0\n  }, {\n    pattern: /([^>])>(?!>)/,\n    lookbehind: !0\n  }],\n  punctuation: /<<|>>|[.,%\\[\\]{}()]/\n}, Prism.languages.elixir.string.forEach(function (e) {\n  e.inside = {\n    interpolation: {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: \"punctuation\"\n        },\n        rest: Prism.languages.elixir\n      }\n    }\n  };\n});","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-elixir.min.js"],"names":["Prism","languages","elixir","comment","regex","pattern","greedy","string","inside","atom","lookbehind","alias","capture","argument","attribute","number","keyword","boolean","operator","punctuation","forEach","e","interpolation","delimiter","rest"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAuB;AAACC,EAAAA,OAAO,EAAC,MAAT;AAAgBC,EAAAA,KAAK,EAAC;AAACC,IAAAA,OAAO,EAAC,4LAAT;AAAsMC,IAAAA,MAAM,EAAC,CAAC;AAA9M,GAAtB;AAAuOC,EAAAA,MAAM,EAAC,CAAC;AAACF,IAAAA,OAAO,EAAC,gNAAT;AAA0NC,IAAAA,MAAM,EAAC,CAAC,CAAlO;AAAoOE,IAAAA,MAAM,EAAC;AAA3O,GAAD,EAAgP;AAACH,IAAAA,OAAO,EAAC,qBAAT;AAA+BC,IAAAA,MAAM,EAAC,CAAC,CAAvC;AAAyCE,IAAAA,MAAM,EAAC;AAAhD,GAAhP,EAAoS;AAACH,IAAAA,OAAO,EAAC,+CAAT;AAAyDC,IAAAA,MAAM,EAAC,CAAC,CAAjE;AAAmEE,IAAAA,MAAM,EAAC;AAA1E,GAApS,CAA9O;AAAimBC,EAAAA,IAAI,EAAC;AAACJ,IAAAA,OAAO,EAAC,cAAT;AAAwBK,IAAAA,UAAU,EAAC,CAAC,CAApC;AAAsCC,IAAAA,KAAK,EAAC;AAA5C,GAAtmB;AAA4pB,eAAY,cAAxqB;AAAurBC,EAAAA,OAAO,EAAC;AAACP,IAAAA,OAAO,EAAC,wCAAT;AAAkDK,IAAAA,UAAU,EAAC,CAAC,CAA9D;AAAgEC,IAAAA,KAAK,EAAC;AAAtE,GAA/rB;AAAixBE,EAAAA,QAAQ,EAAC;AAACR,IAAAA,OAAO,EAAC,cAAT;AAAwBK,IAAAA,UAAU,EAAC,CAAC,CAApC;AAAsCC,IAAAA,KAAK,EAAC;AAA5C,GAA1xB;AAAk1BG,EAAAA,SAAS,EAAC;AAACT,IAAAA,OAAO,EAAC,MAAT;AAAgBM,IAAAA,KAAK,EAAC;AAAtB,GAA51B;AAA83BI,EAAAA,MAAM,EAAC,iEAAr4B;AAAu8BC,EAAAA,OAAO,EAAC,yKAA/8B;AAAynCC,EAAAA,OAAO,EAAC,wBAAjoC;AAA0pCC,EAAAA,QAAQ,EAAC,CAAC,0FAAD,EAA4F;AAACb,IAAAA,OAAO,EAAC,cAAT;AAAwBK,IAAAA,UAAU,EAAC,CAAC;AAApC,GAA5F,EAAmI;AAACL,IAAAA,OAAO,EAAC,cAAT;AAAwBK,IAAAA,UAAU,EAAC,CAAC;AAApC,GAAnI,CAAnqC;AAA80CS,EAAAA,WAAW,EAAC;AAA11C,CAAvB,EAAw4CnB,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBK,MAAvB,CAA8Ba,OAA9B,CAAsC,UAASC,CAAT,EAAW;AAACA,EAAAA,CAAC,CAACb,MAAF,GAAS;AAACc,IAAAA,aAAa,EAAC;AAACjB,MAAAA,OAAO,EAAC,YAAT;AAAsBG,MAAAA,MAAM,EAAC;AAACe,QAAAA,SAAS,EAAC;AAAClB,UAAAA,OAAO,EAAC,UAAT;AAAoBM,UAAAA,KAAK,EAAC;AAA1B,SAAX;AAAoDa,QAAAA,IAAI,EAACxB,KAAK,CAACC,SAAN,CAAgBC;AAAzE;AAA7B;AAAf,GAAT;AAAwI,CAA1L,CAAx4C","sourcesContent":["Prism.languages.elixir={comment:/#.*/m,regex:{pattern:/~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,greedy:!0},string:[{pattern:/~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,greedy:!0,inside:{}},{pattern:/(\"\"\"|''')[\\s\\S]*?\\1/,greedy:!0,inside:{}},{pattern:/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{}}],atom:{pattern:/(^|[^:]):\\w+/,lookbehind:!0,alias:\"symbol\"},\"attr-name\":/\\w+\\??:(?!:)/,capture:{pattern:/(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,lookbehind:!0,alias:\"function\"},argument:{pattern:/(^|[^&])&\\d+/,lookbehind:!0,alias:\"variable\"},attribute:{pattern:/@\\w+/,alias:\"variable\"},number:/\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,keyword:/\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,boolean:/\\b(?:true|false|nil)\\b/,operator:[/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,{pattern:/([^<])<(?!<)/,lookbehind:!0},{pattern:/([^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,%\\[\\]{}()]/},Prism.languages.elixir.string.forEach(function(e){e.inside={interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:Prism.languages.elixir}}}});"]},"metadata":{},"sourceType":"script"}