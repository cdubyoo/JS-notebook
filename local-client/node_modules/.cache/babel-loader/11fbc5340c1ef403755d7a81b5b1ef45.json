{"ast":null,"code":"(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n    'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n    'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n  }); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-typescript.js"],"names":["Prism","languages","typescript","extend","pattern","lookbehind","greedy","inside","typeInside","insertBefore","alias","ts"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AAEjBA,EAAAA,KAAK,CAACC,SAAN,CAAgBC,UAAhB,GAA6BF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB,EAAqC;AACjE,kBAAc;AACbC,MAAAA,OAAO,EAAE,8JADI;AAEbC,MAAAA,UAAU,EAAE,IAFC;AAGbC,MAAAA,MAAM,EAAE,IAHK;AAIbC,MAAAA,MAAM,EAAE,IAJK,CAIA;;AAJA,KADmD;AAOjE;AACA,eAAW,4ZARsD;AASjE,eAAW;AATsD,GAArC,CAA7B,CAFiB,CAcjB;;AACA,SAAOP,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2B,WAA3B,CAAP,CAfiB,CAiBjB;;AACA,MAAIM,UAAU,GAAGR,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB,EAAqC,EAArC,CAAjB;AACA,SAAOK,UAAU,CAAC,YAAD,CAAjB;AAEAR,EAAAA,KAAK,CAACC,SAAN,CAAgBC,UAAhB,CAA2B,YAA3B,EAAyCK,MAAzC,GAAkDC,UAAlD;AAEAR,EAAAA,KAAK,CAACC,SAAN,CAAgBQ,YAAhB,CAA6B,YAA7B,EAA2C,UAA3C,EAAuD;AACtD,wBAAoB;AACnB;AACAL,MAAAA,OAAO,EAAE,wFAFU;AAGnBE,MAAAA,MAAM,EAAE,IAHW;AAInBC,MAAAA,MAAM,EAAE;AACP,oBAAY,2CADL;AAEP,mBAAW;AACVH,UAAAA,OAAO,EAAE,UADC;AACW;AACrBM,UAAAA,KAAK,EAAE,YAFG;AAGVH,UAAAA,MAAM,EAAEC;AAHE;AAFJ;AAJW;AADkC,GAAvD;AAgBAR,EAAAA,KAAK,CAACC,SAAN,CAAgBU,EAAhB,GAAqBX,KAAK,CAACC,SAAN,CAAgBC,UAArC;AAEA,CAzCA,EAyCCF,KAzCD,CAAD","sourcesContent":["(function (Prism) {\n\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: null // see below\n\t\t},\n\t\t// From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n\t\t'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/,\n\t});\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.typescript['parameter'];\n\n\t// a version of typescript specifically for highlighting types\n\tvar typeInside = Prism.languages.extend('typescript', {});\n\tdelete typeInside['class-name'];\n\n\tPrism.languages.typescript['class-name'].inside = typeInside;\n\n\tPrism.languages.insertBefore('typescript', 'function', {\n\t\t'generic-function': {\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\n\t\t\tpattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.ts = Prism.languages.typescript;\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}