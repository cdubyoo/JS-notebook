{"ast":null,"code":"import produce from'immer';import{ActionType}from'../action-types';var initialState={loading:false,error:null,order:[],data:{}};// immer returns a a state object with the updates\nvar reducer=produce(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;// set up different cases for different action types to handle inside this reducer\nswitch(action.type){case ActionType.UPDATE_CELL:var _action$payload=action.payload,id=_action$payload.id,content=_action$payload.content;state.data[id].content=content;return state;case ActionType.DELETE_CELL:delete state.data[action.payload];state.order=state.order.filter(function(id){return id!==action.payload;});return state;case ActionType.MOVE_CELL:var direction=action.payload.direction;var index=state.order.findIndex(function(id){return id===action.payload.id;});// if direction is up and index is 1 then target is 0\nvar targetIndex=direction==='up'?index-1:index+1;if(targetIndex<0||targetIndex>state.order.length-1){return state;}state.order[index]=state.order[targetIndex];state.order[targetIndex]=action.payload.id;return state;case ActionType.INSERT_CELL_AFTER:// create new cell\nvar cell={content:'',type:action.payload.type,id:randomId()};// add cell to data object\nstate.data[cell.id]=cell;// insert id of cell into order array\nvar foundIndex=state.order.findIndex(function(id){return id===action.payload.id;});if(foundIndex<0){state.order.unshift(cell.id);}else{state.order.splice(foundIndex+1,0,cell.id);}return state;default:return state;}});var randomId=function randomId(){return Math.random().toString(36).substring(2,5);};export default reducer;","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","payload","id","content","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_AFTER","cell","randomId","foundIndex","unshift","splice","Math","random","toString","substring"],"mappings":"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","sourcesContent":["import produce from 'immer'\r\nimport {  ActionType } from '../action-types'\r\nimport {  Action } from '../actions'\r\nimport { Cell } from '../cell'\r\n\r\ninterface CellsState {\r\n    loading: boolean\r\n    error: string | null\r\n    order: string[]\r\n    data: {\r\n        [key: string]: Cell\r\n    }\r\n}\r\n\r\nconst initialState: CellsState = {\r\n    loading: false,\r\n    error: null,\r\n    order: [],\r\n    data: {}\r\n}\r\n// immer returns a a state object with the updates\r\nconst reducer = produce((state: CellsState = initialState, action: Action) => {\r\n    // set up different cases for different action types to handle inside this reducer\r\n    switch (action.type) {\r\n        case ActionType.UPDATE_CELL:\r\n            const { id, content } = action.payload\r\n            state.data[id].content = content\r\n            return state\r\n        case ActionType.DELETE_CELL:\r\n            delete state.data[action.payload]\r\n            state.order = state.order.filter((id) => id !== action.payload)\r\n            return state\r\n        case ActionType.MOVE_CELL:\r\n            const { direction } = action.payload\r\n            const index = state.order.findIndex((id) => id === action.payload.id)\r\n            // if direction is up and index is 1 then target is 0\r\n            const targetIndex = direction === 'up' ? index - 1 : index + 1\r\n\r\n            if (targetIndex < 0 || targetIndex > state.order.length - 1) {\r\n                return state\r\n            }\r\n            state.order[index] = state.order[targetIndex]\r\n            state.order[targetIndex] = action.payload.id\r\n            return state\r\n        case ActionType.INSERT_CELL_AFTER:\r\n            // create new cell\r\n            const cell: Cell = {\r\n                content: '',\r\n                type: action.payload.type,\r\n                id: randomId()\r\n            }\r\n            // add cell to data object\r\n            state.data[cell.id] = cell\r\n\r\n            // insert id of cell into order array\r\n            const foundIndex = state.order.findIndex(id => id === action.payload.id)\r\n\r\n            if (foundIndex < 0) {\r\n                state.order.unshift(cell.id)\r\n            } else {\r\n                state.order.splice(foundIndex + 1, 0, cell.id)\r\n            }\r\n            \r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n})\r\n\r\nconst randomId = () => {\r\n    return Math.random().toString(36).substring(2, 5)\r\n}\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}