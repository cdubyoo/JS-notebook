{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[46],{214:function(n,s){Prism.languages.bison=Prism.languages.extend(\"c\",{}),Prism.languages.insertBefore(\"bison\",\"comment\",{bison:{pattern:/^[\\s\\S]*?%%[\\s\\S]*?%%/,inside:{c:{pattern:/%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,inside:{delimiter:{pattern:/^%?\\{|%?\\}$/,alias:\"punctuation\"},\"bison-variable\":{pattern:/[$@](?:<[^\\s>]+>)?[\\w$]+/,alias:\"variable\",inside:{punctuation:/<|>/}},rest:Prism.languages.c}},comment:Prism.languages.c.comment,string:Prism.languages.c.string,property:/\\S+(?=:)/,keyword:/%\\w+/,number:{pattern:/(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,lookbehind:!0},punctuation:/%[%?]|[|:;\\[\\]<>]/}}})}}]);","name":"static/js/46.d1b03ad2.chunk.js","map":{"version":3,"sources":["static/js/46.d1b03ad2.chunk.js"],"names":["this","push","214","module","exports","Prism","languages","bison","extend","insertBefore","pattern","inside","c","delimiter","alias","bison-variable","punctuation","rest","comment","string","property","keyword","number","lookbehind"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAEnEC,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,MAAQF,MAAMC,UAAUE,OAAO,IAAK,IACpDH,MAAMC,UAAUG,aAAa,QAAS,UAAW,CAC/CF,MAAS,CAIPG,QAAS,wBACTC,OAAQ,CACNC,EAAK,CAEHF,QAAS,0CACTC,OAAQ,CACNE,UAAa,CACXH,QAAS,cACTI,MAAO,eAETC,iBAAkB,CAChBL,QAAS,2BACTI,MAAO,WACPH,OAAQ,CACNK,YAAe,QAGnBC,KAAMZ,MAAMC,UAAUM,IAG1BM,QAAWb,MAAMC,UAAUM,EAAEM,QAC7BC,OAAUd,MAAMC,UAAUM,EAAEO,OAC5BC,SAAY,WACZC,QAAW,OACXC,OAAU,CACRZ,QAAS,gCACTa,YAAY,GAEdP,YAAe"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[46],{\n\n/***/ 214:\n/***/ (function(module, exports) {\n\nPrism.languages.bison = Prism.languages.extend('c', {});\nPrism.languages.insertBefore('bison', 'comment', {\n  'bison': {\n    // This should match all the beginning of the file\n    // including the prologue(s), the bison declarations and\n    // the grammar rules.\n    pattern: /^[\\s\\S]*?%%[\\s\\S]*?%%/,\n    inside: {\n      'c': {\n        // Allow for one level of nested braces\n        pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n        inside: {\n          'delimiter': {\n            pattern: /^%?\\{|%?\\}$/,\n            alias: 'punctuation'\n          },\n          'bison-variable': {\n            pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n            alias: 'variable',\n            inside: {\n              'punctuation': /<|>/\n            }\n          },\n          rest: Prism.languages.c\n        }\n      },\n      'comment': Prism.languages.c.comment,\n      'string': Prism.languages.c.string,\n      'property': /\\S+(?=:)/,\n      'keyword': /%\\w+/,\n      'number': {\n        pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n        lookbehind: true\n      },\n      'punctuation': /%[%?]|[|:;\\[\\]<>]/\n    }\n  }\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-bison.js"],"names":["Prism","languages","bison","extend","insertBefore","pattern","inside","alias","rest","c","comment","string","lookbehind"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAN,CAAgBC,KAAhB,GAAwBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,GAAvB,EAA4B,EAA5B,CAAxB;AAEAH,KAAK,CAACC,SAAN,CAAgBG,YAAhB,CAA6B,OAA7B,EAAsC,SAAtC,EAAiD;AAChD,WAAS;AACR;AACA;AACA;AACAC,WAAO,EAAE,uBAJD;AAKRC,UAAM,EAAE;AACP,WAAK;AACJ;AACAD,eAAO,EAAE,yCAFL;AAGJC,cAAM,EAAE;AACP,uBAAa;AACZD,mBAAO,EAAE,aADG;AAEZE,iBAAK,EAAE;AAFK,WADN;AAKP,4BAAkB;AACjBF,mBAAO,EAAE,0BADQ;AAEjBE,iBAAK,EAAE,UAFU;AAGjBD,kBAAM,EAAE;AACP,6BAAe;AADR;AAHS,WALX;AAYPE,cAAI,EAAER,KAAK,CAACC,SAAN,CAAgBQ;AAZf;AAHJ,OADE;AAmBP,iBAAWT,KAAK,CAACC,SAAN,CAAgBQ,CAAhB,CAAkBC,OAnBtB;AAoBP,gBAAUV,KAAK,CAACC,SAAN,CAAgBQ,CAAhB,CAAkBE,MApBrB;AAqBP,kBAAY,UArBL;AAsBP,iBAAW,MAtBJ;AAuBP,gBAAU;AACTN,eAAO,EAAE,+BADA;AAETO,kBAAU,EAAE;AAFH,OAvBH;AA2BP,qBAAe;AA3BR;AALA;AADuC,CAAjD,E","file":"x","sourcesContent":["Prism.languages.bison = Prism.languages.extend('c', {});\n\nPrism.languages.insertBefore('bison', 'comment', {\n\t'bison': {\n\t\t// This should match all the beginning of the file\n\t\t// including the prologue(s), the bison declarations and\n\t\t// the grammar rules.\n\t\tpattern: /^[\\s\\S]*?%%[\\s\\S]*?%%/,\n\t\tinside: {\n\t\t\t'c': {\n\t\t\t\t// Allow for one level of nested braces\n\t\t\t\tpattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'delimiter': {\n\t\t\t\t\t\tpattern: /^%?\\{|%?\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\t'bison-variable': {\n\t\t\t\t\t\tpattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n\t\t\t\t\t\talias: 'variable',\n\t\t\t\t\t\tinside: {\n\t\t\t\t\t\t\t'punctuation': /<|>/\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.c\n\t\t\t\t}\n\t\t\t},\n\t\t\t'comment': Prism.languages.c.comment,\n\t\t\t'string': Prism.languages.c.string,\n\t\t\t'property': /\\S+(?=:)/,\n\t\t\t'keyword': /%\\w+/,\n\t\t\t'number': {\n\t\t\t\tpattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t'punctuation': /%[%?]|[|:;\\[\\]<>]/\n\t\t}\n\t}\n});"]}}