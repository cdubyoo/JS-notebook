{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[330],{498:function(e,t){!function(e){e.languages.pure={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0},/#!.+/],\"inline-lang\":{pattern:/%<[\\s\\S]+?%>/,greedy:!0,inside:{lang:{pattern:/(^%< *)-\\*-.+?-\\*-/,lookbehind:!0,alias:\"comment\"},delimiter:{pattern:/^%<.*|%>$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,greedy:!0},number:{pattern:/((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,lookbehind:!0},keyword:/\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,function:/\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,special:{pattern:/\\b__[a-z]+__\\b/i,alias:\"builtin\"},operator:/(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,punctuation:/[(){}\\[\\];,|]/};var t=/%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source;[\"c\",{lang:\"c++\",alias:\"cpp\"},\"fortran\"].forEach((function(a){var r=a;if(\"string\"!==typeof a&&(r=a.alias,a=a.lang),e.languages[r]){var i={};i[\"inline-lang-\"+r]={pattern:RegExp(t.replace(\"{lang}\",a.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,\"\\\\$1\")),\"i\"),inside:e.util.clone(e.languages.pure[\"inline-lang\"].inside)},i[\"inline-lang-\"+r].inside.rest=e.util.clone(e.languages[r]),e.languages.insertBefore(\"pure\",\"inline-lang\",i)}})),e.languages.c&&(e.languages.pure[\"inline-lang\"].inside.rest=e.util.clone(e.languages.c))}(Prism)}}]);","name":"static/js/330.6aac5537.chunk.js","map":{"version":3,"sources":["static/js/330.6aac5537.chunk.js"],"names":["this","push","498","module","exports","Prism","languages","pure","comment","pattern","lookbehind","inline-lang","greedy","inside","lang","alias","delimiter","string","number","keyword","function","special","operator","punctuation","inlineLanguageRe","source","forEach","o","RegExp","replace","util","clone","rest","insertBefore","c"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,IAExB,SAAWC,GAETA,EAAMC,UAAUC,KAAO,CACrBC,QAAW,CAAC,CACVC,QAAS,4BACTC,YAAY,GACX,CACDD,QAAS,mBACTC,YAAY,GACX,QACHC,cAAe,CACbF,QAAS,eACTG,QAAQ,EACRC,OAAQ,CACNC,KAAQ,CACNL,QAAS,qBACTC,YAAY,EACZK,MAAO,WAETC,UAAa,CACXP,QAAS,YACTM,MAAO,iBAIbE,OAAU,CACRR,QAAS,wBACTG,QAAQ,GAEVM,OAAU,CAERT,QAAS,mGACTC,YAAY,GAEdS,QAAW,0SACXC,SAAY,00DACZC,QAAW,CACTZ,QAAS,kBACTM,MAAO,WAGTO,SAAY,8GAEZC,YAAe,iBAEjB,IAIIC,EAAmB,sCAAsCC,OAJvC,CAAC,IAAK,CAC1BX,KAAM,MACNC,MAAO,OACN,WAEaW,SAAQ,SAAUZ,GAChC,IAAIC,EAAQD,EAOZ,GALoB,kBAATA,IACTC,EAAQD,EAAKC,MACbD,EAAOA,EAAKA,MAGVT,EAAMC,UAAUS,GAAQ,CAC1B,IAAIY,EAAI,GACRA,EAAE,eAAiBZ,GAAS,CAC1BN,QAASmB,OAAOJ,EAAiBK,QAAQ,SAAUf,EAAKe,QAAQ,wBAAyB,SAAU,KACnGhB,OAAQR,EAAMyB,KAAKC,MAAM1B,EAAMC,UAAUC,KAAK,eAAeM,SAE/Dc,EAAE,eAAiBZ,GAAOF,OAAOmB,KAAO3B,EAAMyB,KAAKC,MAAM1B,EAAMC,UAAUS,IACzEV,EAAMC,UAAU2B,aAAa,OAAQ,cAAeN,OAIpDtB,EAAMC,UAAU4B,IAClB7B,EAAMC,UAAUC,KAAK,eAAeM,OAAOmB,KAAO3B,EAAMyB,KAAKC,MAAM1B,EAAMC,UAAU4B,IAtEvF,CAwEG7B"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[330],{\n\n/***/ 498:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  // https://agraef.github.io/pure-docs/pure.html#lexical-matters\n  Prism.languages.pure = {\n    'comment': [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true\n    }, /#!.+/],\n    'inline-lang': {\n      pattern: /%<[\\s\\S]+?%>/,\n      greedy: true,\n      inside: {\n        'lang': {\n          pattern: /(^%< *)-\\*-.+?-\\*-/,\n          lookbehind: true,\n          alias: 'comment'\n        },\n        'delimiter': {\n          pattern: /^%<.*|%>$/,\n          alias: 'punctuation'\n        }\n      }\n    },\n    'string': {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'number': {\n      // The look-behind prevents wrong highlighting of the .. operator\n      pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,\n      lookbehind: true\n    },\n    'keyword': /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n    'function': /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n    'special': {\n      pattern: /\\b__[a-z]+__\\b/i,\n      alias: 'builtin'\n    },\n    // Any combination of operator chars can be an operator\n    'operator': /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n    // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n    'punctuation': /[(){}\\[\\];,|]/\n  };\n  var inlineLanguages = ['c', {\n    lang: 'c++',\n    alias: 'cpp'\n  }, 'fortran'];\n  var inlineLanguageRe = /%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source;\n  inlineLanguages.forEach(function (lang) {\n    var alias = lang;\n\n    if (typeof lang !== 'string') {\n      alias = lang.alias;\n      lang = lang.lang;\n    }\n\n    if (Prism.languages[alias]) {\n      var o = {};\n      o['inline-lang-' + alias] = {\n        pattern: RegExp(inlineLanguageRe.replace('{lang}', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')), 'i'),\n        inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n      };\n      o['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);\n      Prism.languages.insertBefore('pure', 'inline-lang', o);\n    }\n  }); // C is the default inline language\n\n  if (Prism.languages.c) {\n    Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);\n  }\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-pure.js"],"names":["Prism","languages","pure","pattern","lookbehind","greedy","inside","alias","inlineLanguages","lang","inlineLanguageRe","source","forEach","o","RegExp","replace","util","clone","rest","insertBefore","c"],"mappings":";;;;;AAAC,WAAUA,KAAV,EAAiB;AACjB;AAEAA,OAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuB;AACtB,eAAW,CACV;AACCC,aAAO,EAAE,2BADV;AAECC,gBAAU,EAAE;AAFb,KADU,EAKV;AACCD,aAAO,EAAE,kBADV;AAECC,gBAAU,EAAE;AAFb,KALU,EASV,MATU,CADW;AAYtB,mBAAe;AACdD,aAAO,EAAE,cADK;AAEdE,YAAM,EAAE,IAFM;AAGdC,YAAM,EAAE;AACP,gBAAQ;AACPH,iBAAO,EAAE,oBADF;AAEPC,oBAAU,EAAE,IAFL;AAGPG,eAAK,EAAE;AAHA,SADD;AAMP,qBAAa;AACZJ,iBAAO,EAAE,WADG;AAEZI,eAAK,EAAE;AAFK;AANN;AAHM,KAZO;AA2BtB,cAAU;AACTJ,aAAO,EAAE,uBADA;AAETE,YAAM,EAAE;AAFC,KA3BY;AA+BtB,cAAU;AACT;AACAF,aAAO,EAAE,kGAFA;AAGTC,gBAAU,EAAE;AAHH,KA/BY;AAoCtB,eAAW,ySApCW;AAqCtB,gBAAY,y0DArCU;AAsCtB,eAAW;AACVD,aAAO,EAAE,iBADC;AAEVI,WAAK,EAAE;AAFG,KAtCW;AA0CtB;AACA,gBAAY,6GA3CU;AA4CtB;AACA,mBAAe;AA7CO,GAAvB;AAgDA,MAAIC,eAAe,GAAG,CACrB,GADqB,EAErB;AAAEC,QAAI,EAAE,KAAR;AAAeF,SAAK,EAAE;AAAtB,GAFqB,EAGrB,SAHqB,CAAtB;AAKA,MAAIG,gBAAgB,GAAG,sCAAsCC,MAA7D;AAEAH,iBAAe,CAACI,OAAhB,CAAwB,UAAUH,IAAV,EAAgB;AACvC,QAAIF,KAAK,GAAGE,IAAZ;;AACA,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC7BF,WAAK,GAAGE,IAAI,CAACF,KAAb;AACAE,UAAI,GAAGA,IAAI,CAACA,IAAZ;AACA;;AACD,QAAIT,KAAK,CAACC,SAAN,CAAgBM,KAAhB,CAAJ,EAA4B;AAC3B,UAAIM,CAAC,GAAG,EAAR;AACAA,OAAC,CAAC,iBAAiBN,KAAlB,CAAD,GAA4B;AAC3BJ,eAAO,EAAEW,MAAM,CAACJ,gBAAgB,CAACK,OAAjB,CAAyB,QAAzB,EAAmCN,IAAI,CAACM,OAAL,CAAa,uBAAb,EAAqC,MAArC,CAAnC,CAAD,EAAmF,GAAnF,CADY;AAE3BT,cAAM,EAAEN,KAAK,CAACgB,IAAN,CAAWC,KAAX,CAAiBjB,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqB,aAArB,EAAoCI,MAArD;AAFmB,OAA5B;AAIAO,OAAC,CAAC,iBAAiBN,KAAlB,CAAD,CAA0BD,MAA1B,CAAiCY,IAAjC,GAAwClB,KAAK,CAACgB,IAAN,CAAWC,KAAX,CAAiBjB,KAAK,CAACC,SAAN,CAAgBM,KAAhB,CAAjB,CAAxC;AACAP,WAAK,CAACC,SAAN,CAAgBkB,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoDN,CAApD;AACA;AACD,GAfD,EA1DiB,CA2EjB;;AACA,MAAIb,KAAK,CAACC,SAAN,CAAgBmB,CAApB,EAAuB;AACtBpB,SAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqB,aAArB,EAAoCI,MAApC,CAA2CY,IAA3C,GAAkDlB,KAAK,CAACgB,IAAN,CAAWC,KAAX,CAAiBjB,KAAK,CAACC,SAAN,CAAgBmB,CAAjC,CAAlD;AACA;AAED,CAhFA,EAgFCpB,KAhFD,CAAD,C","file":"x","sourcesContent":["(function (Prism) {\n\t// https://agraef.github.io/pure-docs/pure.html#lexical-matters\n\n\tPrism.languages.pure = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t/#!.+/\n\t\t],\n\t\t'inline-lang': {\n\t\t\tpattern: /%<[\\s\\S]+?%>/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'lang': {\n\t\t\t\t\tpattern: /(^%< *)-\\*-.+?-\\*-/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'comment'\n\t\t\t\t},\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^%<.*|%>$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'string': {\n\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'number': {\n\t\t\t// The look-behind prevents wrong highlighting of the .. operator\n\t\t\tpattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d)?|\\B\\.\\d)\\d*(?:e[+-]?\\d+)?L?)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n\t\t'function': /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n\t\t'special': {\n\t\t\tpattern: /\\b__[a-z]+__\\b/i,\n\t\t\talias: 'builtin'\n\t\t},\n\t\t// Any combination of operator chars can be an operator\n\t\t'operator': /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n\t\t// FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n\t\t'punctuation': /[(){}\\[\\];,|]/\n\t};\n\n\tvar inlineLanguages = [\n\t\t'c',\n\t\t{ lang: 'c++', alias: 'cpp' },\n\t\t'fortran'\n\t];\n\tvar inlineLanguageRe = /%< *-\\*- *{lang}\\d* *-\\*-[\\s\\S]+?%>/.source;\n\n\tinlineLanguages.forEach(function (lang) {\n\t\tvar alias = lang;\n\t\tif (typeof lang !== 'string') {\n\t\t\talias = lang.alias;\n\t\t\tlang = lang.lang;\n\t\t}\n\t\tif (Prism.languages[alias]) {\n\t\t\tvar o = {};\n\t\t\to['inline-lang-' + alias] = {\n\t\t\t\tpattern: RegExp(inlineLanguageRe.replace('{lang}', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,'\\\\$1')), 'i'),\n\t\t\t\tinside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n\t\t\t};\n\t\t\to['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);\n\t\t\tPrism.languages.insertBefore('pure', 'inline-lang', o);\n\t\t}\n\t});\n\n\t// C is the default inline language\n\tif (Prism.languages.c) {\n\t\tPrism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);\n\t}\n\n}(Prism));\n"]}}