{"ast":null,"code":"import * as esbuild from 'esbuild-wasm';\nimport { unpkgPathPlugin } from './plugins/unpkg-path-plugin';\nimport { fetchPlugin } from './plugins/fetch-plugin'; // bundle our code\n\nlet service;\n\nconst bundle = async rawCode => {\n  // check if service has been started, if not start it\n  if (!service) {\n    service = await esbuild.startService({\n      worker: true,\n      wasmURL: 'http://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm'\n    });\n  }\n\n  try {\n    const result = await service.build({\n      entryPoints: ['index.js'],\n      bundle: true,\n      write: false,\n      plugins: [unpkgPathPlugin(), fetchPlugin(rawCode)],\n      // defines for bundling\n      define: {\n        'process.env.NODE_ENV': '\"production\"',\n        global: 'window'\n      }\n    });\n    return {\n      code: result.outputFiles[0].text,\n      err: ''\n    };\n  } catch (err) {\n    return {\n      code: '',\n      err: err.message\n    };\n  }\n};\n\nexport default bundle;","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/bundler/index.ts"],"names":["esbuild","unpkgPathPlugin","fetchPlugin","service","bundle","rawCode","startService","worker","wasmURL","result","build","entryPoints","write","plugins","define","global","code","outputFiles","text","err","message"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,WAAT,QAA4B,wBAA5B,C,CAEA;;AACA,IAAIC,OAAJ;;AACA,MAAMC,MAAM,GAAG,MAAOC,OAAP,IAA2B;AACtC;AACA,MAAI,CAACF,OAAL,EAAc;AACVA,IAAAA,OAAO,GAAG,MAAMH,OAAO,CAACM,YAAR,CAAqB;AACjCC,MAAAA,MAAM,EAAE,IADyB;AAEjCC,MAAAA,OAAO,EAAE;AAFwB,KAArB,CAAhB;AAIH;;AAED,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMN,OAAO,CAACO,KAAR,CAAc;AAC/BC,MAAAA,WAAW,EAAE,CAAC,UAAD,CADkB;AAE/BP,MAAAA,MAAM,EAAE,IAFuB;AAG/BQ,MAAAA,KAAK,EAAE,KAHwB;AAI/BC,MAAAA,OAAO,EAAE,CACLZ,eAAe,EADV,EACcC,WAAW,CAACG,OAAD,CADzB,CAJsB;AAQ/B;AACAS,MAAAA,MAAM,EAAE;AACJ,gCAAwB,cADpB;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AATuB,KAAd,CAArB;AAcA,WAAO;AACHC,MAAAA,IAAI,EAAEP,MAAM,CAACQ,WAAP,CAAmB,CAAnB,EAAsBC,IADzB;AAEHC,MAAAA,GAAG,EAAE;AAFF,KAAP;AAIH,GAnBD,CAmBE,OAAOA,GAAP,EAAY;AACV,WAAO;AACHH,MAAAA,IAAI,EAAE,EADH;AAEHG,MAAAA,GAAG,EAAEA,GAAG,CAACC;AAFN,KAAP;AAIH;AAGJ,CApCD;;AAsCA,eAAehB,MAAf","sourcesContent":["import * as esbuild from 'esbuild-wasm'\r\nimport { unpkgPathPlugin } from './plugins/unpkg-path-plugin'\r\nimport { fetchPlugin } from './plugins/fetch-plugin'\r\n\r\n// bundle our code\r\nlet service: esbuild.Service\r\nconst bundle = async (rawCode: string) => {\r\n    // check if service has been started, if not start it\r\n    if (!service) {\r\n        service = await esbuild.startService({\r\n            worker: true,\r\n            wasmURL: 'http://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm'\r\n        })\r\n    }\r\n\r\n    try {\r\n        const result = await service.build({\r\n            entryPoints: ['index.js'],\r\n            bundle: true,\r\n            write: false,\r\n            plugins: [\r\n                unpkgPathPlugin(), fetchPlugin(rawCode)\r\n            ],\r\n            \r\n            // defines for bundling\r\n            define: {\r\n                'process.env.NODE_ENV': '\"production\"',\r\n                global: 'window'\r\n            },\r\n        })\r\n        return {\r\n            code: result.outputFiles[0].text,\r\n            err: ''\r\n        }\r\n    } catch (err) {\r\n        return {\r\n            code: '',\r\n            err: err.message\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default bundle"]},"metadata":{},"sourceType":"module"}