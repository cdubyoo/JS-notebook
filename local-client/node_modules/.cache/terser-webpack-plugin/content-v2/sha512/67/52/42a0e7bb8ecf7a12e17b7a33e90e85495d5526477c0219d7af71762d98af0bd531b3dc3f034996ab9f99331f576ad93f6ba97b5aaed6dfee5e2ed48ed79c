{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[194],{362:function(a,n){!function(a){var n=a.languages.javadoclike={parameter:{pattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,lookbehind:!0},keyword:{pattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,lookbehind:!0},punctuation:/[{}]/};Object.defineProperty(n,\"addSupport\",{value:function(n,e){\"string\"===typeof n&&(n=[n]),n.forEach((function(n){!function(n,e){var t=\"doc-comment\",o=a.languages[n];if(o){var r=o[t];if(!r){var i={\"doc-comment\":{pattern:/(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0,alias:\"comment\"}};r=(o=a.languages.insertBefore(n,\"comment\",i))[t]}if(r instanceof RegExp&&(r=o[t]={pattern:r}),Array.isArray(r))for(var s=0,p=r.length;s<p;s++)r[s]instanceof RegExp&&(r[s]={pattern:r[s]}),e(r[s]);else e(r)}}(n,(function(a){a.inside||(a.inside={}),a.inside.rest=e}))}))}}),n.addSupport([\"java\",\"javascript\",\"php\"],n)}(Prism)}}]);","name":"static/js/194.a4312414.chunk.js","map":{"version":3,"sources":["static/js/194.a4312414.chunk.js"],"names":["this","push","362","module","exports","Prism","javaDocLike","languages","javadoclike","parameter","pattern","lookbehind","keyword","punctuation","Object","defineProperty","value","docLanguage","forEach","lang","callback","tokenName","grammar","token","definition","doc-comment","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,IAExB,SAAWC,GACT,IAAIC,EAAcD,EAAME,UAAUC,YAAc,CAC9CC,UAAa,CACXC,QAAS,8DACTC,YAAY,GAEdC,QAAW,CAGTF,QAAS,qDACTC,YAAY,GAEdE,YAAe,QA4EjBC,OAAOC,eAAeT,EAAa,aAAc,CAC/CU,MAjBF,SAAoBT,EAAWU,GACJ,kBAAdV,IACTA,EAAY,CAACA,IAGfA,EAAUW,SAAQ,SAAUC,IAxD9B,SAA2BA,EAAMC,GAC/B,IAAIC,EAAY,cACZC,EAAUjB,EAAME,UAAUY,GAE9B,GAAKG,EAAL,CAIA,IAAIC,EAAQD,EAAQD,GAEpB,IAAKE,EAAO,CAEV,IAAIC,EAAa,CACjBC,cAAwB,CACtBf,QAAS,wCACTC,YAAY,EACZe,MAAO,YAGTH,GADAD,EAAUjB,EAAME,UAAUoB,aAAaR,EAAM,UAAWK,IACxCH,GAUlB,GAPIE,aAAiBK,SAEnBL,EAAQD,EAAQD,GAAa,CAC3BX,QAASa,IAITM,MAAMC,QAAQP,GAChB,IAAK,IAAIQ,EAAI,EAAGC,EAAIT,EAAMU,OAAQF,EAAIC,EAAGD,IACnCR,EAAMQ,aAAcH,SACtBL,EAAMQ,GAAK,CACTrB,QAASa,EAAMQ,KAInBX,EAASG,EAAMQ,SAGjBX,EAASG,IAiBTW,CAAkBf,GAAM,SAAUT,GAC3BA,EAAQyB,SACXzB,EAAQyB,OAAS,IAGnBzB,EAAQyB,OAAOC,KAAOnB,WAQ5BX,EAAY+B,WAAW,CAAC,OAAQ,aAAc,OAAQ/B,GA3FxD,CA4FGD"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[194],{\n\n/***/ 362:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n\n    if (!grammar) {\n      return;\n    }\n\n    var token = grammar[tokenName];\n\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        lookbehind: true,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n\n\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-javadoclike.js"],"names":["Prism","javaDocLike","languages","javadoclike","pattern","lookbehind","docCommentSupport","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","addSupport","docLanguage","forEach","inside","rest","Object","defineProperty","value"],"mappings":";;;;;AAAC,WAAUA,KAAV,EAAiB;AAEjB,MAAIC,WAAW,GAAGD,KAAK,CAACE,SAAN,CAAgBC,WAAhB,GAA8B;AAC/C,iBAAa;AACZC,aAAO,EAAE,6DADG;AAEZC,gBAAU,EAAE;AAFA,KADkC;AAK/C,eAAW;AACV;AACA;AACAD,aAAO,EAAE,oDAHC;AAIVC,gBAAU,EAAE;AAJF,KALoC;AAW/C,mBAAe;AAXgC,GAAhD;AAeA;AACD;AACA;AACA;AACA;AACA;;AACC,WAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,QAAjC,EAA2C;AAC1C,QAAIC,SAAS,GAAG,aAAhB;AAEA,QAAIC,OAAO,GAAGV,KAAK,CAACE,SAAN,CAAgBK,IAAhB,CAAd;;AACA,QAAI,CAACG,OAAL,EAAc;AACb;AACA;;AACD,QAAIC,KAAK,GAAGD,OAAO,CAACD,SAAD,CAAnB;;AAEA,QAAI,CAACE,KAAL,EAAY;AACX;AACA,UAAIC,UAAU,GAAG,EAAjB;AACAA,gBAAU,CAACH,SAAD,CAAV,GAAwB;AACvBL,eAAO,EAAE,uCADc;AAEvBC,kBAAU,EAAE,IAFW;AAGvBQ,aAAK,EAAE;AAHgB,OAAxB;AAMAH,aAAO,GAAGV,KAAK,CAACE,SAAN,CAAgBY,YAAhB,CAA6BP,IAA7B,EAAmC,SAAnC,EAA8CK,UAA9C,CAAV;AACAD,WAAK,GAAGD,OAAO,CAACD,SAAD,CAAf;AACA;;AAED,QAAIE,KAAK,YAAYI,MAArB,EAA6B;AAAE;AAC9BJ,WAAK,GAAGD,OAAO,CAACD,SAAD,CAAP,GAAqB;AAAEL,eAAO,EAAEO;AAAX,OAA7B;AACA;;AAED,QAAIK,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAJ,EAA0B;AACzB,WAAK,IAAIO,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC7C,YAAIP,KAAK,CAACO,CAAD,CAAL,YAAoBH,MAAxB,EAAgC;AAC/BJ,eAAK,CAACO,CAAD,CAAL,GAAW;AAAEd,mBAAO,EAAEO,KAAK,CAACO,CAAD;AAAhB,WAAX;AACA;;AACDV,gBAAQ,CAACG,KAAK,CAACO,CAAD,CAAN,CAAR;AACA;AACD,KAPD,MAOO;AACNV,cAAQ,CAACG,KAAD,CAAR;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;;;AACC,WAASU,UAAT,CAAoBnB,SAApB,EAA+BoB,WAA/B,EAA4C;AAC3C,QAAI,OAAOpB,SAAP,KAAqB,QAAzB,EAAmC;AAClCA,eAAS,GAAG,CAACA,SAAD,CAAZ;AACA;;AAEDA,aAAS,CAACqB,OAAV,CAAkB,UAAUhB,IAAV,EAAgB;AACjCD,uBAAiB,CAACC,IAAD,EAAO,UAAUH,OAAV,EAAmB;AAC1C,YAAI,CAACA,OAAO,CAACoB,MAAb,EAAqB;AACpBpB,iBAAO,CAACoB,MAAR,GAAiB,EAAjB;AACA;;AACDpB,eAAO,CAACoB,MAAR,CAAeC,IAAf,GAAsBH,WAAtB;AACA,OALgB,CAAjB;AAMA,KAPD;AAQA;;AAEDI,QAAM,CAACC,cAAP,CAAsB1B,WAAtB,EAAmC,YAAnC,EAAiD;AAAE2B,SAAK,EAAEP;AAAT,GAAjD;AAEApB,aAAW,CAACoB,UAAZ,CAAuB,CAAC,MAAD,EAAS,YAAT,EAAuB,KAAvB,CAAvB,EAAsDpB,WAAtD;AAEA,CAtFA,EAsFCD,KAtFD,CAAD,C","file":"x","sourcesContent":["(function (Prism) {\n\n\tvar javaDocLike = Prism.languages.javadoclike = {\n\t\t'parameter': {\n\t\t\tpattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': {\n\t\t\t// keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n\t\t\t// @word, {@word}\n\t\t\tpattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[{}]/\n\t};\n\n\n\t/**\n\t * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n\t *\n\t * @param {string} lang the language add doc comment support to.\n\t * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n\t */\n\tfunction docCommentSupport(lang, callback) {\n\t\tvar tokenName = 'doc-comment';\n\n\t\tvar grammar = Prism.languages[lang];\n\t\tif (!grammar) {\n\t\t\treturn;\n\t\t}\n\t\tvar token = grammar[tokenName];\n\n\t\tif (!token) {\n\t\t\t// add doc comment: /** */\n\t\t\tvar definition = {};\n\t\t\tdefinition[tokenName] = {\n\t\t\t\tpattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'comment'\n\t\t\t};\n\n\t\t\tgrammar = Prism.languages.insertBefore(lang, 'comment', definition);\n\t\t\ttoken = grammar[tokenName];\n\t\t}\n\n\t\tif (token instanceof RegExp) { // convert regex to object\n\t\t\ttoken = grammar[tokenName] = { pattern: token };\n\t\t}\n\n\t\tif (Array.isArray(token)) {\n\t\t\tfor (var i = 0, l = token.length; i < l; i++) {\n\t\t\t\tif (token[i] instanceof RegExp) {\n\t\t\t\t\ttoken[i] = { pattern: token[i] };\n\t\t\t\t}\n\t\t\t\tcallback(token[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tcallback(token);\n\t\t}\n\t}\n\n\t/**\n\t * Adds doc-comment support to the given languages for the given documentation language.\n\t *\n\t * @param {string[]|string} languages\n\t * @param {Object} docLanguage\n\t */\n\tfunction addSupport(languages, docLanguage) {\n\t\tif (typeof languages === 'string') {\n\t\t\tlanguages = [languages];\n\t\t}\n\n\t\tlanguages.forEach(function (lang) {\n\t\t\tdocCommentSupport(lang, function (pattern) {\n\t\t\t\tif (!pattern.inside) {\n\t\t\t\t\tpattern.inside = {};\n\t\t\t\t}\n\t\t\t\tpattern.inside.rest = docLanguage;\n\t\t\t});\n\t\t});\n\t}\n\n\tObject.defineProperty(javaDocLike, 'addSupport', { value: addSupport });\n\n\tjavaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n\n}(Prism));\n"]}}