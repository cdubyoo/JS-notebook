{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./text-editor.css';import{useState,useEffect,useRef}from'react';import MDEditor from'@uiw/react-md-editor';import{useActions}from'../hooks/use-actions';var TextEditor=function TextEditor(_ref){var cell=_ref.cell;var ref=useRef(null);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),editing=_useState2[0],setEditing=_useState2[1];var _useActions=useActions(),updateCell=_useActions.updateCell;useEffect(function(){var listener=function listener(event){if(ref.current&&event.target&&ref.current.contains(event.target)){return;}setEditing(false);};document.addEventListener('click',listener,{capture:true});return function(){document.removeEventListener('click',listener,{capture:true});};});if(editing){return/*#__PURE__*/_jsx(\"div\",{className:\"text-editor\",ref:ref,children:/*#__PURE__*/_jsx(MDEditor,{value:cell.content,onChange:function onChange(v){return updateCell(cell.id,v||'');}})});}return/*#__PURE__*/_jsx(\"div\",{className:\"text-editor card\",onClick:function onClick(){return setEditing(true);},children:/*#__PURE__*/_jsx(\"div\",{className:\"card-content\",children:/*#__PURE__*/_jsx(MDEditor.Markdown,{source:cell.content||'Click to edit'})})});};export default TextEditor;","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/components/text-editor.tsx"],"names":["useState","useEffect","useRef","MDEditor","useActions","TextEditor","cell","ref","editing","setEditing","updateCell","listener","event","current","target","contains","document","addEventListener","capture","removeEventListener","content","v","id"],"mappings":"6LAAA,MAAO,mBAAP,CACA,OAASA,QAAT,CAAmBC,SAAnB,CAA8BC,MAA9B,KAA4C,OAA5C,CACA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,CAEA,OAASC,UAAT,KAA2B,sBAA3B,CAMA,GAAMC,CAAAA,UAAqC,CAAG,QAAxCA,CAAAA,UAAwC,MAAc,IAAXC,CAAAA,IAAW,MAAXA,IAAW,CACxD,GAAMC,CAAAA,GAAG,CAAGL,MAAM,CAAwB,IAAxB,CAAlB,CADwD,cAE1BF,QAAQ,CAAC,KAAD,CAFkB,wCAEjDQ,OAFiD,eAExCC,UAFwC,+BAGjCL,UAAU,EAHuB,CAGhDM,UAHgD,aAGhDA,UAHgD,CAKxDT,SAAS,CAAC,UAAM,CACZ,GAAMU,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAuB,CACpC,GAAIL,GAAG,CAACM,OAAJ,EAAeD,KAAK,CAACE,MAArB,EAA+BP,GAAG,CAACM,OAAJ,CAAYE,QAAZ,CAAqBH,KAAK,CAACE,MAA3B,CAAnC,CAA+E,CAC3E,OACH,CACDL,UAAU,CAAC,KAAD,CAAV,CACH,CALD,CAMAO,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmCN,QAAnC,CAA6C,CAAEO,OAAO,CAAC,IAAV,CAA7C,EAEA,MAAO,WAAM,CACTF,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,CAAsCR,QAAtC,CAAgD,CAAEO,OAAO,CAAC,IAAV,CAAhD,EACH,CAFD,CAGH,CAZQ,CAAT,CAcA,GAAIV,OAAJ,CAAa,CACT,mBACI,YAAK,SAAS,CAAC,aAAf,CAA6B,GAAG,CAAED,GAAlC,uBACI,KAAC,QAAD,EAAU,KAAK,CAAED,IAAI,CAACc,OAAtB,CAA+B,QAAQ,CAAE,kBAACC,CAAD,QAAOX,CAAAA,UAAU,CAACJ,IAAI,CAACgB,EAAN,CAAUD,CAAC,EAAI,EAAf,CAAjB,EAAzC,EADJ,EADJ,CAKH,CAED,mBACI,YAAK,SAAS,CAAC,kBAAf,CAAkC,OAAO,CAAE,yBAAMZ,CAAAA,UAAU,CAAC,IAAD,CAAhB,EAA3C,uBACI,YAAK,SAAS,CAAC,cAAf,uBACI,KAAC,QAAD,CAAU,QAAV,EAAmB,MAAM,CAAEH,IAAI,CAACc,OAAL,EAAgB,eAA3C,EADJ,EADJ,EADJ,CAQH,CAnCD,CAqCA,cAAef,CAAAA,UAAf","sourcesContent":["import './text-editor.css'\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport MDEditor from '@uiw/react-md-editor'\r\nimport { Cell } from '../state'\r\nimport { useActions } from '../hooks/use-actions'\r\n\r\ninterface TextEditorProps {\r\n    cell: Cell\r\n}\r\n\r\nconst TextEditor: React.FC<TextEditorProps> = ({ cell }) => {\r\n    const ref = useRef<HTMLDivElement | null>(null)\r\n    const [editing, setEditing] = useState(false)\r\n    const { updateCell } = useActions()\r\n\r\n    useEffect(() => {\r\n        const listener = (event: MouseEvent) => {\r\n            if (ref.current && event.target && ref.current.contains(event.target as Node)) {\r\n                return\r\n            } \r\n            setEditing(false)\r\n        }\r\n        document.addEventListener('click', listener, { capture:true })\r\n\r\n        return () => {\r\n            document.removeEventListener('click', listener, { capture:true })\r\n        }\r\n    })\r\n\r\n    if (editing) {\r\n        return (\r\n            <div className=\"text-editor\" ref={ref}>\r\n                <MDEditor value={cell.content} onChange={(v) => updateCell(cell.id, v || '')} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"text-editor card\" onClick={() => setEditing(true)}>\r\n            <div className=\"card-content\">\r\n                <MDEditor.Markdown source={cell.content || 'Click to edit'} />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextEditor"]},"metadata":{},"sourceType":"module"}