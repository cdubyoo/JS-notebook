{"ast":null,"code":"import produce from 'immer';\nimport { ActionType } from '../action-types';\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n}; // immer returns a a state object with the updates\n\nconst reducer = produce((state = initialState, action) => {\n  // set up different cases for different action types to handle inside this reducer\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id); // if direction is up and index is 1 then target is 0\n\n      const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n      return state;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      const cell = {\n        content: '',\n        type: action.payload.type,\n        id: randomId()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n\n      if (foundIndex < 0) {\n        state.order.push(cell.id);\n      } else {\n        state.order.splice(foundIndex, 0, cell.id);\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n});\n\nconst randomId = () => {\n  return Math.random().toString(36).substring(2, 5);\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_BEFORE","cell","randomId","foundIndex","push","splice","Math","random","toString","substring"],"mappings":"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","sourcesContent":["import produce from 'immer'\r\nimport {  ActionType } from '../action-types'\r\nimport {  Action } from '../actions'\r\nimport { Cell } from '../cell'\r\n\r\ninterface CellsState {\r\n    loading: boolean\r\n    error: string | null\r\n    order: string[]\r\n    data: {\r\n        [key: string]: Cell\r\n    }\r\n}\r\n\r\nconst initialState: CellsState = {\r\n    loading: false,\r\n    error: null,\r\n    order: [],\r\n    data: {}\r\n}\r\n// immer returns a a state object with the updates\r\nconst reducer = produce((state: CellsState = initialState, action: Action) => {\r\n    // set up different cases for different action types to handle inside this reducer\r\n    switch (action.type) {\r\n        case ActionType.UPDATE_CELL:\r\n            const { id, content } = action.payload\r\n            state.data[id].content = content\r\n            return state\r\n        case ActionType.DELETE_CELL:\r\n            delete state.data[action.payload]\r\n            state.order = state.order.filter((id) => id !== action.payload)\r\n            return state\r\n        case ActionType.MOVE_CELL:\r\n            const { direction } = action.payload\r\n            const index = state.order.findIndex((id) => id === action.payload.id)\r\n            // if direction is up and index is 1 then target is 0\r\n            const targetIndex = direction === 'up' ? index - 1 : index + 1\r\n\r\n            if (targetIndex < 0 || targetIndex > state.order.length - 1) {\r\n                return state\r\n            }\r\n            state.order[index] = state.order[targetIndex]\r\n            state.order[targetIndex] = action.payload.id\r\n            return state\r\n        case ActionType.INSERT_CELL_BEFORE:\r\n            const cell: Cell = {\r\n                content: '',\r\n                type: action.payload.type,\r\n                id: randomId()\r\n            }\r\n\r\n            state.data[cell.id] = cell\r\n            const foundIndex = state.order.findIndex(id => id === action.payload.id)\r\n\r\n            if (foundIndex < 0) {\r\n                state.order.push(cell.id)\r\n            } else {\r\n                state.order.splice(foundIndex, 0, cell.id)\r\n            }\r\n            \r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n})\r\n\r\nconst randomId = () => {\r\n    return Math.random().toString(36).substring(2, 5)\r\n}\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}