import React from 'react';
import ReactMarkdown, { ReactMarkdownProps } from 'react-markdown';
import 'prismjs/components/prism-markup';
import './styles/markdown.less';
import './styles/markdowncolor.less';
export declare type MarkdownPreviewProps = {
    className?: string;
    source?: string;
    style?: React.CSSProperties;
    onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;
    onMouseOver?: (e: React.MouseEvent<HTMLDivElement>) => void;
} & ReactMarkdownProps;
export declare type MarkdownPreviewRef = {
    mdp: React.RefObject<HTMLDivElement>;
    lang: string[];
} & MarkdownPreviewProps;
declare const _default: React.ForwardRefExoticComponent<({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.ChildrenProp & {
    readonly source?: undefined;
} & ReactMarkdown.AllowedTypesProp & {
    readonly disallowedTypes?: undefined;
} & ReactMarkdown.EscapeHtmlProp & {
    readonly skipHtml?: undefined;
    readonly allowDangerousHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.ChildrenProp & {
    readonly source?: undefined;
} & ReactMarkdown.AllowedTypesProp & {
    readonly disallowedTypes?: undefined;
} & ReactMarkdown.EscapeHtmlProp & {
    readonly allowDangerousHtml?: undefined;
    readonly skipHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.ChildrenProp & {
    readonly source?: undefined;
} & ReactMarkdown.AllowedTypesProp & {
    readonly disallowedTypes?: undefined;
} & ReactMarkdown.SkipHtmlProp & {
    readonly allowDangerousHtml?: undefined;
} & {
    readonly escapeHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.ChildrenProp & {
    readonly source?: undefined;
} & ReactMarkdown.AllowedTypesProp & {
    readonly disallowedTypes?: undefined;
} & ReactMarkdown.AllowDangerousHtmlProp & {
    readonly skipHtml?: undefined;
} & {
    readonly escapeHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.ChildrenProp & {
    readonly source?: undefined;
} & ReactMarkdown.DisallowedTypesProp & {
    readonly allowedTypes?: undefined;
} & ReactMarkdown.EscapeHtmlProp & {
    readonly skipHtml?: undefined;
    readonly allowDangerousHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.ChildrenProp & {
    readonly source?: undefined;
} & ReactMarkdown.DisallowedTypesProp & {
    readonly allowedTypes?: undefined;
} & ReactMarkdown.EscapeHtmlProp & {
    readonly allowDangerousHtml?: undefined;
    readonly skipHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.ChildrenProp & {
    readonly source?: undefined;
} & ReactMarkdown.DisallowedTypesProp & {
    readonly allowedTypes?: undefined;
} & ReactMarkdown.SkipHtmlProp & {
    readonly allowDangerousHtml?: undefined;
} & {
    readonly escapeHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.ChildrenProp & {
    readonly source?: undefined;
} & ReactMarkdown.DisallowedTypesProp & {
    readonly allowedTypes?: undefined;
} & ReactMarkdown.AllowDangerousHtmlProp & {
    readonly skipHtml?: undefined;
} & {
    readonly escapeHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.SourceProp & {
    readonly children?: undefined;
} & ReactMarkdown.AllowedTypesProp & {
    readonly disallowedTypes?: undefined;
} & ReactMarkdown.EscapeHtmlProp & {
    readonly skipHtml?: undefined;
    readonly allowDangerousHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.SourceProp & {
    readonly children?: undefined;
} & ReactMarkdown.AllowedTypesProp & {
    readonly disallowedTypes?: undefined;
} & ReactMarkdown.EscapeHtmlProp & {
    readonly allowDangerousHtml?: undefined;
    readonly skipHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.SourceProp & {
    readonly children?: undefined;
} & ReactMarkdown.AllowedTypesProp & {
    readonly disallowedTypes?: undefined;
} & ReactMarkdown.SkipHtmlProp & {
    readonly allowDangerousHtml?: undefined;
} & {
    readonly escapeHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.SourceProp & {
    readonly children?: undefined;
} & ReactMarkdown.AllowedTypesProp & {
    readonly disallowedTypes?: undefined;
} & ReactMarkdown.AllowDangerousHtmlProp & {
    readonly skipHtml?: undefined;
} & {
    readonly escapeHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.SourceProp & {
    readonly children?: undefined;
} & ReactMarkdown.DisallowedTypesProp & {
    readonly allowedTypes?: undefined;
} & ReactMarkdown.EscapeHtmlProp & {
    readonly skipHtml?: undefined;
    readonly allowDangerousHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.SourceProp & {
    readonly children?: undefined;
} & ReactMarkdown.DisallowedTypesProp & {
    readonly allowedTypes?: undefined;
} & ReactMarkdown.EscapeHtmlProp & {
    readonly allowDangerousHtml?: undefined;
    readonly skipHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.SourceProp & {
    readonly children?: undefined;
} & ReactMarkdown.DisallowedTypesProp & {
    readonly allowedTypes?: undefined;
} & ReactMarkdown.SkipHtmlProp & {
    readonly allowDangerousHtml?: undefined;
} & {
    readonly escapeHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>) | ({
    className?: string | undefined;
    source?: string | undefined;
    style?: React.CSSProperties | undefined;
    onScroll?: ((e: React.UIEvent<HTMLDivElement, UIEvent>) => void) | undefined;
    onMouseOver?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
} & ReactMarkdown.ReactMarkdownPropsBase & ReactMarkdown.SourceProp & {
    readonly children?: undefined;
} & ReactMarkdown.DisallowedTypesProp & {
    readonly allowedTypes?: undefined;
} & ReactMarkdown.AllowDangerousHtmlProp & {
    readonly skipHtml?: undefined;
} & {
    readonly escapeHtml?: undefined;
} & React.RefAttributes<MarkdownPreviewRef>)>;
export default _default;
