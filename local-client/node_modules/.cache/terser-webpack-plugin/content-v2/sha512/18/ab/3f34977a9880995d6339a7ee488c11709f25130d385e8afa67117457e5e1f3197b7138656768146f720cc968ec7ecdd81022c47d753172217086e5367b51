{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[308],{476:function(e,n){!function(e){e.languages.php=e.languages.extend(\"clike\",{keyword:/\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,boolean:{pattern:/\\b(?:false|true)\\b/i,alias:\"constant\"},constant:[/\\b[A-Z_][A-Z0-9_]*\\b/,/\\b(?:null)\\b/i],comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0}}),e.languages.insertBefore(\"php\",\"string\",{\"shell-comment\":{pattern:/(^|[^\\\\])#.*/,lookbehind:!0,alias:\"comment\"}}),e.languages.insertBefore(\"php\",\"comment\",{delimiter:{pattern:/\\?>$|^<\\?(?:php(?=\\s)|=)?/i,alias:\"important\"}}),e.languages.insertBefore(\"php\",\"keyword\",{variable:/\\$+(?:\\w+\\b|(?={))/i,package:{pattern:/(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,lookbehind:!0,inside:{punctuation:/\\\\/}}}),e.languages.insertBefore(\"php\",\"operator\",{property:{pattern:/(->)[\\w]+/,lookbehind:!0}});var n={pattern:/{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,lookbehind:!0,inside:e.languages.php};e.languages.insertBefore(\"php\",\"string\",{\"nowdoc-string\":{pattern:/<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,greedy:!0,alias:\"string\",inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<'?|[';]$/}}}},\"heredoc-string\":{pattern:/<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,greedy:!0,alias:\"string\",inside:{delimiter:{pattern:/^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<\"?|[\";]$/}},interpolation:n}},\"single-quoted-string\":{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,greedy:!0,alias:\"string\"},\"double-quoted-string\":{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:!0,alias:\"string\",inside:{interpolation:n}}}),delete e.languages.php.string,e.hooks.add(\"before-tokenize\",(function(n){if(/<\\?/.test(n.code)){e.languages[\"markup-templating\"].buildPlaceholders(n,\"php\",/<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi)}})),e.hooks.add(\"after-tokenize\",(function(n){e.languages[\"markup-templating\"].tokenizePlaceholders(n,\"php\")}))}(Prism)}}]);","name":"static/js/308.e1069382.chunk.js","map":{"version":3,"sources":["static/js/308.e1069382.chunk.js"],"names":["this","push","476","module","exports","Prism","languages","php","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","shell-comment","delimiter","variable","package","inside","punctuation","property","string_interpolation","nowdoc-string","greedy","heredoc-string","interpolation","single-quoted-string","double-quoted-string","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,IAcxB,SAAWC,GACTA,EAAMC,UAAUC,IAAMF,EAAMC,UAAUE,OAAO,QAAS,CACpDC,QAAW,6eACXC,QAAW,CACTC,QAAS,sBACTC,MAAO,YAETC,SAAY,CAAC,uBAAwB,iBACrCC,QAAW,CACTH,QAAS,uCACTI,YAAY,KAGhBV,EAAMC,UAAUU,aAAa,MAAO,SAAU,CAC5CC,gBAAiB,CACfN,QAAS,eACTI,YAAY,EACZH,MAAO,aAGXP,EAAMC,UAAUU,aAAa,MAAO,UAAW,CAC7CE,UAAa,CACXP,QAAS,6BACTC,MAAO,eAGXP,EAAMC,UAAUU,aAAa,MAAO,UAAW,CAC7CG,SAAY,sBACZC,QAAW,CACTT,QAAS,kCACTI,YAAY,EACZM,OAAQ,CACNC,YAAa,SAKnBjB,EAAMC,UAAUU,aAAa,MAAO,WAAY,CAC9CO,SAAY,CACVZ,QAAS,YACTI,YAAY,KAGhB,IAAIS,EAAuB,CACzBb,QAAS,uFACTI,YAAY,EACZM,OAAQhB,EAAMC,UAAUC,KAE1BF,EAAMC,UAAUU,aAAa,MAAO,SAAU,CAC5CS,gBAAiB,CACfd,QAAS,sCACTe,QAAQ,EACRd,MAAO,SACPS,OAAQ,CACNH,UAAa,CACXP,QAAS,2BACTC,MAAO,SACPS,OAAQ,CACNC,YAAe,mBAKvBK,iBAAkB,CAChBhB,QAAS,8EACTe,QAAQ,EACRd,MAAO,SACPS,OAAQ,CACNH,UAAa,CACXP,QAAS,yCACTC,MAAO,SACPS,OAAQ,CACNC,YAAe,iBAGnBM,cAAiBJ,IAIrBK,uBAAwB,CACtBlB,QAAS,yBACTe,QAAQ,EACRd,MAAO,UAETkB,uBAAwB,CACtBnB,QAAS,yBACTe,QAAQ,EACRd,MAAO,SACPS,OAAQ,CACNO,cAAiBJ,aAMhBnB,EAAMC,UAAUC,IAAY,OACnCF,EAAM0B,MAAMC,IAAI,mBAAmB,SAAUC,GAC3C,GAAK,MAAMC,KAAKD,EAAIE,MAApB,CAKA9B,EAAMC,UAAU,qBAAqB8B,kBAAkBH,EAAK,MAD3C,sJAGnB5B,EAAM0B,MAAMC,IAAI,kBAAkB,SAAUC,GAC1C5B,EAAMC,UAAU,qBAAqB+B,qBAAqBJ,EAAK,UAzGnE,CA2GG5B"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[308],{\n\n/***/ 476:\n/***/ (function(module, exports) {\n\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    'boolean': {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'constant'\n    },\n    'constant': [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'comment', {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,\n    lookbehind: true,\n    inside: Prism.languages.php\n  };\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': string_interpolation // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': string_interpolation // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-php.js"],"names":["Prism","languages","php","extend","pattern","alias","lookbehind","insertBefore","inside","punctuation","string_interpolation","greedy","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"mappings":"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","file":"x","sourcesContent":["/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n\tPrism.languages.php = Prism.languages.extend('clike', {\n\t\t'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n\t\t'boolean': {\n\t\t\tpattern: /\\b(?:false|true)\\b/i,\n\t\t\talias: 'constant'\n\t\t},\n\t\t'constant': [\n\t\t\t/\\b[A-Z_][A-Z0-9_]*\\b/,\n\t\t\t/\\b(?:null)\\b/i,\n\t\t],\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'shell-comment': {\n\t\t\tpattern: /(^|[^\\\\])#.*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'comment'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'comment', {\n\t\t'delimiter': {\n\t\t\tpattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n\t\t\talias: 'important'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'keyword', {\n\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,\n\t\t'package': {\n\t\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\\\/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Must be defined after the function pattern\n\tPrism.languages.insertBefore('php', 'operator', {\n\t\t'property': {\n\t\t\tpattern: /(->)[\\w]+/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tvar string_interpolation = {\n\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,\n\t\tlookbehind: true,\n\t\tinside: Prism.languages.php\n\t};\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'nowdoc-string': {\n\t\t\tpattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'heredoc-string': {\n\t\t\tpattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'interpolation': string_interpolation // See below\n\t\t\t}\n\t\t},\n\t\t'single-quoted-string': {\n\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'double-quoted-string': {\n\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'interpolation': string_interpolation // See below\n\t\t\t}\n\t\t}\n\t});\n\t// The different types of PHP strings \"replace\" the C-like standard string\n\tdelete Prism.languages.php['string'];\n\n\tPrism.hooks.add('before-tokenize', function(env) {\n\t\tif (!/<\\?/.test(env.code)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function(env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n\t});\n\n}(Prism));\n"]}}