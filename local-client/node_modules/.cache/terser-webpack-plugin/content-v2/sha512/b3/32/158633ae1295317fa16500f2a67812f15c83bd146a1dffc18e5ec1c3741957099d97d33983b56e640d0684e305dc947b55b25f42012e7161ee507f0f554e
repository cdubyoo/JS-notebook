{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[402],{570:function(e,n){!function(e){var n={pattern:/(\\b\\d+)(?:%|[a-z]+)/,lookbehind:!0},r={pattern:/(^|[^\\w.-])-?\\d*\\.?\\d+/,lookbehind:!0},i={comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0},url:{pattern:/url\\(([\"']?).*?\\1\\)/i,greedy:!0},string:{pattern:/(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,greedy:!0},interpolation:null,func:null,important:/\\B!(?:important|optional)\\b/i,keyword:{pattern:/(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,lookbehind:!0},hexcode:/#[\\da-f]{3,6}/i,color:[/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,{pattern:/\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,inside:{unit:n,number:r,function:/[\\w-]+(?=\\()/,punctuation:/[(),]/}}],entity:/\\\\[\\da-f]{1,8}/i,unit:n,boolean:/\\b(?:true|false)\\b/,operator:[/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],number:r,punctuation:/[{}()\\[\\];:,]/};i.interpolation={pattern:/\\{[^\\r\\n}:]+\\}/,alias:\"variable\",inside:{delimiter:{pattern:/^{|}$/,alias:\"punctuation\"},rest:i}},i.func={pattern:/[\\w-]+\\([^)]*\\).*/,inside:{function:/^[^(]+/,rest:i}},e.languages.stylus={\"atrule-declaration\":{pattern:/(^\\s*)@.+/m,lookbehind:!0,inside:{atrule:/^@[\\w-]+/,rest:i}},\"variable-declaration\":{pattern:/(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,lookbehind:!0,inside:{variable:/^\\S+/,rest:i}},statement:{pattern:/(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,lookbehind:!0,inside:{keyword:/^\\S+/,rest:i}},\"property-declaration\":{pattern:/((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,lookbehind:!0,inside:{property:{pattern:/^[^\\s:]+/,inside:{interpolation:i.interpolation}},rest:i}},selector:{pattern:/(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,lookbehind:!0,inside:{interpolation:i.interpolation,comment:i.comment,punctuation:/[{},]/}},func:i.func,string:i.string,comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0,greedy:!0},interpolation:i.interpolation,punctuation:/[{}()\\[\\];:.]/}}(Prism)}}]);","name":"static/js/402.4577ebfb.chunk.js","map":{"version":3,"sources":["static/js/402.4577ebfb.chunk.js"],"names":["this","push","570","module","exports","Prism","unit","pattern","lookbehind","number","inside","comment","url","greedy","string","interpolation","func","important","keyword","hexcode","color","function","punctuation","entity","boolean","operator","alias","delimiter","rest","languages","stylus","atrule-declaration","atrule","variable-declaration","variable","statement","property-declaration","property","selector"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,IAExB,SAAWC,GACT,IAAIC,EAAO,CACTC,QAAS,sBACTC,YAAY,GAGVC,EAAS,CACXF,QAAS,yBACTC,YAAY,GAEVE,EAAS,CACXC,QAAW,CACTJ,QAAS,uCACTC,YAAY,GAEdI,IAAO,CACLL,QAAS,uBACTM,QAAQ,GAEVC,OAAU,CACRP,QAAS,gDACTM,QAAQ,GAEVE,cAAiB,KAEjBC,KAAQ,KAERC,UAAa,+BACbC,QAAW,CACTX,QAAS,4DACTC,YAAY,GAEdW,QAAW,iBACXC,MAAS,CAAC,q5CAAs5C,CAC95Cb,QAAS,4JACTG,OAAQ,CACNJ,KAAQA,EACRG,OAAUA,EACVY,SAAY,eACZC,YAAe,WAGnBC,OAAU,kBACVjB,KAAQA,EACRkB,QAAW,qBACXC,SAAY,CAEZ,wGACAhB,OAAUA,EACVa,YAAe,iBAEjBZ,EAAsB,cAAI,CACxBH,QAAS,iBACTmB,MAAO,WACPhB,OAAQ,CACNiB,UAAa,CACXpB,QAAS,QACTmB,MAAO,eAETE,KAAMlB,IAGVA,EAAa,KAAI,CACfH,QAAS,oBACTG,OAAQ,CACNW,SAAY,SACZO,KAAMlB,IAGVL,EAAMwB,UAAUC,OAAS,CACvBC,qBAAsB,CACpBxB,QAAS,aACTC,YAAY,EACZE,OAAQ,CACNsB,OAAU,WACVJ,KAAMlB,IAGVuB,uBAAwB,CACtB1B,QAAS,sDACTC,YAAY,EACZE,OAAQ,CACNwB,SAAY,OACZN,KAAMlB,IAGVyB,UAAa,CACX5B,QAAS,kDACTC,YAAY,EACZE,OAAQ,CACNQ,QAAW,OACXU,KAAMlB,IAKV0B,uBAAwB,CACtB7B,QAAS,4HACTC,YAAY,EACZE,OAAQ,CACN2B,SAAY,CACV9B,QAAS,WACTG,OAAQ,CACNK,cAAiBL,EAAOK,gBAG5Ba,KAAMlB,IAMV4B,SAAY,CACV/B,QAAS,uNACTC,YAAY,EACZE,OAAQ,CACNK,cAAiBL,EAAOK,cACxBJ,QAAWD,EAAOC,QAClBW,YAAe,UAGnBN,KAAQN,EAAOM,KACfF,OAAUJ,EAAOI,OACjBH,QAAW,CACTJ,QAAS,uCACTC,YAAY,EACZK,QAAQ,GAEVE,cAAiBL,EAAOK,cACxBO,YAAe,iBAjInB,CAmIGjB"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[402],{\n\n/***/ 570:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?\\d*\\.?\\d+/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /url\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-stylus.js"],"names":["Prism","unit","pattern","lookbehind","number","inside","greedy","alias","rest","languages","stylus","interpolation","comment","func","string"],"mappings":"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","file":"x","sourcesContent":["(function (Prism) {\n\tvar unit = {\n\t\tpattern: /(\\b\\d+)(?:%|[a-z]+)/,\n\t\tlookbehind: true\n\t};\n\t// 123 -123 .123 -.123 12.3 -12.3\n\tvar number = {\n\t\tpattern: /(^|[^\\w.-])-?\\d*\\.?\\d+/,\n\t\tlookbehind: true\n\t};\n\n\tvar inside = {\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'url': {\n\t\t\tpattern: /url\\(([\"']?).*?\\1\\)/i,\n\t\t\tgreedy: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'interpolation': null, // See below\n\t\t'func': null, // See below\n\t\t'important': /\\B!(?:important|optional)\\b/i,\n\t\t'keyword': {\n\t\t\tpattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'hexcode': /#[\\da-f]{3,6}/i,\n\t\t'color': [\n\t\t\t/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,\n\t\t\t{\n\t\t\t\tpattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'unit': unit,\n\t\t\t\t\t'number': number,\n\t\t\t\t\t'function': /[\\w-]+(?=\\()/,\n\t\t\t\t\t'punctuation': /[(),]/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'entity': /\\\\[\\da-f]{1,8}/i,\n\t\t'unit': unit,\n\t\t'boolean': /\\b(?:true|false)\\b/,\n\t\t'operator': [\n\t\t\t// We want non-word chars around \"-\" because it is\n\t\t\t// accepted in property names.\n\t\t\t/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\n\t\t],\n\t\t'number': number,\n\t\t'punctuation': /[{}()\\[\\];:,]/\n\t};\n\n\tinside['interpolation'] = {\n\t\tpattern: /\\{[^\\r\\n}:]+\\}/,\n\t\talias: 'variable',\n\t\tinside: {\n\t\t\t'delimiter': {\n\t\t\t\tpattern: /^{|}$/,\n\t\t\t\talias: 'punctuation'\n\t\t\t},\n\t\t\trest: inside\n\t\t}\n\t};\n\tinside['func'] = {\n\t\tpattern: /[\\w-]+\\([^)]*\\).*/,\n\t\tinside: {\n\t\t\t'function': /^[^(]+/,\n\t\t\trest: inside\n\t\t}\n\t};\n\n\tPrism.languages.stylus = {\n\t\t'atrule-declaration': {\n\t\t\tpattern: /(^\\s*)@.+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'atrule': /^@[\\w-]+/,\n\t\t\t\trest: inside\n\t\t\t}\n\t\t},\n\t\t'variable-declaration': {\n\t\t\tpattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'variable': /^\\S+/,\n\t\t\t\trest: inside\n\t\t\t}\n\t\t},\n\n\t\t'statement': {\n\t\t\tpattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'keyword': /^\\S+/,\n\t\t\t\trest: inside\n\t\t\t}\n\t\t},\n\n\t\t// A property/value pair cannot end with a comma or a brace\n\t\t// It cannot have indented content unless it ended with a semicolon\n\t\t'property-declaration': {\n\t\t\tpattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'property': {\n\t\t\t\t\tpattern: /^[^\\s:]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'interpolation': inside.interpolation\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trest: inside\n\t\t\t}\n\t\t},\n\n\n\n\t\t// A selector can contain parentheses only as part of a pseudo-element\n\t\t// It can span multiple lines.\n\t\t// It must end with a comma or an accolade or have indented content.\n\t\t'selector': {\n\t\t\tpattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': inside.interpolation,\n\t\t\t\t'comment': inside.comment,\n\t\t\t\t'punctuation': /[{},]/\n\t\t\t}\n\t\t},\n\n\t\t'func': inside.func,\n\t\t'string': inside.string,\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t'interpolation': inside.interpolation,\n\t\t'punctuation': /[{}()\\[\\];:.]/\n\t};\n}(Prism));\n"]}}