{"ast":null,"code":"'use strict';\n\nvar _assertThisInitialized = require(\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _toConsumableArray = require(\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _get = require(\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _createClass = require(\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  _classCallCheck(this, TokenType);\n\n  this.label = void 0;\n  this.keyword = void 0;\n  this.beforeExpr = void 0;\n  this.startsExpr = void 0;\n  this.rightAssociative = void 0;\n  this.isLoop = void 0;\n  this.isAssign = void 0;\n  this.prefix = void 0;\n  this.postfix = void 0;\n  this.binop = void 0;\n  this.updateContext = void 0;\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop != null ? conf.binop : null;\n  this.updateContext = null;\n};\n\nvar keywords = new Map();\n\nfunction createKeyword(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  var token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr: beforeExpr,\n    binop: binop\n  });\n}\n\nvar types = {\n  num: new TokenType(\"num\", {\n    startsExpr: startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr: startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr: startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr: startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr: startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr: startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr: beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr: beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr: beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr: beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr: beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr: beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr: beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr: startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr: startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix: prefix,\n    postfix: postfix,\n    startsExpr: startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr: beforeExpr,\n    binop: 9,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr: beforeExpr,\n    binop: 10,\n    startsExpr: startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr: beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr: beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr: beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop: isLoop,\n    beforeExpr: beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr: beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop: isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr: startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr: beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop: isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr: startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr: startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr: startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr: beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr: startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr: startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr: startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr: startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  })\n};\nvar lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar Position = function Position(line, col) {\n  _classCallCheck(this, Position);\n\n  this.line = void 0;\n  this.column = void 0;\n  this.line = line;\n  this.column = col;\n};\n\nvar SourceLocation = function SourceLocation(start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = void 0;\n  this.end = void 0;\n  this.filename = void 0;\n  this.identifierName = void 0;\n  this.start = start;\n  this.end = end;\n};\n\nfunction getLineInfo(input, offset) {\n  var line = 1;\n  var lineStart = 0;\n  var match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nvar BaseParser = /*#__PURE__*/function () {\n  function BaseParser() {\n    _classCallCheck(this, BaseParser);\n\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  _createClass(BaseParser, [{\n    key: \"hasPlugin\",\n    value: function hasPlugin(name) {\n      return this.plugins.has(name);\n    }\n  }, {\n    key: \"getPluginOption\",\n    value: function getPluginOption(plugin, name) {\n      if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n    }\n  }]);\n\n  return BaseParser;\n}();\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nvar CommentsParser = /*#__PURE__*/function (_BaseParser) {\n  _inherits(CommentsParser, _BaseParser);\n\n  var _super = _createSuper(CommentsParser);\n\n  function CommentsParser() {\n    _classCallCheck(this, CommentsParser);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CommentsParser, [{\n    key: \"addComment\",\n    value: function addComment(comment) {\n      if (this.filename) comment.loc.filename = this.filename;\n      this.state.trailingComments.push(comment);\n      this.state.leadingComments.push(comment);\n    }\n  }, {\n    key: \"adjustCommentsAfterTrailingComma\",\n    value: function adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n      if (this.state.leadingComments.length === 0) {\n        return;\n      }\n\n      var lastElement = null;\n      var i = elements.length;\n\n      while (lastElement === null && i > 0) {\n        lastElement = elements[--i];\n      }\n\n      if (lastElement === null) {\n        return;\n      }\n\n      for (var j = 0; j < this.state.leadingComments.length; j++) {\n        if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n          this.state.leadingComments.splice(j, 1);\n          j--;\n        }\n      }\n\n      var newTrailingComments = [];\n\n      for (var _i7 = 0; _i7 < this.state.leadingComments.length; _i7++) {\n        var leadingComment = this.state.leadingComments[_i7];\n\n        if (leadingComment.end < node.end) {\n          newTrailingComments.push(leadingComment);\n\n          if (!takeAllComments) {\n            this.state.leadingComments.splice(_i7, 1);\n            _i7--;\n          }\n        } else {\n          if (node.trailingComments === undefined) {\n            node.trailingComments = [];\n          }\n\n          node.trailingComments.push(leadingComment);\n        }\n      }\n\n      if (takeAllComments) this.state.leadingComments = [];\n\n      if (newTrailingComments.length > 0) {\n        lastElement.trailingComments = newTrailingComments;\n      } else if (lastElement.trailingComments !== undefined) {\n        lastElement.trailingComments = [];\n      }\n    }\n  }, {\n    key: \"processComment\",\n    value: function processComment(node) {\n      if (node.type === \"Program\" && node.body.length > 0) return;\n      var stack = this.state.commentStack;\n      var firstChild, lastChild, trailingComments, i, j;\n\n      if (this.state.trailingComments.length > 0) {\n        if (this.state.trailingComments[0].start >= node.end) {\n          trailingComments = this.state.trailingComments;\n          this.state.trailingComments = [];\n        } else {\n          this.state.trailingComments.length = 0;\n        }\n      } else if (stack.length > 0) {\n        var lastInStack = last(stack);\n\n        if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n          trailingComments = lastInStack.trailingComments;\n          delete lastInStack.trailingComments;\n        }\n      }\n\n      if (stack.length > 0 && last(stack).start >= node.start) {\n        firstChild = stack.pop();\n      }\n\n      while (stack.length > 0 && last(stack).start >= node.start) {\n        lastChild = stack.pop();\n      }\n\n      if (!lastChild && firstChild) lastChild = firstChild;\n\n      if (firstChild) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n            this.adjustCommentsAfterTrailingComma(node, node.properties);\n            break;\n\n          case \"ObjectPattern\":\n            this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n            break;\n\n          case \"CallExpression\":\n            this.adjustCommentsAfterTrailingComma(node, node.arguments);\n            break;\n\n          case \"ArrayExpression\":\n            this.adjustCommentsAfterTrailingComma(node, node.elements);\n            break;\n\n          case \"ArrayPattern\":\n            this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n            break;\n        }\n      } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n        this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n      }\n\n      if (lastChild) {\n        if (lastChild.leadingComments) {\n          if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n            node.leadingComments = lastChild.leadingComments;\n            delete lastChild.leadingComments;\n          } else {\n            for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n              if (lastChild.leadingComments[i].end <= node.start) {\n                node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n                break;\n              }\n            }\n          }\n        }\n      } else if (this.state.leadingComments.length > 0) {\n        if (last(this.state.leadingComments).end <= node.start) {\n          if (this.state.commentPreviousNode) {\n            for (j = 0; j < this.state.leadingComments.length; j++) {\n              if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n                this.state.leadingComments.splice(j, 1);\n                j--;\n              }\n            }\n          }\n\n          if (this.state.leadingComments.length > 0) {\n            node.leadingComments = this.state.leadingComments;\n            this.state.leadingComments = [];\n          }\n        } else {\n          for (i = 0; i < this.state.leadingComments.length; i++) {\n            if (this.state.leadingComments[i].end > node.start) {\n              break;\n            }\n          }\n\n          var leadingComments = this.state.leadingComments.slice(0, i);\n\n          if (leadingComments.length) {\n            node.leadingComments = leadingComments;\n          }\n\n          trailingComments = this.state.leadingComments.slice(i);\n\n          if (trailingComments.length === 0) {\n            trailingComments = null;\n          }\n        }\n      }\n\n      this.state.commentPreviousNode = node;\n\n      if (trailingComments) {\n        if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n          node.innerComments = trailingComments;\n        } else {\n          var firstTrailingCommentIndex = trailingComments.findIndex(function (comment) {\n            return comment.end >= node.end;\n          });\n\n          if (firstTrailingCommentIndex > 0) {\n            node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n            node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n          } else {\n            node.trailingComments = trailingComments;\n          }\n        }\n      }\n\n      stack.push(node);\n    }\n  }]);\n\n  return CommentsParser;\n}(BaseParser);\n\nvar ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  DuplicateStaticBlock: \"Duplicate static block in the same class\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: \"import.meta may appear only with 'sourceType: \\\"module\\\"'\",\n  ImportOutsideModule: \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nvar ParserError = /*#__PURE__*/function (_CommentsParser) {\n  _inherits(ParserError, _CommentsParser);\n\n  var _super2 = _createSuper(ParserError);\n\n  function ParserError() {\n    _classCallCheck(this, ParserError);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ParserError, [{\n    key: \"getLocationForPosition\",\n    value: function getLocationForPosition(pos) {\n      var loc;\n      if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n      return loc;\n    }\n  }, {\n    key: \"raise\",\n    value: function raise(pos, errorTemplate) {\n      for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        params[_key - 2] = arguments[_key];\n      }\n\n      return this.raiseWithData.apply(this, [pos, undefined, errorTemplate].concat(params));\n    }\n  }, {\n    key: \"raiseWithData\",\n    value: function raiseWithData(pos, data, errorTemplate) {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n        params[_key2 - 3] = arguments[_key2];\n      }\n\n      var loc = this.getLocationForPosition(pos);\n      var message = errorTemplate.replace(/%(\\d+)/g, function (_, i) {\n        return params[i];\n      }) + \" (\".concat(loc.line, \":\").concat(loc.column, \")\");\n      return this._raise(Object.assign({\n        loc: loc,\n        pos: pos\n      }, data), message);\n    }\n  }, {\n    key: \"_raise\",\n    value: function _raise(errorContext, message) {\n      var err = new SyntaxError(message);\n      Object.assign(err, errorContext);\n\n      if (this.options.errorRecovery) {\n        if (!this.isLookahead) this.state.errors.push(err);\n        return err;\n      } else {\n        throw err;\n      }\n    }\n  }]);\n\n  return ParserError;\n}(CommentsParser);\n\nvar estree = function estree(superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    _inherits(_class, _superClass);\n\n    var _super3 = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super3.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"estreeParseRegExpLiteral\",\n      value: function estreeParseRegExpLiteral(_ref) {\n        var pattern = _ref.pattern,\n            flags = _ref.flags;\n        var regex = null;\n\n        try {\n          regex = new RegExp(pattern, flags);\n        } catch (e) {}\n\n        var node = this.estreeParseLiteral(regex);\n        node.regex = {\n          pattern: pattern,\n          flags: flags\n        };\n        return node;\n      }\n    }, {\n      key: \"estreeParseBigIntLiteral\",\n      value: function estreeParseBigIntLiteral(value) {\n        var bigInt;\n\n        try {\n          bigInt = BigInt(value);\n        } catch (_unused) {\n          bigInt = null;\n        }\n\n        var node = this.estreeParseLiteral(bigInt);\n        node.bigint = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"estreeParseDecimalLiteral\",\n      value: function estreeParseDecimalLiteral(value) {\n        var decimal = null;\n        var node = this.estreeParseLiteral(decimal);\n        node.decimal = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"estreeParseLiteral\",\n      value: function estreeParseLiteral(value) {\n        return this.parseLiteral(value, \"Literal\");\n      }\n    }, {\n      key: \"directiveToStmt\",\n      value: function directiveToStmt(directive) {\n        var directiveLiteral = directive.value;\n        var stmt = this.startNodeAt(directive.start, directive.loc.start);\n        var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n        expression.value = directiveLiteral.extra.expressionValue;\n        expression.raw = directiveLiteral.extra.raw;\n        stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n        stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n        return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n      }\n    }, {\n      key: \"initFunction\",\n      value: function initFunction(node, isAsync) {\n        _get(_getPrototypeOf(_class.prototype), \"initFunction\", this).call(this, node, isAsync);\n\n        node.expression = false;\n      }\n    }, {\n      key: \"checkDeclaration\",\n      value: function checkDeclaration(node) {\n        if (node != null && this.isObjectProperty(node)) {\n          this.checkDeclaration(node.value);\n        } else {\n          _get(_getPrototypeOf(_class.prototype), \"checkDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"getObjectOrClassMethodParams\",\n      value: function getObjectOrClassMethodParams(method) {\n        return method.value.params;\n      }\n    }, {\n      key: \"isValidDirective\",\n      value: function isValidDirective(stmt) {\n        var _stmt$expression$extr;\n\n        return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n      }\n    }, {\n      key: \"stmtToDirective\",\n      value: function stmtToDirective(stmt) {\n        var directive = _get(_getPrototypeOf(_class.prototype), \"stmtToDirective\", this).call(this, stmt);\n\n        var value = stmt.expression.value;\n        this.addExtra(directive.value, \"expressionValue\", value);\n        return directive;\n      }\n    }, {\n      key: \"parseBlockBody\",\n      value: function parseBlockBody(node) {\n        var _get2,\n            _this = this;\n\n        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          args[_key3 - 1] = arguments[_key3];\n        }\n\n        (_get2 = _get(_getPrototypeOf(_class.prototype), \"parseBlockBody\", this)).call.apply(_get2, [this, node].concat(args));\n\n        var directiveStatements = node.directives.map(function (d) {\n          return _this.directiveToStmt(d);\n        });\n        node.body = directiveStatements.concat(node.body);\n        delete node.directives;\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n        if (method.typeParameters) {\n          method.value.typeParameters = method.typeParameters;\n          delete method.typeParameters;\n        }\n\n        classBody.body.push(method);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        switch (this.state.type) {\n          case types.num:\n          case types.string:\n            return this.estreeParseLiteral(this.state.value);\n\n          case types.regexp:\n            return this.estreeParseRegExpLiteral(this.state.value);\n\n          case types.bigint:\n            return this.estreeParseBigIntLiteral(this.state.value);\n\n          case types.decimal:\n            return this.estreeParseDecimalLiteral(this.state.value);\n\n          case types._null:\n            return this.estreeParseLiteral(null);\n\n          case types._true:\n            return this.estreeParseLiteral(true);\n\n          case types._false:\n            return this.estreeParseLiteral(false);\n\n          default:\n            return _get(_getPrototypeOf(_class.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"parseLiteral\",\n      value: function parseLiteral(value, type, startPos, startLoc) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseLiteral\", this).call(this, value, type, startPos, startLoc);\n\n        node.raw = node.extra.raw;\n        delete node.extra;\n        return node;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpression) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        _get(_getPrototypeOf(_class.prototype), \"parseFunctionBody\", this).call(this, node, allowExpression, isMethod);\n\n        node.expression = node.body.type !== \"BlockStatement\";\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n        var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n        var funcNode = this.startNode();\n        funcNode.kind = node.kind;\n        funcNode = _get(_getPrototypeOf(_class.prototype), \"parseMethod\", this).call(this, funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n        funcNode.type = \"FunctionExpression\";\n        delete funcNode.kind;\n        node.value = funcNode;\n        type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseObjectMethod\",\n      value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseObjectMethod\", this).call(this, prop, isGenerator, isAsync, isPattern, isAccessor);\n\n        if (node) {\n          node.type = \"Property\";\n          if (node.kind === \"method\") node.kind = \"init\";\n          node.shorthand = false;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseObjectProperty\",\n      value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseObjectProperty\", this).call(this, prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n        if (node) {\n          node.kind = \"init\";\n          node.type = \"Property\";\n        }\n\n        return node;\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (node != null && this.isObjectProperty(node)) {\n          this.toAssignable(node.value, isLHS);\n          return node;\n        }\n\n        return _get(_getPrototypeOf(_class.prototype), \"toAssignable\", this).call(this, node, isLHS);\n      }\n    }, {\n      key: \"toAssignableObjectExpressionProp\",\n      value: function toAssignableObjectExpressionProp(prop) {\n        if (prop.kind === \"get\" || prop.kind === \"set\") {\n          this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n        } else if (prop.method) {\n          this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n        } else {\n          var _get3;\n\n          for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n            args[_key4 - 1] = arguments[_key4];\n          }\n\n          (_get3 = _get(_getPrototypeOf(_class.prototype), \"toAssignableObjectExpressionProp\", this)).call.apply(_get3, [this, prop].concat(args));\n        }\n      }\n    }, {\n      key: \"finishCallExpression\",\n      value: function finishCallExpression(node, optional) {\n        _get(_getPrototypeOf(_class.prototype), \"finishCallExpression\", this).call(this, node, optional);\n\n        if (node.callee.type === \"Import\") {\n          node.type = \"ImportExpression\";\n          node.source = node.arguments[0];\n          delete node.arguments;\n          delete node.callee;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"toReferencedArguments\",\n      value: function toReferencedArguments(node) {\n        if (node.type === \"ImportExpression\") {\n          return;\n        }\n\n        _get(_getPrototypeOf(_class.prototype), \"toReferencedArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        _get(_getPrototypeOf(_class.prototype), \"parseExport\", this).call(this, node);\n\n        switch (node.type) {\n          case \"ExportAllDeclaration\":\n            node.exported = null;\n            break;\n\n          case \"ExportNamedDeclaration\":\n            if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n              node.type = \"ExportAllDeclaration\";\n              node.exported = node.specifiers[0].exported;\n              delete node.specifiers;\n            }\n\n            break;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n\n        if (state.optionalChainMember) {\n          if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n            node.type = node.type.substring(8);\n          }\n\n          if (state.stop) {\n            var chain = this.startNodeAtNode(node);\n            chain.expression = node;\n            return this.finishNode(chain, \"ChainExpression\");\n          }\n        } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n          node.optional = false;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"hasPropertyAsPrivateName\",\n      value: function hasPropertyAsPrivateName(node) {\n        if (node.type === \"ChainExpression\") {\n          node = node.expression;\n        }\n\n        return _get(_getPrototypeOf(_class.prototype), \"hasPropertyAsPrivateName\", this).call(this, node);\n      }\n    }, {\n      key: \"isOptionalChain\",\n      value: function isOptionalChain(node) {\n        return node.type === \"ChainExpression\";\n      }\n    }, {\n      key: \"isObjectProperty\",\n      value: function isObjectProperty(node) {\n        return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n      }\n    }, {\n      key: \"isObjectMethod\",\n      value: function isObjectMethod(node) {\n        return node.method || node.kind === \"get\" || node.kind === \"set\";\n      }\n    }]);\n\n    return _class;\n  }(superClass);\n};\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  _classCallCheck(this, TokContext);\n\n  this.token = void 0;\n  this.isExpr = void 0;\n  this.preserveSpace = void 0;\n  this.override = void 0;\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nvar types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  var out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  var allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n\n  for (var i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nvar reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nvar keywords$1 = new Set(reservedWords.keyword);\nvar reservedWordsStrictSet = new Set(reservedWords.strict);\nvar reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nvar SCOPE_OTHER = 0,\n    SCOPE_PROGRAM = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_ARROW = 4,\n    SCOPE_SIMPLE_CATCH = 8,\n    SCOPE_SUPER = 16,\n    SCOPE_DIRECT_SUPER = 32,\n    SCOPE_CLASS = 64,\n    SCOPE_TS_MODULE = 128,\n    SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nvar BIND_KIND_VALUE = 1,\n    BIND_KIND_TYPE = 2,\n    BIND_SCOPE_VAR = 4,\n    BIND_SCOPE_LEXICAL = 8,\n    BIND_SCOPE_FUNCTION = 16,\n    BIND_FLAGS_NONE = 64,\n    BIND_FLAGS_CLASS = 128,\n    BIND_FLAGS_TS_ENUM = 256,\n    BIND_FLAGS_TS_CONST_ENUM = 512,\n    BIND_FLAGS_TS_EXPORT_ONLY = 1024;\nvar BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n    BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n    BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n    BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n    BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n    BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n    BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n    BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n    BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n    BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nvar CLASS_ELEMENT_FLAG_STATIC = 4,\n    CLASS_ELEMENT_KIND_GETTER = 2,\n    CLASS_ELEMENT_KIND_SETTER = 1,\n    CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nvar CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n    CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n    CLASS_ELEMENT_OTHER = 0;\nvar reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nvar FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nvar exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  var list1 = [];\n  var list2 = [];\n\n  for (var i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nvar FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = function flow(superClass) {\n  var _temp;\n\n  return _temp = /*#__PURE__*/function (_superClass2) {\n    _inherits(_temp, _superClass2);\n\n    var _super4 = _createSuper(_temp);\n\n    function _temp(options, input) {\n      var _this2;\n\n      _classCallCheck(this, _temp);\n\n      _this2 = _super4.call(this, options, input);\n      _this2.flowPragma = void 0;\n      _this2.flowPragma = undefined;\n      return _this2;\n    }\n\n    _createClass(_temp, [{\n      key: \"shouldParseTypes\",\n      value: function shouldParseTypes() {\n        return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n      }\n    }, {\n      key: \"shouldParseEnums\",\n      value: function shouldParseEnums() {\n        return !!this.getPluginOption(\"flow\", \"enums\");\n      }\n    }, {\n      key: \"finishToken\",\n      value: function finishToken(type, val) {\n        if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n          if (this.flowPragma === undefined) {\n            this.flowPragma = null;\n          }\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"finishToken\", this).call(this, type, val);\n      }\n    }, {\n      key: \"addComment\",\n      value: function addComment(comment) {\n        if (this.flowPragma === undefined) {\n          var matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n          if (!matches) ;else if (matches[1] === \"flow\") {\n            this.flowPragma = \"flow\";\n          } else if (matches[1] === \"noflow\") {\n            this.flowPragma = \"noflow\";\n          } else {\n            throw new Error(\"Unexpected flow pragma\");\n          }\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"addComment\", this).call(this, comment);\n      }\n    }, {\n      key: \"flowParseTypeInitialiser\",\n      value: function flowParseTypeInitialiser(tok) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(tok || types.colon);\n        var type = this.flowParseType();\n        this.state.inType = oldInType;\n        return type;\n      }\n    }, {\n      key: \"flowParsePredicate\",\n      value: function flowParsePredicate() {\n        var node = this.startNode();\n        var moduloLoc = this.state.startLoc;\n        var moduloPos = this.state.start;\n        this.expect(types.modulo);\n        var checksLoc = this.state.startLoc;\n        this.expectContextual(\"checks\");\n\n        if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n          this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n        }\n\n        if (this.eat(types.parenL)) {\n          node.value = this.parseExpression();\n          this.expect(types.parenR);\n          return this.finishNode(node, \"DeclaredPredicate\");\n        } else {\n          return this.finishNode(node, \"InferredPredicate\");\n        }\n      }\n    }, {\n      key: \"flowParseTypeAndPredicateInitialiser\",\n      value: function flowParseTypeAndPredicateInitialiser() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(types.colon);\n        var type = null;\n        var predicate = null;\n\n        if (this.match(types.modulo)) {\n          this.state.inType = oldInType;\n          predicate = this.flowParsePredicate();\n        } else {\n          type = this.flowParseType();\n          this.state.inType = oldInType;\n\n          if (this.match(types.modulo)) {\n            predicate = this.flowParsePredicate();\n          }\n        }\n\n        return [type, predicate];\n      }\n    }, {\n      key: \"flowParseDeclareClass\",\n      value: function flowParseDeclareClass(node) {\n        this.next();\n        this.flowParseInterfaceish(node, true);\n        return this.finishNode(node, \"DeclareClass\");\n      }\n    }, {\n      key: \"flowParseDeclareFunction\",\n      value: function flowParseDeclareFunction(node) {\n        this.next();\n        var id = node.id = this.parseIdentifier();\n        var typeNode = this.startNode();\n        var typeContainer = this.startNode();\n\n        if (this.isRelational(\"<\")) {\n          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          typeNode.typeParameters = null;\n        }\n\n        this.expect(types.parenL);\n        var tmp = this.flowParseFunctionTypeParams();\n        typeNode.params = tmp.params;\n        typeNode.rest = tmp.rest;\n        this.expect(types.parenR);\n\n        var _this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser();\n\n        var _this$flowParseTypeAn2 = _slicedToArray(_this$flowParseTypeAn, 2);\n\n        typeNode.returnType = _this$flowParseTypeAn2[0];\n        node.predicate = _this$flowParseTypeAn2[1];\n        typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n        id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n        this.resetEndLocation(id);\n        this.semicolon();\n        return this.finishNode(node, \"DeclareFunction\");\n      }\n    }, {\n      key: \"flowParseDeclare\",\n      value: function flowParseDeclare(node, insideModule) {\n        if (this.match(types._class)) {\n          return this.flowParseDeclareClass(node);\n        } else if (this.match(types._function)) {\n          return this.flowParseDeclareFunction(node);\n        } else if (this.match(types._var)) {\n          return this.flowParseDeclareVariable(node);\n        } else if (this.eatContextual(\"module\")) {\n          if (this.match(types.dot)) {\n            return this.flowParseDeclareModuleExports(node);\n          } else {\n            if (insideModule) {\n              this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n            }\n\n            return this.flowParseDeclareModule(node);\n          }\n        } else if (this.isContextual(\"type\")) {\n          return this.flowParseDeclareTypeAlias(node);\n        } else if (this.isContextual(\"opaque\")) {\n          return this.flowParseDeclareOpaqueType(node);\n        } else if (this.isContextual(\"interface\")) {\n          return this.flowParseDeclareInterface(node);\n        } else if (this.match(types._export)) {\n          return this.flowParseDeclareExportDeclaration(node, insideModule);\n        } else {\n          throw this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseDeclareVariable\",\n      value: function flowParseDeclareVariable(node) {\n        this.next();\n        node.id = this.flowParseTypeAnnotatableIdentifier(true);\n        this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n        this.semicolon();\n        return this.finishNode(node, \"DeclareVariable\");\n      }\n    }, {\n      key: \"flowParseDeclareModule\",\n      value: function flowParseDeclareModule(node) {\n        var _this3 = this;\n\n        this.scope.enter(SCOPE_OTHER);\n\n        if (this.match(types.string)) {\n          node.id = this.parseExprAtom();\n        } else {\n          node.id = this.parseIdentifier();\n        }\n\n        var bodyNode = node.body = this.startNode();\n        var body = bodyNode.body = [];\n        this.expect(types.braceL);\n\n        while (!this.match(types.braceR)) {\n          var _bodyNode = this.startNode();\n\n          if (this.match(types._import)) {\n            this.next();\n\n            if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n              this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n            }\n\n            this.parseImport(_bodyNode);\n          } else {\n            this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n            _bodyNode = this.flowParseDeclare(_bodyNode, true);\n          }\n\n          body.push(_bodyNode);\n        }\n\n        this.scope.exit();\n        this.expect(types.braceR);\n        this.finishNode(bodyNode, \"BlockStatement\");\n        var kind = null;\n        var hasModuleExport = false;\n        body.forEach(function (bodyElement) {\n          if (isEsModuleType(bodyElement)) {\n            if (kind === \"CommonJS\") {\n              _this3.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n            }\n\n            kind = \"ES\";\n          } else if (bodyElement.type === \"DeclareModuleExports\") {\n            if (hasModuleExport) {\n              _this3.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n            }\n\n            if (kind === \"ES\") {\n              _this3.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n            }\n\n            kind = \"CommonJS\";\n            hasModuleExport = true;\n          }\n        });\n        node.kind = kind || \"CommonJS\";\n        return this.finishNode(node, \"DeclareModule\");\n      }\n    }, {\n      key: \"flowParseDeclareExportDeclaration\",\n      value: function flowParseDeclareExportDeclaration(node, insideModule) {\n        this.expect(types._export);\n\n        if (this.eat(types._default)) {\n          if (this.match(types._function) || this.match(types._class)) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n          } else {\n            node.declaration = this.flowParseType();\n            this.semicolon();\n          }\n\n          node.default = true;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else {\n          if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n            var label = this.state.value;\n            var suggestion = exportSuggestions[label];\n            throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n          }\n\n          if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n            node = this.parseExport(node);\n\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParseDeclareModuleExports\",\n      value: function flowParseDeclareModuleExports(node) {\n        this.next();\n        this.expectContextual(\"exports\");\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n        this.semicolon();\n        return this.finishNode(node, \"DeclareModuleExports\");\n      }\n    }, {\n      key: \"flowParseDeclareTypeAlias\",\n      value: function flowParseDeclareTypeAlias(node) {\n        this.next();\n        this.flowParseTypeAlias(node);\n        node.type = \"DeclareTypeAlias\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareOpaqueType\",\n      value: function flowParseDeclareOpaqueType(node) {\n        this.next();\n        this.flowParseOpaqueType(node, true);\n        node.type = \"DeclareOpaqueType\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareInterface\",\n      value: function flowParseDeclareInterface(node) {\n        this.next();\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"DeclareInterface\");\n      }\n    }, {\n      key: \"flowParseInterfaceish\",\n      value: function flowParseInterfaceish(node) {\n        var isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n        this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.extends = [];\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eat(types._extends)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (!isClass && this.eat(types.comma));\n        }\n\n        if (this.isContextual(\"mixins\")) {\n          this.next();\n\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types.comma));\n        }\n\n        if (this.isContextual(\"implements\")) {\n          this.next();\n\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types.comma));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: isClass,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: isClass,\n          allowInexact: false\n        });\n      }\n    }, {\n      key: \"flowParseInterfaceExtends\",\n      value: function flowParseInterfaceExtends() {\n        var node = this.startNode();\n        node.id = this.flowParseQualifiedTypeIdentifier();\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        return this.finishNode(node, \"InterfaceExtends\");\n      }\n    }, {\n      key: \"flowParseInterface\",\n      value: function flowParseInterface(node) {\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"InterfaceDeclaration\");\n      }\n    }, {\n      key: \"checkNotUnderscore\",\n      value: function checkNotUnderscore(word) {\n        if (word === \"_\") {\n          this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n        }\n      }\n    }, {\n      key: \"checkReservedType\",\n      value: function checkReservedType(word, startLoc, declaration) {\n        if (!reservedTypes.has(word)) return;\n        this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n      }\n    }, {\n      key: \"flowParseRestrictedIdentifier\",\n      value: function flowParseRestrictedIdentifier(liberal, declaration) {\n        this.checkReservedType(this.state.value, this.state.start, declaration);\n        return this.parseIdentifier(liberal);\n      }\n    }, {\n      key: \"flowParseTypeAlias\",\n      value: function flowParseTypeAlias(node) {\n        node.id = this.flowParseRestrictedIdentifier(false, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.right = this.flowParseTypeInitialiser(types.eq);\n        this.semicolon();\n        return this.finishNode(node, \"TypeAlias\");\n      }\n    }, {\n      key: \"flowParseOpaqueType\",\n      value: function flowParseOpaqueType(node, declare) {\n        this.expectContextual(\"type\");\n        node.id = this.flowParseRestrictedIdentifier(true, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.supertype = null;\n\n        if (this.match(types.colon)) {\n          node.supertype = this.flowParseTypeInitialiser(types.colon);\n        }\n\n        node.impltype = null;\n\n        if (!declare) {\n          node.impltype = this.flowParseTypeInitialiser(types.eq);\n        }\n\n        this.semicolon();\n        return this.finishNode(node, \"OpaqueType\");\n      }\n    }, {\n      key: \"flowParseTypeParameter\",\n      value: function flowParseTypeParameter() {\n        var requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var nodeStart = this.state.start;\n        var node = this.startNode();\n        var variance = this.flowParseVariance();\n        var ident = this.flowParseTypeAnnotatableIdentifier();\n        node.name = ident.name;\n        node.variance = variance;\n        node.bound = ident.typeAnnotation;\n\n        if (this.match(types.eq)) {\n          this.eat(types.eq);\n          node.default = this.flowParseType();\n        } else {\n          if (requireDefault) {\n            this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n          }\n        }\n\n        return this.finishNode(node, \"TypeParameter\");\n      }\n    }, {\n      key: \"flowParseTypeParameterDeclaration\",\n      value: function flowParseTypeParameterDeclaration() {\n        var oldInType = this.state.inType;\n        var node = this.startNode();\n        node.params = [];\n        this.state.inType = true;\n\n        if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        var defaultRequired = false;\n\n        do {\n          var typeParameter = this.flowParseTypeParameter(defaultRequired);\n          node.params.push(typeParameter);\n\n          if (typeParameter.default) {\n            defaultRequired = true;\n          }\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types.comma);\n          }\n        } while (!this.isRelational(\">\"));\n\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterDeclaration\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiation\",\n      value: function flowParseTypeParameterInstantiation() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expectRelational(\"<\");\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n\n        while (!this.isRelational(\">\")) {\n          node.params.push(this.flowParseType());\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types.comma);\n          }\n        }\n\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiationCallOrNew\",\n      value: function flowParseTypeParameterInstantiationCallOrNew() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expectRelational(\"<\");\n\n        while (!this.isRelational(\">\")) {\n          node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types.comma);\n          }\n        }\n\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseInterfaceType\",\n      value: function flowParseInterfaceType() {\n        var node = this.startNode();\n        this.expectContextual(\"interface\");\n        node.extends = [];\n\n        if (this.eat(types._extends)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types.comma));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: false,\n          allowInexact: false\n        });\n        return this.finishNode(node, \"InterfaceTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectPropertyKey\",\n      value: function flowParseObjectPropertyKey() {\n        return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n      }\n    }, {\n      key: \"flowParseObjectTypeIndexer\",\n      value: function flowParseObjectTypeIndexer(node, isStatic, variance) {\n        node.static = isStatic;\n\n        if (this.lookahead().type === types.colon) {\n          node.id = this.flowParseObjectPropertyKey();\n          node.key = this.flowParseTypeInitialiser();\n        } else {\n          node.id = null;\n          node.key = this.flowParseType();\n        }\n\n        this.expect(types.bracketR);\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n        return this.finishNode(node, \"ObjectTypeIndexer\");\n      }\n    }, {\n      key: \"flowParseObjectTypeInternalSlot\",\n      value: function flowParseObjectTypeInternalSlot(node, isStatic) {\n        node.static = isStatic;\n        node.id = this.flowParseObjectPropertyKey();\n        this.expect(types.bracketR);\n        this.expect(types.bracketR);\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n          node.optional = false;\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n        } else {\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            node.optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n        }\n\n        return this.finishNode(node, \"ObjectTypeInternalSlot\");\n      }\n    }, {\n      key: \"flowParseObjectTypeMethodish\",\n      value: function flowParseObjectTypeMethodish(node) {\n        node.params = [];\n        node.rest = null;\n        node.typeParameters = null;\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        this.expect(types.parenL);\n\n        while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          node.params.push(this.flowParseFunctionTypeParam());\n\n          if (!this.match(types.parenR)) {\n            this.expect(types.comma);\n          }\n        }\n\n        if (this.eat(types.ellipsis)) {\n          node.rest = this.flowParseFunctionTypeParam();\n        }\n\n        this.expect(types.parenR);\n        node.returnType = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectTypeCallProperty\",\n      value: function flowParseObjectTypeCallProperty(node, isStatic) {\n        var valueNode = this.startNode();\n        node.static = isStatic;\n        node.value = this.flowParseObjectTypeMethodish(valueNode);\n        return this.finishNode(node, \"ObjectTypeCallProperty\");\n      }\n    }, {\n      key: \"flowParseObjectType\",\n      value: function flowParseObjectType(_ref2) {\n        var allowStatic = _ref2.allowStatic,\n            allowExact = _ref2.allowExact,\n            allowSpread = _ref2.allowSpread,\n            allowProto = _ref2.allowProto,\n            allowInexact = _ref2.allowInexact;\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var nodeStart = this.startNode();\n        nodeStart.callProperties = [];\n        nodeStart.properties = [];\n        nodeStart.indexers = [];\n        nodeStart.internalSlots = [];\n        var endDelim;\n        var exact;\n        var inexact = false;\n\n        if (allowExact && this.match(types.braceBarL)) {\n          this.expect(types.braceBarL);\n          endDelim = types.braceBarR;\n          exact = true;\n        } else {\n          this.expect(types.braceL);\n          endDelim = types.braceR;\n          exact = false;\n        }\n\n        nodeStart.exact = exact;\n\n        while (!this.match(endDelim)) {\n          var isStatic = false;\n          var protoStart = null;\n          var inexactStart = null;\n          var node = this.startNode();\n\n          if (allowProto && this.isContextual(\"proto\")) {\n            var lookahead = this.lookahead();\n\n            if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n              this.next();\n              protoStart = this.state.start;\n              allowStatic = false;\n            }\n          }\n\n          if (allowStatic && this.isContextual(\"static\")) {\n            var _lookahead = this.lookahead();\n\n            if (_lookahead.type !== types.colon && _lookahead.type !== types.question) {\n              this.next();\n              isStatic = true;\n            }\n          }\n\n          var variance = this.flowParseVariance();\n\n          if (this.eat(types.bracketL)) {\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (this.eat(types.bracketL)) {\n              if (variance) {\n                this.unexpected(variance.start);\n              }\n\n              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n            } else {\n              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n            }\n          } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n          } else {\n            var kind = \"init\";\n\n            if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n              var _lookahead2 = this.lookahead();\n\n              if (_lookahead2.type === types.name || _lookahead2.type === types.string || _lookahead2.type === types.num) {\n                kind = this.state.value;\n                this.next();\n              }\n            }\n\n            var propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n            if (propOrInexact === null) {\n              inexact = true;\n              inexactStart = this.state.lastTokStart;\n            } else {\n              nodeStart.properties.push(propOrInexact);\n            }\n          }\n\n          this.flowObjectTypeSemicolon();\n\n          if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n            this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n          }\n        }\n\n        this.expect(endDelim);\n\n        if (allowSpread) {\n          nodeStart.inexact = inexact;\n        }\n\n        var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n        this.state.inType = oldInType;\n        return out;\n      }\n    }, {\n      key: \"flowParseObjectTypeProperty\",\n      value: function flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n        if (this.eat(types.ellipsis)) {\n          var isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n          if (isInexactToken) {\n            if (!allowSpread) {\n              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n            } else if (!allowInexact) {\n              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n            }\n\n            if (variance) {\n              this.raise(variance.start, FlowErrors.InexactVariance);\n            }\n\n            return null;\n          }\n\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n          }\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.SpreadVariance);\n          }\n\n          node.argument = this.flowParseType();\n          return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n        } else {\n          node.key = this.flowParseObjectPropertyKey();\n          node.static = isStatic;\n          node.proto = protoStart != null;\n          node.kind = kind;\n          var optional = false;\n\n          if (this.isRelational(\"<\") || this.match(types.parenL)) {\n            node.method = true;\n\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n            if (kind === \"get\" || kind === \"set\") {\n              this.flowCheckGetterSetterParams(node);\n            }\n          } else {\n            if (kind !== \"init\") this.unexpected();\n            node.method = false;\n\n            if (this.eat(types.question)) {\n              optional = true;\n            }\n\n            node.value = this.flowParseTypeInitialiser();\n            node.variance = variance;\n          }\n\n          node.optional = optional;\n          return this.finishNode(node, \"ObjectTypeProperty\");\n        }\n      }\n    }, {\n      key: \"flowCheckGetterSetterParams\",\n      value: function flowCheckGetterSetterParams(property) {\n        var paramCount = property.kind === \"get\" ? 0 : 1;\n        var start = property.start;\n        var length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n        if (length !== paramCount) {\n          if (property.kind === \"get\") {\n            this.raise(start, ErrorMessages.BadGetterArity);\n          } else {\n            this.raise(start, ErrorMessages.BadSetterArity);\n          }\n        }\n\n        if (property.kind === \"set\" && property.value.rest) {\n          this.raise(start, ErrorMessages.BadSetterRestParameter);\n        }\n      }\n    }, {\n      key: \"flowObjectTypeSemicolon\",\n      value: function flowObjectTypeSemicolon() {\n        if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n          this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseQualifiedTypeIdentifier\",\n      value: function flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n        startPos = startPos || this.state.start;\n        startLoc = startLoc || this.state.startLoc;\n        var node = id || this.flowParseRestrictedIdentifier(true);\n\n        while (this.eat(types.dot)) {\n          var node2 = this.startNodeAt(startPos, startLoc);\n          node2.qualification = node;\n          node2.id = this.flowParseRestrictedIdentifier(true);\n          node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"flowParseGenericType\",\n      value: function flowParseGenericType(startPos, startLoc, id) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.typeParameters = null;\n        node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        return this.finishNode(node, \"GenericTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeofType\",\n      value: function flowParseTypeofType() {\n        var node = this.startNode();\n        this.expect(types._typeof);\n        node.argument = this.flowParsePrimaryType();\n        return this.finishNode(node, \"TypeofTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTupleType\",\n      value: function flowParseTupleType() {\n        var node = this.startNode();\n        node.types = [];\n        this.expect(types.bracketL);\n\n        while (this.state.pos < this.length && !this.match(types.bracketR)) {\n          node.types.push(this.flowParseType());\n          if (this.match(types.bracketR)) break;\n          this.expect(types.comma);\n        }\n\n        this.expect(types.bracketR);\n        return this.finishNode(node, \"TupleTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParam\",\n      value: function flowParseFunctionTypeParam() {\n        var name = null;\n        var optional = false;\n        var typeAnnotation = null;\n        var node = this.startNode();\n        var lh = this.lookahead();\n\n        if (lh.type === types.colon || lh.type === types.question) {\n          name = this.parseIdentifier();\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          typeAnnotation = this.flowParseTypeInitialiser();\n        } else {\n          typeAnnotation = this.flowParseType();\n        }\n\n        node.name = name;\n        node.optional = optional;\n        node.typeAnnotation = typeAnnotation;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"reinterpretTypeAsFunctionTypeParam\",\n      value: function reinterpretTypeAsFunctionTypeParam(type) {\n        var node = this.startNodeAt(type.start, type.loc.start);\n        node.name = null;\n        node.optional = false;\n        node.typeAnnotation = type;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParams\",\n      value: function flowParseFunctionTypeParams() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var rest = null;\n\n        while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          params.push(this.flowParseFunctionTypeParam());\n\n          if (!this.match(types.parenR)) {\n            this.expect(types.comma);\n          }\n        }\n\n        if (this.eat(types.ellipsis)) {\n          rest = this.flowParseFunctionTypeParam();\n        }\n\n        return {\n          params: params,\n          rest: rest\n        };\n      }\n    }, {\n      key: \"flowIdentToTypeAnnotation\",\n      value: function flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n        switch (id.name) {\n          case \"any\":\n            return this.finishNode(node, \"AnyTypeAnnotation\");\n\n          case \"bool\":\n          case \"boolean\":\n            return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n          case \"mixed\":\n            return this.finishNode(node, \"MixedTypeAnnotation\");\n\n          case \"empty\":\n            return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n          case \"number\":\n            return this.finishNode(node, \"NumberTypeAnnotation\");\n\n          case \"string\":\n            return this.finishNode(node, \"StringTypeAnnotation\");\n\n          case \"symbol\":\n            return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n          default:\n            this.checkNotUnderscore(id.name);\n            return this.flowParseGenericType(startPos, startLoc, id);\n        }\n      }\n    }, {\n      key: \"flowParsePrimaryType\",\n      value: function flowParsePrimaryType() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.startNode();\n        var tmp;\n        var type;\n        var isGroupedType = false;\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n        switch (this.state.type) {\n          case types.name:\n            if (this.isContextual(\"interface\")) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n          case types.braceL:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: false,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: true\n            });\n\n          case types.braceBarL:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: true,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: false\n            });\n\n          case types.bracketL:\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseTupleType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n            return type;\n\n          case types.relational:\n            if (this.state.value === \"<\") {\n              node.typeParameters = this.flowParseTypeParameterDeclaration();\n              this.expect(types.parenL);\n              tmp = this.flowParseFunctionTypeParams();\n              node.params = tmp.params;\n              node.rest = tmp.rest;\n              this.expect(types.parenR);\n              this.expect(types.arrow);\n              node.returnType = this.flowParseType();\n              return this.finishNode(node, \"FunctionTypeAnnotation\");\n            }\n\n            break;\n\n          case types.parenL:\n            this.next();\n\n            if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n              if (this.match(types.name)) {\n                var token = this.lookahead().type;\n                isGroupedType = token !== types.question && token !== types.colon;\n              } else {\n                isGroupedType = true;\n              }\n            }\n\n            if (isGroupedType) {\n              this.state.noAnonFunctionType = false;\n              type = this.flowParseType();\n              this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n              if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n                this.expect(types.parenR);\n                return type;\n              } else {\n                this.eat(types.comma);\n              }\n            }\n\n            if (type) {\n              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n            } else {\n              tmp = this.flowParseFunctionTypeParams();\n            }\n\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            node.typeParameters = null;\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n          case types.string:\n            return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n          case types._true:\n          case types._false:\n            node.value = this.match(types._true);\n            this.next();\n            return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n          case types.plusMin:\n            if (this.state.value === \"-\") {\n              this.next();\n\n              if (this.match(types.num)) {\n                return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n              }\n\n              if (this.match(types.bigint)) {\n                return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n              }\n\n              throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n            }\n\n            throw this.unexpected();\n\n          case types.num:\n            return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n          case types.bigint:\n            return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n          case types._void:\n            this.next();\n            return this.finishNode(node, \"VoidTypeAnnotation\");\n\n          case types._null:\n            this.next();\n            return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n          case types._this:\n            this.next();\n            return this.finishNode(node, \"ThisTypeAnnotation\");\n\n          case types.star:\n            this.next();\n            return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n          default:\n            if (this.state.type.keyword === \"typeof\") {\n              return this.flowParseTypeofType();\n            } else if (this.state.type.keyword) {\n              var label = this.state.type.label;\n              this.next();\n              return _get(_getPrototypeOf(_temp.prototype), \"createIdentifier\", this).call(this, node, label);\n            }\n\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParsePostfixType\",\n      value: function flowParsePostfixType() {\n        var startPos = this.state.start,\n            startLoc = this.state.startLoc;\n        var type = this.flowParsePrimaryType();\n\n        while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n          var node = this.startNodeAt(startPos, startLoc);\n          node.elementType = type;\n          this.expect(types.bracketL);\n          this.expect(types.bracketR);\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        }\n\n        return type;\n      }\n    }, {\n      key: \"flowParsePrefixType\",\n      value: function flowParsePrefixType() {\n        var node = this.startNode();\n\n        if (this.eat(types.question)) {\n          node.typeAnnotation = this.flowParsePrefixType();\n          return this.finishNode(node, \"NullableTypeAnnotation\");\n        } else {\n          return this.flowParsePostfixType();\n        }\n      }\n    }, {\n      key: \"flowParseAnonFunctionWithoutParens\",\n      value: function flowParseAnonFunctionWithoutParens() {\n        var param = this.flowParsePrefixType();\n\n        if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n          var node = this.startNodeAt(param.start, param.loc.start);\n          node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n          node.rest = null;\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        return param;\n      }\n    }, {\n      key: \"flowParseIntersectionType\",\n      value: function flowParseIntersectionType() {\n        var node = this.startNode();\n        this.eat(types.bitwiseAND);\n        var type = this.flowParseAnonFunctionWithoutParens();\n        node.types = [type];\n\n        while (this.eat(types.bitwiseAND)) {\n          node.types.push(this.flowParseAnonFunctionWithoutParens());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseUnionType\",\n      value: function flowParseUnionType() {\n        var node = this.startNode();\n        this.eat(types.bitwiseOR);\n        var type = this.flowParseIntersectionType();\n        node.types = [type];\n\n        while (this.eat(types.bitwiseOR)) {\n          node.types.push(this.flowParseIntersectionType());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseType\",\n      value: function flowParseType() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var type = this.flowParseUnionType();\n        this.state.inType = oldInType;\n        this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n        return type;\n      }\n    }, {\n      key: \"flowParseTypeOrImplicitInstantiation\",\n      value: function flowParseTypeOrImplicitInstantiation() {\n        if (this.state.type === types.name && this.state.value === \"_\") {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var node = this.parseIdentifier();\n          return this.flowParseGenericType(startPos, startLoc, node);\n        } else {\n          return this.flowParseType();\n        }\n      }\n    }, {\n      key: \"flowParseTypeAnnotation\",\n      value: function flowParseTypeAnnotation() {\n        var node = this.startNode();\n        node.typeAnnotation = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"TypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeAnnotatableIdentifier\",\n      value: function flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n        var ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n        if (this.match(types.colon)) {\n          ident.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(ident);\n        }\n\n        return ident;\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"flowParseVariance\",\n      value: function flowParseVariance() {\n        var variance = null;\n\n        if (this.match(types.plusMin)) {\n          variance = this.startNode();\n\n          if (this.state.value === \"+\") {\n            variance.kind = \"plus\";\n          } else {\n            variance.kind = \"minus\";\n          }\n\n          this.next();\n          this.finishNode(variance, \"Variance\");\n        }\n\n        return variance;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpressionBody) {\n        var _this4 = this;\n\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (allowExpressionBody) {\n          return this.forwardNoArrowParamsConversionAt(node, function () {\n            return _get(_getPrototypeOf(_temp.prototype), \"parseFunctionBody\", _this4).call(_this4, node, true, isMethod);\n          });\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseFunctionBody\", this).call(this, node, false, isMethod);\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(types.colon)) {\n          var typeNode = this.startNode();\n\n          var _this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser();\n\n          var _this$flowParseTypeAn4 = _slicedToArray(_this$flowParseTypeAn3, 2);\n\n          typeNode.typeAnnotation = _this$flowParseTypeAn4[0];\n          node.predicate = _this$flowParseTypeAn4[1];\n          node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"parseStatement\",\n      value: function parseStatement(context, topLevel) {\n        if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n          var lookahead = this.lookahead();\n\n          if (lookahead.type === types.name || isKeyword(lookahead.value)) {\n            var node = this.startNode();\n            this.next();\n            return this.flowParseInterface(node);\n          }\n        } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          var _node = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_node);\n        }\n\n        var stmt = _get(_getPrototypeOf(_temp.prototype), \"parseStatement\", this).call(this, context, topLevel);\n\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n\n        return stmt;\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type === \"Identifier\") {\n          if (expr.name === \"declare\") {\n            if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n              return this.flowParseDeclare(node);\n            }\n          } else if (this.match(types.name)) {\n            if (expr.name === \"interface\") {\n              return this.flowParseInterface(node);\n            } else if (expr.name === \"type\") {\n              return this.flowParseTypeAlias(node);\n            } else if (expr.name === \"opaque\") {\n              return this.flowParseOpaqueType(node, false);\n            }\n          }\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || _get(_getPrototypeOf(_temp.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n          return false;\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          var node = this.startNode();\n          this.next();\n          return this.flowParseEnumDeclaration(node);\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n        var _this5 = this;\n\n        if (!this.match(types.question)) return expr;\n\n        if (refNeedsArrowPos) {\n          var result = this.tryParse(function () {\n            return _get(_getPrototypeOf(_temp.prototype), \"parseConditional\", _this5).call(_this5, expr, startPos, startLoc);\n          });\n\n          if (!result.node) {\n            refNeedsArrowPos.start = result.error.pos || this.state.start;\n            return expr;\n          }\n\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n\n        this.expect(types.question);\n        var state = this.state.clone();\n        var originalNoArrowAt = this.state.noArrowAt;\n        var node = this.startNodeAt(startPos, startLoc);\n\n        var _this$tryParseConditi = this.tryParseConditionalConsequent(),\n            consequent = _this$tryParseConditi.consequent,\n            failed = _this$tryParseConditi.failed;\n\n        var _this$getArrowLikeExp = this.getArrowLikeExpressions(consequent),\n            _this$getArrowLikeExp2 = _slicedToArray(_this$getArrowLikeExp, 2),\n            valid = _this$getArrowLikeExp2[0],\n            invalid = _this$getArrowLikeExp2[1];\n\n        if (failed || invalid.length > 0) {\n          var noArrowAt = _toConsumableArray(originalNoArrowAt);\n\n          if (invalid.length > 0) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt;\n\n            for (var i = 0; i < invalid.length; i++) {\n              noArrowAt.push(invalid[i].start);\n            }\n\n            var _this$tryParseConditi2 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi2.consequent;\n            failed = _this$tryParseConditi2.failed;\n\n            var _this$getArrowLikeExp3 = this.getArrowLikeExpressions(consequent);\n\n            var _this$getArrowLikeExp4 = _slicedToArray(_this$getArrowLikeExp3, 2);\n\n            valid = _this$getArrowLikeExp4[0];\n            invalid = _this$getArrowLikeExp4[1];\n          }\n\n          if (failed && valid.length > 1) {\n            this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n          }\n\n          if (failed && valid.length === 1) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n\n            var _this$tryParseConditi3 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi3.consequent;\n            failed = _this$tryParseConditi3.failed;\n          }\n        }\n\n        this.getArrowLikeExpressions(consequent, true);\n        this.state.noArrowAt = originalNoArrowAt;\n        this.expect(types.colon);\n        node.test = expr;\n        node.consequent = consequent;\n        node.alternate = this.forwardNoArrowParamsConversionAt(node, function () {\n          return _this5.parseMaybeAssign(undefined, undefined, undefined);\n        });\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n    }, {\n      key: \"tryParseConditionalConsequent\",\n      value: function tryParseConditionalConsequent() {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        var consequent = this.parseMaybeAssignAllowIn();\n        var failed = !this.match(types.colon);\n        this.state.noArrowParamsConversionAt.pop();\n        return {\n          consequent: consequent,\n          failed: failed\n        };\n      }\n    }, {\n      key: \"getArrowLikeExpressions\",\n      value: function getArrowLikeExpressions(node, disallowInvalid) {\n        var _this6 = this;\n\n        var stack = [node];\n        var arrows = [];\n\n        while (stack.length !== 0) {\n          var _node2 = stack.pop();\n\n          if (_node2.type === \"ArrowFunctionExpression\") {\n            if (_node2.typeParameters || !_node2.returnType) {\n              this.finishArrowValidation(_node2);\n            } else {\n              arrows.push(_node2);\n            }\n\n            stack.push(_node2.body);\n          } else if (_node2.type === \"ConditionalExpression\") {\n            stack.push(_node2.consequent);\n            stack.push(_node2.alternate);\n          }\n        }\n\n        if (disallowInvalid) {\n          arrows.forEach(function (node) {\n            return _this6.finishArrowValidation(node);\n          });\n          return [arrows, []];\n        }\n\n        return partition(arrows, function (node) {\n          return node.params.every(function (param) {\n            return _this6.isAssignable(param, true);\n          });\n        });\n      }\n    }, {\n      key: \"finishArrowValidation\",\n      value: function finishArrowValidation(node) {\n        var _node$extra;\n\n        this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n\n        _get(_getPrototypeOf(_temp.prototype), \"checkParams\", this).call(this, node, false, true);\n\n        this.scope.exit();\n      }\n    }, {\n      key: \"forwardNoArrowParamsConversionAt\",\n      value: function forwardNoArrowParamsConversionAt(node, parse) {\n        var result;\n\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          this.state.noArrowParamsConversionAt.push(this.state.start);\n          result = parse();\n          this.state.noArrowParamsConversionAt.pop();\n        } else {\n          result = parse();\n        }\n\n        return result;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = _get(_getPrototypeOf(_temp.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(types.colon)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"assertModuleNodeAllowed\",\n      value: function assertModuleNodeAllowed(node) {\n        if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n          return;\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"assertModuleNodeAllowed\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var decl = _get(_getPrototypeOf(_temp.prototype), \"parseExport\", this).call(this, node);\n\n        if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n          decl.exportKind = decl.exportKind || \"value\";\n        }\n\n        return decl;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        if (this.isContextual(\"type\")) {\n          node.exportKind = \"type\";\n          var declarationNode = this.startNode();\n          this.next();\n\n          if (this.match(types.braceL)) {\n            node.specifiers = this.parseExportSpecifiers();\n            this.parseExportFrom(node);\n            return null;\n          } else {\n            return this.flowParseTypeAlias(declarationNode);\n          }\n        } else if (this.isContextual(\"opaque\")) {\n          node.exportKind = \"type\";\n\n          var _declarationNode = this.startNode();\n\n          this.next();\n          return this.flowParseOpaqueType(_declarationNode, false);\n        } else if (this.isContextual(\"interface\")) {\n          node.exportKind = \"type\";\n\n          var _declarationNode2 = this.startNode();\n\n          this.next();\n          return this.flowParseInterface(_declarationNode2);\n        } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          node.exportKind = \"value\";\n\n          var _declarationNode3 = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_declarationNode3);\n        } else {\n          return _get(_getPrototypeOf(_temp.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"eatExportStar\",\n      value: function eatExportStar(node) {\n        if (_get(_getPrototypeOf(_temp.prototype), \"eatExportStar\", this).apply(this, arguments)) return true;\n\n        if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n          node.exportKind = \"type\";\n          this.next();\n          this.next();\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeParseExportNamespaceSpecifier\",\n      value: function maybeParseExportNamespaceSpecifier(node) {\n        var pos = this.state.start;\n\n        var hasNamespace = _get(_getPrototypeOf(_temp.prototype), \"maybeParseExportNamespaceSpecifier\", this).call(this, node);\n\n        if (hasNamespace && node.exportKind === \"type\") {\n          this.unexpected(pos);\n        }\n\n        return hasNamespace;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        _get(_getPrototypeOf(_temp.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state) {\n        var pos = this.state.start;\n\n        if (this.isContextual(\"declare\")) {\n          if (this.parseClassMemberFromModifier(classBody, member)) {\n            return;\n          }\n\n          member.declare = true;\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"parseClassMember\", this).call(this, classBody, member, state);\n\n        if (member.declare) {\n          if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n            this.raise(pos, FlowErrors.DeclareClassElement);\n          } else if (member.value) {\n            this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n          }\n        }\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 123 && next === 124) {\n          return this.finishOp(types.braceBarL, 2);\n        } else if (this.state.inType && (code === 62 || code === 60)) {\n          return this.finishOp(types.relational, 1);\n        } else if (this.state.inType && code === 63) {\n          return this.finishOp(types.question, 1);\n        } else if (isIteratorStart(code, next)) {\n          this.state.isIterator = true;\n          return _get(_getPrototypeOf(_temp.prototype), \"readWord\", this).call(this);\n        } else {\n          return _get(_getPrototypeOf(_temp.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        var _this7 = this;\n\n        switch (node.type) {\n          case \"Identifier\":\n          case \"ObjectPattern\":\n          case \"ArrayPattern\":\n          case \"AssignmentPattern\":\n            return true;\n\n          case \"ObjectExpression\":\n            {\n              var _last = node.properties.length - 1;\n\n              return node.properties.every(function (prop, i) {\n                return prop.type !== \"ObjectMethod\" && (i === _last || prop.type === \"SpreadElement\") && _this7.isAssignable(prop);\n              });\n            }\n\n          case \"ObjectProperty\":\n            return this.isAssignable(node.value);\n\n          case \"SpreadElement\":\n            return this.isAssignable(node.argument);\n\n          case \"ArrayExpression\":\n            return node.elements.every(function (element) {\n              return _this7.isAssignable(element);\n            });\n\n          case \"AssignmentExpression\":\n            return node.operator === \"=\";\n\n          case \"ParenthesizedExpression\":\n          case \"TypeCastExpression\":\n            return this.isAssignable(node.expression);\n\n          case \"MemberExpression\":\n          case \"OptionalMemberExpression\":\n            return !isBinding;\n\n          default:\n            return false;\n        }\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (node.type === \"TypeCastExpression\") {\n          return _get(_getPrototypeOf(_temp.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node), isLHS);\n        } else {\n          return _get(_getPrototypeOf(_temp.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList, trailingCommaPos, isLHS) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n\n          if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n            exprList[i] = this.typeCastToParameter(expr);\n          }\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"toAssignableList\", this).call(this, exprList, trailingCommaPos, isLHS);\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isParenthesizedExpr) {\n        for (var i = 0; i < exprList.length; i++) {\n          var _expr$extra;\n\n          var expr = exprList[i];\n\n          if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n            this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n          }\n        }\n\n        return exprList;\n      }\n    }, {\n      key: \"parseArrayLike\",\n      value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n        var node = _get(_getPrototypeOf(_temp.prototype), \"parseArrayLike\", this).call(this, close, canBePattern, isTuple, refExpressionErrors);\n\n        if (canBePattern && !this.state.maybeInArrowParameters) {\n          this.toReferencedList(node.elements);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        if (expr.type !== \"TypeCastExpression\") {\n          var _get4;\n\n          for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n            args[_key5 - 1] = arguments[_key5];\n          }\n\n          return (_get4 = _get(_getPrototypeOf(_temp.prototype), \"checkLVal\", this)).call.apply(_get4, [this, expr].concat(args));\n        }\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        if (this.match(types.colon)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (this.match(types.colon)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.isRelational(\"<\") || _get(_getPrototypeOf(_temp.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_temp.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"isNonstaticConstructor\",\n      value: function isNonstaticConstructor(method) {\n        return !this.match(types.colon) && _get(_getPrototypeOf(_temp.prototype), \"isNonstaticConstructor\", this).call(this, method);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        if (method.variance) {\n          this.unexpected(method.variance.start);\n        }\n\n        delete method.variance;\n\n        if (this.isRelational(\"<\")) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        if (method.variance) {\n          this.unexpected(method.variance.start);\n        }\n\n        delete method.variance;\n\n        if (this.isRelational(\"<\")) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        _get(_getPrototypeOf(_temp.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && this.isRelational(\"<\")) {\n          node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        if (this.isContextual(\"implements\")) {\n          this.next();\n          var implemented = node.implements = [];\n\n          do {\n            var _node3 = this.startNode();\n\n            _node3.id = this.flowParseRestrictedIdentifier(true);\n\n            if (this.isRelational(\"<\")) {\n              _node3.typeParameters = this.flowParseTypeParameterInstantiation();\n            } else {\n              _node3.typeParameters = null;\n            }\n\n            implemented.push(this.finishNode(_node3, \"ClassImplements\"));\n          } while (this.eat(types.comma));\n        }\n      }\n    }, {\n      key: \"parsePropertyName\",\n      value: function parsePropertyName(node, isPrivateNameAllowed) {\n        var variance = this.flowParseVariance();\n\n        var key = _get(_getPrototypeOf(_temp.prototype), \"parsePropertyName\", this).call(this, node, isPrivateNameAllowed);\n\n        node.variance = variance;\n        return key;\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n        if (prop.variance) {\n          this.unexpected(prop.variance.start);\n        }\n\n        delete prop.variance;\n        var typeParameters;\n\n        if (this.isRelational(\"<\") && !isAccessor) {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          if (!this.match(types.parenL)) this.unexpected();\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"parseObjPropValue\", this).call(this, prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n        if (typeParameters) {\n          (prop.value || prop).typeParameters = typeParameters;\n        }\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(types.question)) {\n          if (param.type !== \"Identifier\") {\n            this.raise(param.start, FlowErrors.OptionalBindingPattern);\n          }\n\n          param.optional = true;\n        }\n\n        if (this.match(types.colon)) {\n          param.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault(startPos, startLoc, left) {\n        var node = _get(_getPrototypeOf(_temp.prototype), \"parseMaybeDefault\", this).call(this, startPos, startLoc, left);\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"shouldParseDefaultImport\",\n      value: function shouldParseDefaultImport(node) {\n        if (!hasTypeImportKind(node)) {\n          return _get(_getPrototypeOf(_temp.prototype), \"shouldParseDefaultImport\", this).call(this, node);\n        }\n\n        return isMaybeDefaultImport(this.state);\n      }\n    }, {\n      key: \"parseImportSpecifierLocal\",\n      value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n        specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n        this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n        node.specifiers.push(this.finishNode(specifier, type));\n      }\n    }, {\n      key: \"maybeParseDefaultImportSpecifier\",\n      value: function maybeParseDefaultImportSpecifier(node) {\n        node.importKind = \"value\";\n        var kind = null;\n\n        if (this.match(types._typeof)) {\n          kind = \"typeof\";\n        } else if (this.isContextual(\"type\")) {\n          kind = \"type\";\n        }\n\n        if (kind) {\n          var lh = this.lookahead();\n\n          if (kind === \"type\" && lh.type === types.star) {\n            this.unexpected(lh.start);\n          }\n\n          if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n            this.next();\n            node.importKind = kind;\n          }\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"maybeParseDefaultImportSpecifier\", this).call(this, node);\n      }\n    }, {\n      key: \"parseImportSpecifier\",\n      value: function parseImportSpecifier(node) {\n        var specifier = this.startNode();\n        var firstIdentLoc = this.state.start;\n        var firstIdent = this.parseModuleExportName();\n        var specifierTypeKind = null;\n\n        if (firstIdent.type === \"Identifier\") {\n          if (firstIdent.name === \"type\") {\n            specifierTypeKind = \"type\";\n          } else if (firstIdent.name === \"typeof\") {\n            specifierTypeKind = \"typeof\";\n          }\n        }\n\n        var isBinding = false;\n\n        if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n          var as_ident = this.parseIdentifier(true);\n\n          if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n            specifier.imported = as_ident;\n            specifier.importKind = specifierTypeKind;\n            specifier.local = as_ident.__clone();\n          } else {\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n            specifier.local = this.parseIdentifier();\n          }\n        } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n\n          if (this.eatContextual(\"as\")) {\n            specifier.local = this.parseIdentifier();\n          } else {\n            isBinding = true;\n            specifier.local = specifier.imported.__clone();\n          }\n        } else {\n          if (firstIdent.type === \"StringLiteral\") {\n            throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n          }\n\n          isBinding = true;\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = specifier.imported.__clone();\n        }\n\n        var nodeIsTypeImport = hasTypeImportKind(node);\n        var specifierIsTypeImport = hasTypeImportKind(specifier);\n\n        if (nodeIsTypeImport && specifierIsTypeImport) {\n          this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n        }\n\n        if (nodeIsTypeImport || specifierIsTypeImport) {\n          this.checkReservedType(specifier.local.name, specifier.local.start, true);\n        }\n\n        if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n          this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n        }\n\n        this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n        node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var kind = node.kind;\n\n        if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        _get(_getPrototypeOf(_temp.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (this.match(types.colon)) {\n          decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(types.colon)) {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          node.returnType = this.flowParseTypeAnnotation();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_temp.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n        var _this8 = this;\n\n        var _jsx;\n\n        var state = null;\n        var jsx;\n\n        if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            return _get(_getPrototypeOf(_temp.prototype), \"parseMaybeAssign\", _this8).call(_this8, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n\n          if (context[context.length - 1] === types$1.j_oTag) {\n            context.length -= 2;\n          } else if (context[context.length - 1] === types$1.j_expr) {\n            context.length -= 1;\n          }\n        }\n\n        if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n          var _jsx2, _jsx3;\n\n          state = state || this.state.clone();\n          var typeParameters;\n          var arrow = this.tryParse(function (abort) {\n            var _arrowExpression$extr;\n\n            typeParameters = _this8.flowParseTypeParameterDeclaration();\n\n            var arrowExpression = _this8.forwardNoArrowParamsConversionAt(typeParameters, function () {\n              var result = _get(_getPrototypeOf(_temp.prototype), \"parseMaybeAssign\", _this8).call(_this8, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n\n              _this8.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            });\n\n            if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n              abort();\n            }\n\n            var expr = _this8.maybeUnwrapTypeCastExpression(arrowExpression);\n\n            expr.typeParameters = typeParameters;\n\n            _this8.resetStartLocationFromNode(expr, typeParameters);\n\n            return arrowExpression;\n          }, state);\n          var arrowExpression = null;\n\n          if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n            if (!arrow.error && !arrow.aborted) {\n              if (arrow.node.async) {\n                this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n              }\n\n              return arrow.node;\n            }\n\n            arrowExpression = arrow.node;\n          }\n\n          if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n            this.state = jsx.failState;\n            return jsx.node;\n          }\n\n          if (arrowExpression) {\n            this.state = arrow.failState;\n            return arrowExpression;\n          }\n\n          if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n          if (arrow.thrown) throw arrow.error;\n          throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseMaybeAssign\", this).call(this, refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this9 = this;\n\n        if (this.match(types.colon)) {\n          var result = this.tryParse(function () {\n            var oldNoAnonFunctionType = _this9.state.noAnonFunctionType;\n            _this9.state.noAnonFunctionType = true;\n\n            var typeNode = _this9.startNode();\n\n            var _this9$flowParseTypeA = _this9.flowParseTypeAndPredicateInitialiser();\n\n            var _this9$flowParseTypeA2 = _slicedToArray(_this9$flowParseTypeA, 2);\n\n            typeNode.typeAnnotation = _this9$flowParseTypeA2[0];\n            node.predicate = _this9$flowParseTypeA2[1];\n            _this9.state.noAnonFunctionType = oldNoAnonFunctionType;\n            if (_this9.canInsertSemicolon()) _this9.unexpected();\n            if (!_this9.match(types.arrow)) _this9.unexpected();\n            return typeNode;\n          });\n          if (result.thrown) return null;\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_temp.prototype), \"shouldParseArrow\", this).call(this);\n      }\n    }, {\n      key: \"setArrowFunctionParameters\",\n      value: function setArrowFunctionParameters(node, params) {\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          node.params = params;\n        } else {\n          _get(_getPrototypeOf(_temp.prototype), \"setArrowFunctionParameters\", this).call(this, node, params);\n        }\n      }\n    }, {\n      key: \"checkParams\",\n      value: function checkParams(node, allowDuplicates, isArrowFunction) {\n        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          return;\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"checkParams\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseParenAndDistinguishExpression\",\n      value: function parseParenAndDistinguishExpression(canBeArrow) {\n        return _get(_getPrototypeOf(_temp.prototype), \"parseParenAndDistinguishExpression\", this).call(this, canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n      }\n    }, {\n      key: \"parseSubscripts\",\n      value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n        var _this10 = this;\n\n        if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          base = this.finishNode(node, \"CallExpression\");\n        } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n          var state = this.state.clone();\n          var arrow = this.tryParse(function (abort) {\n            return _this10.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort();\n          }, state);\n          if (!arrow.error && !arrow.aborted) return arrow.node;\n          var result = this.tryParse(function () {\n            return _get(_getPrototypeOf(_temp.prototype), \"parseSubscripts\", _this10).call(_this10, base, startPos, startLoc, noCalls);\n          }, state);\n          if (result.node && !result.error) return result.node;\n\n          if (arrow.node) {\n            this.state = arrow.failState;\n            return arrow.node;\n          }\n\n          if (result.node) {\n            this.state = result.failState;\n            return result.node;\n          }\n\n          throw arrow.error || result.error;\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseSubscripts\", this).call(this, base, startPos, startLoc, noCalls);\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n        var _this11 = this;\n\n        if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n          subscriptState.optionalChainMember = true;\n\n          if (noCalls) {\n            subscriptState.stop = true;\n            return base;\n          }\n\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.typeArguments = this.flowParseTypeParameterInstantiation();\n          this.expect(types.parenL);\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          node.optional = true;\n          return this.finishCallExpression(node, true);\n        } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n          var _node4 = this.startNodeAt(startPos, startLoc);\n\n          _node4.callee = base;\n          var result = this.tryParse(function () {\n            _node4.typeArguments = _this11.flowParseTypeParameterInstantiationCallOrNew();\n\n            _this11.expect(types.parenL);\n\n            _node4.arguments = _this11.parseCallExpressionArguments(types.parenR, false);\n            if (subscriptState.optionalChainMember) _node4.optional = false;\n            return _this11.finishCallExpression(_node4, subscriptState.optionalChainMember);\n          });\n\n          if (result.node) {\n            if (result.error) this.state = result.failState;\n            return result.node;\n          }\n        }\n\n        return _get(_getPrototypeOf(_temp.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, subscriptState);\n      }\n    }, {\n      key: \"parseNewArguments\",\n      value: function parseNewArguments(node) {\n        var _this12 = this;\n\n        var targs = null;\n\n        if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n          targs = this.tryParse(function () {\n            return _this12.flowParseTypeParameterInstantiationCallOrNew();\n          }).node;\n        }\n\n        node.typeArguments = targs;\n\n        _get(_getPrototypeOf(_temp.prototype), \"parseNewArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAsyncArrowWithTypeParameters\",\n      value: function parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        this.parseFunctionParams(node);\n        if (!this.parseArrow(node)) return;\n        return this.parseArrowExpression(node, undefined, true);\n      }\n    }, {\n      key: \"readToken_mult_modulo\",\n      value: function readToken_mult_modulo(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 42 && next === 47 && this.state.hasFlowComment) {\n          this.state.hasFlowComment = false;\n          this.state.pos += 2;\n          this.nextToken();\n          return;\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"readToken_mult_modulo\", this).call(this, code);\n      }\n    }, {\n      key: \"readToken_pipe_amp\",\n      value: function readToken_pipe_amp(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 124 && next === 125) {\n          this.finishOp(types.braceBarR, 2);\n          return;\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"readToken_pipe_amp\", this).call(this, code);\n      }\n    }, {\n      key: \"parseTopLevel\",\n      value: function parseTopLevel(file, program) {\n        var fileNode = _get(_getPrototypeOf(_temp.prototype), \"parseTopLevel\", this).call(this, file, program);\n\n        if (this.state.hasFlowComment) {\n          this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n        }\n\n        return fileNode;\n      }\n    }, {\n      key: \"skipBlockComment\",\n      value: function skipBlockComment() {\n        if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n          if (this.state.hasFlowComment) {\n            this.unexpected(null, FlowErrors.NestedFlowComment);\n          }\n\n          this.hasFlowCommentCompletion();\n          this.state.pos += this.skipFlowComment();\n          this.state.hasFlowComment = true;\n          return;\n        }\n\n        if (this.state.hasFlowComment) {\n          var end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n          if (end === -1) {\n            throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n          }\n\n          this.state.pos = end + 3;\n          return;\n        }\n\n        _get(_getPrototypeOf(_temp.prototype), \"skipBlockComment\", this).call(this);\n      }\n    }, {\n      key: \"skipFlowComment\",\n      value: function skipFlowComment() {\n        var pos = this.state.pos;\n        var shiftToFirstNonWhiteSpace = 2;\n\n        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n          shiftToFirstNonWhiteSpace++;\n        }\n\n        var ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n        var ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n        if (ch2 === 58 && ch3 === 58) {\n          return shiftToFirstNonWhiteSpace + 2;\n        }\n\n        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n          return shiftToFirstNonWhiteSpace + 12;\n        }\n\n        if (ch2 === 58 && ch3 !== 58) {\n          return shiftToFirstNonWhiteSpace;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"hasFlowCommentCompletion\",\n      value: function hasFlowCommentCompletion() {\n        var end = this.input.indexOf(\"*/\", this.state.pos);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n        }\n      }\n    }, {\n      key: \"flowEnumErrorBooleanMemberNotInitialized\",\n      value: function flowEnumErrorBooleanMemberNotInitialized(pos, _ref3) {\n        var enumName = _ref3.enumName,\n            memberName = _ref3.memberName;\n        this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberName\",\n      value: function flowEnumErrorInvalidMemberName(pos, _ref4) {\n        var enumName = _ref4.enumName,\n            memberName = _ref4.memberName;\n        var suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n        this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorDuplicateMemberName\",\n      value: function flowEnumErrorDuplicateMemberName(pos, _ref5) {\n        var enumName = _ref5.enumName,\n            memberName = _ref5.memberName;\n        this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInconsistentMemberValues\",\n      value: function flowEnumErrorInconsistentMemberValues(pos, _ref6) {\n        var enumName = _ref6.enumName;\n        this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidExplicitType\",\n      value: function flowEnumErrorInvalidExplicitType(pos, _ref7) {\n        var enumName = _ref7.enumName,\n            suppliedType = _ref7.suppliedType;\n        return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberInitializer\",\n      value: function flowEnumErrorInvalidMemberInitializer(pos, _ref8) {\n        var enumName = _ref8.enumName,\n            explicitType = _ref8.explicitType,\n            memberName = _ref8.memberName;\n        var message = null;\n\n        switch (explicitType) {\n          case \"boolean\":\n          case \"number\":\n          case \"string\":\n            message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n            break;\n\n          case \"symbol\":\n            message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n            break;\n\n          default:\n            message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n        }\n\n        return this.raise(pos, message, enumName, memberName, explicitType);\n      }\n    }, {\n      key: \"flowEnumErrorNumberMemberNotInitialized\",\n      value: function flowEnumErrorNumberMemberNotInitialized(pos, _ref9) {\n        var enumName = _ref9.enumName,\n            memberName = _ref9.memberName;\n        this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n      }\n    }, {\n      key: \"flowEnumErrorStringMemberInconsistentlyInitailized\",\n      value: function flowEnumErrorStringMemberInconsistentlyInitailized(pos, _ref10) {\n        var enumName = _ref10.enumName;\n        this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n      }\n    }, {\n      key: \"flowEnumMemberInit\",\n      value: function flowEnumMemberInit() {\n        var _this13 = this;\n\n        var startPos = this.state.start;\n\n        var endOfInit = function endOfInit() {\n          return _this13.match(types.comma) || _this13.match(types.braceR);\n        };\n\n        switch (this.state.type) {\n          case types.num:\n            {\n              var literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n              if (endOfInit()) {\n                return {\n                  type: \"number\",\n                  pos: literal.start,\n                  value: literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          case types.string:\n            {\n              var _literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n              if (endOfInit()) {\n                return {\n                  type: \"string\",\n                  pos: _literal.start,\n                  value: _literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          case types._true:\n          case types._false:\n            {\n              var _literal2 = this.parseBooleanLiteral();\n\n              if (endOfInit()) {\n                return {\n                  type: \"boolean\",\n                  pos: _literal2.start,\n                  value: _literal2\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          default:\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n        }\n      }\n    }, {\n      key: \"flowEnumMemberRaw\",\n      value: function flowEnumMemberRaw() {\n        var pos = this.state.start;\n        var id = this.parseIdentifier(true);\n        var init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n          type: \"none\",\n          pos: pos\n        };\n        return {\n          id: id,\n          init: init\n        };\n      }\n    }, {\n      key: \"flowEnumCheckExplicitTypeMismatch\",\n      value: function flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n        var explicitType = context.explicitType;\n\n        if (explicitType === null) {\n          return;\n        }\n\n        if (explicitType !== expectedType) {\n          this.flowEnumErrorInvalidMemberInitializer(pos, context);\n        }\n      }\n    }, {\n      key: \"flowEnumMembers\",\n      value: function flowEnumMembers(_ref11) {\n        var enumName = _ref11.enumName,\n            explicitType = _ref11.explicitType;\n        var seenNames = new Set();\n        var members = {\n          booleanMembers: [],\n          numberMembers: [],\n          stringMembers: [],\n          defaultedMembers: []\n        };\n\n        while (!this.match(types.braceR)) {\n          var memberNode = this.startNode();\n\n          var _this$flowEnumMemberR = this.flowEnumMemberRaw(),\n              id = _this$flowEnumMemberR.id,\n              init = _this$flowEnumMemberR.init;\n\n          var memberName = id.name;\n\n          if (memberName === \"\") {\n            continue;\n          }\n\n          if (/^[a-z]/.test(memberName)) {\n            this.flowEnumErrorInvalidMemberName(id.start, {\n              enumName: enumName,\n              memberName: memberName\n            });\n          }\n\n          if (seenNames.has(memberName)) {\n            this.flowEnumErrorDuplicateMemberName(id.start, {\n              enumName: enumName,\n              memberName: memberName\n            });\n          }\n\n          seenNames.add(memberName);\n          var context = {\n            enumName: enumName,\n            explicitType: explicitType,\n            memberName: memberName\n          };\n          memberNode.id = id;\n\n          switch (init.type) {\n            case \"boolean\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n                memberNode.init = init.value;\n                members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n                break;\n              }\n\n            case \"number\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n                memberNode.init = init.value;\n                members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n                break;\n              }\n\n            case \"string\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n                memberNode.init = init.value;\n                members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n                break;\n              }\n\n            case \"invalid\":\n              {\n                throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n              }\n\n            case \"none\":\n              {\n                switch (explicitType) {\n                  case \"boolean\":\n                    this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                    break;\n\n                  case \"number\":\n                    this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                    break;\n\n                  default:\n                    members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n                }\n              }\n          }\n\n          if (!this.match(types.braceR)) {\n            this.expect(types.comma);\n          }\n        }\n\n        return members;\n      }\n    }, {\n      key: \"flowEnumStringMembers\",\n      value: function flowEnumStringMembers(initializedMembers, defaultedMembers, _ref12) {\n        var enumName = _ref12.enumName;\n\n        if (initializedMembers.length === 0) {\n          return defaultedMembers;\n        } else if (defaultedMembers.length === 0) {\n          return initializedMembers;\n        } else if (defaultedMembers.length > initializedMembers.length) {\n          for (var _i = 0; _i < initializedMembers.length; _i++) {\n            var member = initializedMembers[_i];\n            this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n              enumName: enumName\n            });\n          }\n\n          return defaultedMembers;\n        } else {\n          for (var _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n            var _member = defaultedMembers[_i2];\n            this.flowEnumErrorStringMemberInconsistentlyInitailized(_member.start, {\n              enumName: enumName\n            });\n          }\n\n          return initializedMembers;\n        }\n      }\n    }, {\n      key: \"flowEnumParseExplicitType\",\n      value: function flowEnumParseExplicitType(_ref13) {\n        var enumName = _ref13.enumName;\n\n        if (this.eatContextual(\"of\")) {\n          if (!this.match(types.name)) {\n            throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n              enumName: enumName,\n              suppliedType: null\n            });\n          }\n\n          var value = this.state.value;\n          this.next();\n\n          if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n            this.flowEnumErrorInvalidExplicitType(this.state.start, {\n              enumName: enumName,\n              suppliedType: value\n            });\n          }\n\n          return value;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"flowEnumBody\",\n      value: function flowEnumBody(node, _ref14) {\n        var _this14 = this;\n\n        var enumName = _ref14.enumName,\n            nameLoc = _ref14.nameLoc;\n        var explicitType = this.flowEnumParseExplicitType({\n          enumName: enumName\n        });\n        this.expect(types.braceL);\n        var members = this.flowEnumMembers({\n          enumName: enumName,\n          explicitType: explicitType\n        });\n\n        switch (explicitType) {\n          case \"boolean\":\n            node.explicitType = true;\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n\n          case \"number\":\n            node.explicitType = true;\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n\n          case \"string\":\n            node.explicitType = true;\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName: enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n\n          case \"symbol\":\n            node.members = members.defaultedMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumSymbolBody\");\n\n          default:\n            {\n              var empty = function empty() {\n                node.members = [];\n\n                _this14.expect(types.braceR);\n\n                return _this14.finishNode(node, \"EnumStringBody\");\n              };\n\n              node.explicitType = false;\n              var boolsLen = members.booleanMembers.length;\n              var numsLen = members.numberMembers.length;\n              var strsLen = members.stringMembers.length;\n              var defaultedLen = members.defaultedMembers.length;\n\n              if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n                return empty();\n              } else if (!boolsLen && !numsLen) {\n                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                  enumName: enumName\n                });\n                this.expect(types.braceR);\n                return this.finishNode(node, \"EnumStringBody\");\n              } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n                for (var _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                  var member = _members$defaultedMem[_i3];\n                  this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                    enumName: enumName,\n                    memberName: member.id.name\n                  });\n                }\n\n                node.members = members.booleanMembers;\n                this.expect(types.braceR);\n                return this.finishNode(node, \"EnumBooleanBody\");\n              } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n                for (var _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                  var _member2 = _members$defaultedMem2[_i4];\n                  this.flowEnumErrorNumberMemberNotInitialized(_member2.start, {\n                    enumName: enumName,\n                    memberName: _member2.id.name\n                  });\n                }\n\n                node.members = members.numberMembers;\n                this.expect(types.braceR);\n                return this.finishNode(node, \"EnumNumberBody\");\n              } else {\n                this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                  enumName: enumName\n                });\n                return empty();\n              }\n            }\n        }\n      }\n    }, {\n      key: \"flowParseEnumDeclaration\",\n      value: function flowParseEnumDeclaration(node) {\n        var id = this.parseIdentifier();\n        node.id = id;\n        node.body = this.flowEnumBody(this.startNode(), {\n          enumName: id.name,\n          nameLoc: id.start\n        });\n        return this.finishNode(node, \"EnumDeclaration\");\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n          this.state.exprAllowed = false;\n        } else {\n          _get(_getPrototypeOf(_temp.prototype), \"updateContext\", this).call(this, prevType);\n        }\n      }\n    }, {\n      key: \"isLookaheadToken_lt\",\n      value: function isLookaheadToken_lt() {\n        var next = this.nextTokenStart();\n\n        if (this.input.charCodeAt(next) === 60) {\n          var afterNext = this.input.charCodeAt(next + 1);\n          return afterNext !== 60 && afterNext !== 61;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeUnwrapTypeCastExpression\",\n      value: function maybeUnwrapTypeCastExpression(node) {\n        return node.type === \"TypeCastExpression\" ? node.expression : node;\n      }\n    }]);\n\n    return _temp;\n  }(superClass), _temp;\n};\n\nvar entities = {\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nvar HEX_NUMBER = /^[\\da-fA-F]+$/;\nvar DECIMAL_NUMBER = /^\\d+$/;\nvar JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  var out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = function jsx(superClass) {\n  return /*#__PURE__*/function (_superClass3) {\n    _inherits(_class2, _superClass3);\n\n    var _super5 = _createSuper(_class2);\n\n    function _class2() {\n      _classCallCheck(this, _class2);\n\n      return _super5.apply(this, arguments);\n    }\n\n    _createClass(_class2, [{\n      key: \"jsxReadToken\",\n      value: function jsxReadToken() {\n        var out = \"\";\n        var chunkStart = this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n\n          switch (ch) {\n            case 60:\n            case 123:\n              if (this.state.pos === this.state.start) {\n                if (ch === 60 && this.state.exprAllowed) {\n                  ++this.state.pos;\n                  return this.finishToken(types.jsxTagStart);\n                }\n\n                return _get(_getPrototypeOf(_class2.prototype), \"getTokenFromCode\", this).call(this, ch);\n              }\n\n              out += this.input.slice(chunkStart, this.state.pos);\n              return this.finishToken(types.jsxText, out);\n\n            case 38:\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadEntity();\n              chunkStart = this.state.pos;\n              break;\n\n            default:\n              if (isNewLine(ch)) {\n                out += this.input.slice(chunkStart, this.state.pos);\n                out += this.jsxReadNewLine(true);\n                chunkStart = this.state.pos;\n              } else {\n                ++this.state.pos;\n              }\n\n          }\n        }\n      }\n    }, {\n      key: \"jsxReadNewLine\",\n      value: function jsxReadNewLine(normalizeCRLF) {\n        var ch = this.input.charCodeAt(this.state.pos);\n        var out;\n        ++this.state.pos;\n\n        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n          out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n        } else {\n          out = String.fromCharCode(ch);\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        return out;\n      }\n    }, {\n      key: \"jsxReadString\",\n      value: function jsxReadString(quote) {\n        var out = \"\";\n        var chunkStart = ++this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n          if (ch === quote) break;\n\n          if (ch === 38) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n          } else if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(false);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos++);\n        return this.finishToken(types.string, out);\n      }\n    }, {\n      key: \"jsxReadEntity\",\n      value: function jsxReadEntity() {\n        var str = \"\";\n        var count = 0;\n        var entity;\n        var ch = this.input[this.state.pos];\n        var startPos = ++this.state.pos;\n\n        while (this.state.pos < this.length && count++ < 10) {\n          ch = this.input[this.state.pos++];\n\n          if (ch === \";\") {\n            if (str[0] === \"#\") {\n              if (str[1] === \"x\") {\n                str = str.substr(2);\n\n                if (HEX_NUMBER.test(str)) {\n                  entity = String.fromCodePoint(parseInt(str, 16));\n                }\n              } else {\n                str = str.substr(1);\n\n                if (DECIMAL_NUMBER.test(str)) {\n                  entity = String.fromCodePoint(parseInt(str, 10));\n                }\n              }\n            } else {\n              entity = entities[str];\n            }\n\n            break;\n          }\n\n          str += ch;\n        }\n\n        if (!entity) {\n          this.state.pos = startPos;\n          return \"&\";\n        }\n\n        return entity;\n      }\n    }, {\n      key: \"jsxReadWord\",\n      value: function jsxReadWord() {\n        var ch;\n        var start = this.state.pos;\n\n        do {\n          ch = this.input.charCodeAt(++this.state.pos);\n        } while (isIdentifierChar(ch) || ch === 45);\n\n        return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n      }\n    }, {\n      key: \"jsxParseIdentifier\",\n      value: function jsxParseIdentifier() {\n        var node = this.startNode();\n\n        if (this.match(types.jsxName)) {\n          node.name = this.state.value;\n        } else if (this.state.type.keyword) {\n          node.name = this.state.type.keyword;\n        } else {\n          this.unexpected();\n        }\n\n        this.next();\n        return this.finishNode(node, \"JSXIdentifier\");\n      }\n    }, {\n      key: \"jsxParseNamespacedName\",\n      value: function jsxParseNamespacedName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var name = this.jsxParseIdentifier();\n        if (!this.eat(types.colon)) return name;\n        var node = this.startNodeAt(startPos, startLoc);\n        node.namespace = name;\n        node.name = this.jsxParseIdentifier();\n        return this.finishNode(node, \"JSXNamespacedName\");\n      }\n    }, {\n      key: \"jsxParseElementName\",\n      value: function jsxParseElementName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.jsxParseNamespacedName();\n\n        if (node.type === \"JSXNamespacedName\") {\n          return node;\n        }\n\n        while (this.eat(types.dot)) {\n          var newNode = this.startNodeAt(startPos, startLoc);\n          newNode.object = node;\n          newNode.property = this.jsxParseIdentifier();\n          node = this.finishNode(newNode, \"JSXMemberExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"jsxParseAttributeValue\",\n      value: function jsxParseAttributeValue() {\n        var node;\n\n        switch (this.state.type) {\n          case types.braceL:\n            node = this.startNode();\n            this.next();\n            node = this.jsxParseExpressionContainer(node);\n\n            if (node.expression.type === \"JSXEmptyExpression\") {\n              this.raise(node.start, JsxErrors.AttributeIsEmpty);\n            }\n\n            return node;\n\n          case types.jsxTagStart:\n          case types.string:\n            return this.parseExprAtom();\n\n          default:\n            throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n        }\n      }\n    }, {\n      key: \"jsxParseEmptyExpression\",\n      value: function jsxParseEmptyExpression() {\n        var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n        return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n      }\n    }, {\n      key: \"jsxParseSpreadChild\",\n      value: function jsxParseSpreadChild(node) {\n        this.next();\n        node.expression = this.parseExpression();\n        this.expect(types.braceR);\n        return this.finishNode(node, \"JSXSpreadChild\");\n      }\n    }, {\n      key: \"jsxParseExpressionContainer\",\n      value: function jsxParseExpressionContainer(node) {\n        if (this.match(types.braceR)) {\n          node.expression = this.jsxParseEmptyExpression();\n        } else {\n          var expression = this.parseExpression();\n          node.expression = expression;\n        }\n\n        this.expect(types.braceR);\n        return this.finishNode(node, \"JSXExpressionContainer\");\n      }\n    }, {\n      key: \"jsxParseAttribute\",\n      value: function jsxParseAttribute() {\n        var node = this.startNode();\n\n        if (this.eat(types.braceL)) {\n          this.expect(types.ellipsis);\n          node.argument = this.parseMaybeAssignAllowIn();\n          this.expect(types.braceR);\n          return this.finishNode(node, \"JSXSpreadAttribute\");\n        }\n\n        node.name = this.jsxParseNamespacedName();\n        node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n        return this.finishNode(node, \"JSXAttribute\");\n      }\n    }, {\n      key: \"jsxParseOpeningElementAt\",\n      value: function jsxParseOpeningElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.match(types.jsxTagEnd)) {\n          this.expect(types.jsxTagEnd);\n          return this.finishNode(node, \"JSXOpeningFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        return this.jsxParseOpeningElementAfterName(node);\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var attributes = [];\n\n        while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n          attributes.push(this.jsxParseAttribute());\n        }\n\n        node.attributes = attributes;\n        node.selfClosing = this.eat(types.slash);\n        this.expect(types.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningElement\");\n      }\n    }, {\n      key: \"jsxParseClosingElementAt\",\n      value: function jsxParseClosingElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.match(types.jsxTagEnd)) {\n          this.expect(types.jsxTagEnd);\n          return this.finishNode(node, \"JSXClosingFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        this.expect(types.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingElement\");\n      }\n    }, {\n      key: \"jsxParseElementAt\",\n      value: function jsxParseElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var children = [];\n        var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n        var closingElement = null;\n\n        if (!openingElement.selfClosing) {\n          contents: for (;;) {\n            switch (this.state.type) {\n              case types.jsxTagStart:\n                startPos = this.state.start;\n                startLoc = this.state.startLoc;\n                this.next();\n\n                if (this.eat(types.slash)) {\n                  closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n                  break contents;\n                }\n\n                children.push(this.jsxParseElementAt(startPos, startLoc));\n                break;\n\n              case types.jsxText:\n                children.push(this.parseExprAtom());\n                break;\n\n              case types.braceL:\n                {\n                  var _node5 = this.startNode();\n\n                  this.next();\n\n                  if (this.match(types.ellipsis)) {\n                    children.push(this.jsxParseSpreadChild(_node5));\n                  } else {\n                    children.push(this.jsxParseExpressionContainer(_node5));\n                  }\n\n                  break;\n                }\n\n              default:\n                throw this.unexpected();\n            }\n          }\n\n          if (isFragment(openingElement) && !isFragment(closingElement)) {\n            this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n          } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n            this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n          } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n              this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n            }\n          }\n        }\n\n        if (isFragment(openingElement)) {\n          node.openingFragment = openingElement;\n          node.closingFragment = closingElement;\n        } else {\n          node.openingElement = openingElement;\n          node.closingElement = closingElement;\n        }\n\n        node.children = children;\n\n        if (this.isRelational(\"<\")) {\n          throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n        }\n\n        return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n      }\n    }, {\n      key: \"jsxParseElement\",\n      value: function jsxParseElement() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        this.next();\n        return this.jsxParseElementAt(startPos, startLoc);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        if (this.match(types.jsxText)) {\n          return this.parseLiteral(this.state.value, \"JSXText\");\n        } else if (this.match(types.jsxTagStart)) {\n          return this.jsxParseElement();\n        } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n          this.finishToken(types.jsxTagStart);\n          return this.jsxParseElement();\n        } else {\n          return _get(_getPrototypeOf(_class2.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inPropertyName) return _get(_getPrototypeOf(_class2.prototype), \"getTokenFromCode\", this).call(this, code);\n        var context = this.curContext();\n\n        if (context === types$1.j_expr) {\n          return this.jsxReadToken();\n        }\n\n        if (context === types$1.j_oTag || context === types$1.j_cTag) {\n          if (isIdentifierStart(code)) {\n            return this.jsxReadWord();\n          }\n\n          if (code === 62) {\n            ++this.state.pos;\n            return this.finishToken(types.jsxTagEnd);\n          }\n\n          if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n            return this.jsxReadString(code);\n          }\n        }\n\n        if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n          ++this.state.pos;\n          return this.finishToken(types.jsxTagStart);\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"getTokenFromCode\", this).call(this, code);\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        if (this.match(types.braceL)) {\n          var curContext = this.curContext();\n\n          if (curContext === types$1.j_oTag) {\n            this.state.context.push(types$1.braceExpression);\n          } else if (curContext === types$1.j_expr) {\n            this.state.context.push(types$1.templateQuasi);\n          } else {\n            _get(_getPrototypeOf(_class2.prototype), \"updateContext\", this).call(this, prevType);\n          }\n\n          this.state.exprAllowed = true;\n        } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n          this.state.context.length -= 2;\n          this.state.context.push(types$1.j_cTag);\n          this.state.exprAllowed = false;\n        } else {\n          return _get(_getPrototypeOf(_class2.prototype), \"updateContext\", this).call(this, prevType);\n        }\n      }\n    }]);\n\n    return _class2;\n  }(superClass);\n};\n\nvar Scope = function Scope(flags) {\n  _classCallCheck(this, Scope);\n\n  this.flags = void 0;\n  this.var = [];\n  this.lexical = [];\n  this.functions = [];\n  this.flags = flags;\n};\n\nvar ScopeHandler = /*#__PURE__*/function () {\n  function ScopeHandler(raise, inModule) {\n    _classCallCheck(this, ScopeHandler);\n\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  _createClass(ScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new Scope(flags);\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(flags) {\n      this.scopeStack.push(this.createScope(flags));\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.scopeStack.pop();\n    }\n  }, {\n    key: \"treatFunctionsAsVarInScope\",\n    value: function treatFunctionsAsVarInScope(scope) {\n      return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, pos) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n        if (bindingType & BIND_SCOPE_FUNCTION) {\n          scope.functions.push(name);\n        } else {\n          scope.lexical.push(name);\n        }\n\n        if (bindingType & BIND_SCOPE_LEXICAL) {\n          this.maybeExportDefined(scope, name);\n        }\n      } else if (bindingType & BIND_SCOPE_VAR) {\n        for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n          scope = this.scopeStack[i];\n          this.checkRedeclarationInScope(scope, name, bindingType, pos);\n          scope.var.push(name);\n          this.maybeExportDefined(scope, name);\n          if (scope.flags & SCOPE_VAR) break;\n        }\n      }\n\n      if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"maybeExportDefined\",\n    value: function maybeExportDefined(scope, name) {\n      if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"checkRedeclarationInScope\",\n    value: function checkRedeclarationInScope(scope, name, bindingType, pos) {\n      if (this.isRedeclaredInScope(scope, name, bindingType)) {\n        this.raise(pos, ErrorMessages.VarRedeclaration, name);\n      }\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n      }\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n      }\n\n      return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n        this.undefinedExports.set(id.name, id.start);\n      }\n    }\n  }, {\n    key: \"currentScope\",\n    value: function currentScope() {\n      return this.scopeStack[this.scopeStack.length - 1];\n    }\n  }, {\n    key: \"currentVarScope\",\n    value: function currentVarScope() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var scope = this.scopeStack[i];\n\n        if (scope.flags & SCOPE_VAR) {\n          return scope;\n        }\n      }\n    }\n  }, {\n    key: \"currentThisScope\",\n    value: function currentThisScope() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var scope = this.scopeStack[i];\n\n        if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n          return scope;\n        }\n      }\n    }\n  }, {\n    key: \"inFunction\",\n    get: function get() {\n      return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"allowSuper\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n    }\n  }, {\n    key: \"allowDirectSuper\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n    }\n  }, {\n    key: \"inClass\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n    }\n  }, {\n    key: \"inNonArrowFunction\",\n    get: function get() {\n      return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"treatFunctionsAsVar\",\n    get: function get() {\n      return this.treatFunctionsAsVarInScope(this.currentScope());\n    }\n  }]);\n\n  return ScopeHandler;\n}();\n\nvar TypeScriptScope = /*#__PURE__*/function (_Scope) {\n  _inherits(TypeScriptScope, _Scope);\n\n  var _super6 = _createSuper(TypeScriptScope);\n\n  function TypeScriptScope() {\n    var _this15;\n\n    _classCallCheck(this, TypeScriptScope);\n\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    _this15 = _super6.call.apply(_super6, [this].concat(args));\n    _this15.types = [];\n    _this15.enums = [];\n    _this15.constEnums = [];\n    _this15.classes = [];\n    _this15.exportOnlyBindings = [];\n    return _this15;\n  }\n\n  return TypeScriptScope;\n}(Scope);\n\nvar TypeScriptScopeHandler = /*#__PURE__*/function (_ScopeHandler) {\n  _inherits(TypeScriptScopeHandler, _ScopeHandler);\n\n  var _super7 = _createSuper(TypeScriptScopeHandler);\n\n  function TypeScriptScopeHandler() {\n    _classCallCheck(this, TypeScriptScopeHandler);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(TypeScriptScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new TypeScriptScope(flags);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, pos) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n        this.maybeExportDefined(scope, name);\n        scope.exportOnlyBindings.push(name);\n        return;\n      }\n\n      _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"declareName\", this).apply(this, arguments);\n\n      if (bindingType & BIND_KIND_TYPE) {\n        if (!(bindingType & BIND_KIND_VALUE)) {\n          this.checkRedeclarationInScope(scope, name, bindingType, pos);\n          this.maybeExportDefined(scope, name);\n        }\n\n        scope.types.push(name);\n      }\n\n      if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n      if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n      if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (scope.enums.indexOf(name) > -1) {\n        if (bindingType & BIND_FLAGS_TS_ENUM) {\n          var isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n          var wasConst = scope.constEnums.indexOf(name) > -1;\n          return isConst !== wasConst;\n        }\n\n        return true;\n      }\n\n      if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n        if (scope.lexical.indexOf(name) > -1) {\n          return !!(bindingType & BIND_KIND_VALUE);\n        } else {\n          return false;\n        }\n      }\n\n      if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n        return true;\n      }\n\n      return _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"isRedeclaredInScope\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n        _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n      }\n    }\n  }]);\n\n  return TypeScriptScopeHandler;\n}(ScopeHandler);\n\nvar PARAM = 0,\n    PARAM_YIELD = 1,\n    PARAM_AWAIT = 2,\n    PARAM_RETURN = 4,\n    PARAM_IN = 8;\n\nvar ProductionParameterHandler = /*#__PURE__*/function () {\n  function ProductionParameterHandler() {\n    _classCallCheck(this, ProductionParameterHandler);\n\n    this.stacks = [];\n  }\n\n  _createClass(ProductionParameterHandler, [{\n    key: \"enter\",\n    value: function enter(flags) {\n      this.stacks.push(flags);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stacks.pop();\n    }\n  }, {\n    key: \"currentFlags\",\n    value: function currentFlags() {\n      return this.stacks[this.stacks.length - 1];\n    }\n  }, {\n    key: \"hasAwait\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_AWAIT) > 0;\n    }\n  }, {\n    key: \"hasYield\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_YIELD) > 0;\n    }\n  }, {\n    key: \"hasReturn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_RETURN) > 0;\n    }\n  }, {\n    key: \"hasIn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_IN) > 0;\n    }\n  }]);\n\n  return ProductionParameterHandler;\n}();\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(\"Unexpected \".concat(x, \" value.\"));\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nvar TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = function typescript(superClass) {\n  return /*#__PURE__*/function (_superClass4) {\n    _inherits(_class3, _superClass4);\n\n    var _super8 = _createSuper(_class3);\n\n    function _class3() {\n      _classCallCheck(this, _class3);\n\n      return _super8.apply(this, arguments);\n    }\n\n    _createClass(_class3, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return TypeScriptScopeHandler;\n      }\n    }, {\n      key: \"tsIsIdentifier\",\n      value: function tsIsIdentifier() {\n        return this.match(types.name);\n      }\n    }, {\n      key: \"tsNextTokenCanFollowModifier\",\n      value: function tsNextTokenCanFollowModifier() {\n        this.next();\n        return (this.match(types.bracketL) || this.match(types.braceL) || this.match(types.star) || this.match(types.ellipsis) || this.match(types.hash) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n      }\n    }, {\n      key: \"tsParseModifier\",\n      value: function tsParseModifier(allowedModifiers) {\n        if (!this.match(types.name)) {\n          return undefined;\n        }\n\n        var modifier = this.state.value;\n\n        if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n\n        return undefined;\n      }\n    }, {\n      key: \"tsParseModifiers\",\n      value: function tsParseModifiers(modified, allowedModifiers) {\n        for (;;) {\n          var startPos = this.state.start;\n          var modifier = this.tsParseModifier(allowedModifiers);\n          if (!modifier) break;\n\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          }\n\n          modified[modifier] = true;\n        }\n      }\n    }, {\n      key: \"tsIsListTerminator\",\n      value: function tsIsListTerminator(kind) {\n        switch (kind) {\n          case \"EnumMembers\":\n          case \"TypeMembers\":\n            return this.match(types.braceR);\n\n          case \"HeritageClauseElement\":\n            return this.match(types.braceL);\n\n          case \"TupleElementTypes\":\n            return this.match(types.bracketR);\n\n          case \"TypeParametersOrArguments\":\n            return this.isRelational(\">\");\n        }\n\n        throw new Error(\"Unreachable\");\n      }\n    }, {\n      key: \"tsParseList\",\n      value: function tsParseList(kind, parseElement) {\n        var result = [];\n\n        while (!this.tsIsListTerminator(kind)) {\n          result.push(parseElement());\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseDelimitedList\",\n      value: function tsParseDelimitedList(kind, parseElement) {\n        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n      }\n    }, {\n      key: \"tsParseDelimitedListWorker\",\n      value: function tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n        var result = [];\n\n        for (;;) {\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          var element = parseElement();\n\n          if (element == null) {\n            return undefined;\n          }\n\n          result.push(element);\n\n          if (this.eat(types.comma)) {\n            continue;\n          }\n\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          if (expectSuccess) {\n            this.expect(types.comma);\n          }\n\n          return undefined;\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseBracketedList\",\n      value: function tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n        if (!skipFirstToken) {\n          if (bracket) {\n            this.expect(types.bracketL);\n          } else {\n            this.expectRelational(\"<\");\n          }\n        }\n\n        var result = this.tsParseDelimitedList(kind, parseElement);\n\n        if (bracket) {\n          this.expect(types.bracketR);\n        } else {\n          this.expectRelational(\">\");\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseImportType\",\n      value: function tsParseImportType() {\n        var node = this.startNode();\n        this.expect(types._import);\n        this.expect(types.parenL);\n\n        if (!this.match(types.string)) {\n          this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n        }\n\n        node.argument = this.parseExprAtom();\n        this.expect(types.parenR);\n\n        if (this.eat(types.dot)) {\n          node.qualifier = this.tsParseEntityName(true);\n        }\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSImportType\");\n      }\n    }, {\n      key: \"tsParseEntityName\",\n      value: function tsParseEntityName(allowReservedWords) {\n        var entity = this.parseIdentifier();\n\n        while (this.eat(types.dot)) {\n          var node = this.startNodeAtNode(entity);\n          node.left = entity;\n          node.right = this.parseIdentifier(allowReservedWords);\n          entity = this.finishNode(node, \"TSQualifiedName\");\n        }\n\n        return entity;\n      }\n    }, {\n      key: \"tsParseTypeReference\",\n      value: function tsParseTypeReference() {\n        var node = this.startNode();\n        node.typeName = this.tsParseEntityName(false);\n\n        if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSTypeReference\");\n      }\n    }, {\n      key: \"tsParseThisTypePredicate\",\n      value: function tsParseThisTypePredicate(lhs) {\n        this.next();\n        var node = this.startNodeAtNode(lhs);\n        node.parameterName = lhs;\n        node.typeAnnotation = this.tsParseTypeAnnotation(false);\n        node.asserts = false;\n        return this.finishNode(node, \"TSTypePredicate\");\n      }\n    }, {\n      key: \"tsParseThisTypeNode\",\n      value: function tsParseThisTypeNode() {\n        var node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSThisType\");\n      }\n    }, {\n      key: \"tsParseTypeQuery\",\n      value: function tsParseTypeQuery() {\n        var node = this.startNode();\n        this.expect(types._typeof);\n\n        if (this.match(types._import)) {\n          node.exprName = this.tsParseImportType();\n        } else {\n          node.exprName = this.tsParseEntityName(true);\n        }\n\n        return this.finishNode(node, \"TSTypeQuery\");\n      }\n    }, {\n      key: \"tsParseTypeParameter\",\n      value: function tsParseTypeParameter() {\n        var node = this.startNode();\n        node.name = this.parseIdentifierName(node.start);\n        node.constraint = this.tsEatThenParseType(types._extends);\n        node.default = this.tsEatThenParseType(types.eq);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsTryParseTypeParameters\",\n      value: function tsTryParseTypeParameters() {\n        if (this.isRelational(\"<\")) {\n          return this.tsParseTypeParameters();\n        }\n      }\n    }, {\n      key: \"tsParseTypeParameters\",\n      value: function tsParseTypeParameters() {\n        var node = this.startNode();\n\n        if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n        if (node.params.length === 0) {\n          this.raise(node.start, TSErrors.EmptyTypeParameters);\n        }\n\n        return this.finishNode(node, \"TSTypeParameterDeclaration\");\n      }\n    }, {\n      key: \"tsTryNextParseConstantContext\",\n      value: function tsTryNextParseConstantContext() {\n        if (this.lookahead().type === types._const) {\n          this.next();\n          return this.tsParseTypeReference();\n        }\n\n        return null;\n      }\n    }, {\n      key: \"tsFillSignature\",\n      value: function tsFillSignature(returnToken, signature) {\n        var returnTokenRequired = returnToken === types.arrow;\n        signature.typeParameters = this.tsTryParseTypeParameters();\n        this.expect(types.parenL);\n        signature.parameters = this.tsParseBindingListForSignature();\n\n        if (returnTokenRequired) {\n          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        } else if (this.match(returnToken)) {\n          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        }\n      }\n    }, {\n      key: \"tsParseBindingListForSignature\",\n      value: function tsParseBindingListForSignature() {\n        var _this16 = this;\n\n        return this.parseBindingList(types.parenR, 41).map(function (pattern) {\n          if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n            _this16.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n          }\n\n          return pattern;\n        });\n      }\n    }, {\n      key: \"tsParseTypeMemberSemicolon\",\n      value: function tsParseTypeMemberSemicolon() {\n        if (!this.eat(types.comma)) {\n          this.semicolon();\n        }\n      }\n    }, {\n      key: \"tsParseSignatureMember\",\n      value: function tsParseSignatureMember(kind, node) {\n        this.tsFillSignature(types.colon, node);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, kind);\n      }\n    }, {\n      key: \"tsIsUnambiguouslyIndexSignature\",\n      value: function tsIsUnambiguouslyIndexSignature() {\n        this.next();\n        return this.eat(types.name) && this.match(types.colon);\n      }\n    }, {\n      key: \"tsTryParseIndexSignature\",\n      value: function tsTryParseIndexSignature(node) {\n        if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n          return undefined;\n        }\n\n        this.expect(types.bracketL);\n        var id = this.parseIdentifier();\n        id.typeAnnotation = this.tsParseTypeAnnotation();\n        this.resetEndLocation(id);\n        this.expect(types.bracketR);\n        node.parameters = [id];\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, \"TSIndexSignature\");\n      }\n    }, {\n      key: \"tsParsePropertyOrMethodSignature\",\n      value: function tsParsePropertyOrMethodSignature(node, readonly) {\n        if (this.eat(types.question)) node.optional = true;\n        var nodeAny = node;\n\n        if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n          var method = nodeAny;\n          this.tsFillSignature(types.colon, method);\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(method, \"TSMethodSignature\");\n        } else {\n          var property = nodeAny;\n          if (readonly) property.readonly = true;\n          var type = this.tsTryParseTypeAnnotation();\n          if (type) property.typeAnnotation = type;\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(property, \"TSPropertySignature\");\n        }\n      }\n    }, {\n      key: \"tsParseTypeMember\",\n      value: function tsParseTypeMember() {\n        var node = this.startNode();\n\n        if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n        }\n\n        if (this.match(types._new)) {\n          var id = this.startNode();\n          this.next();\n\n          if (this.match(types.parenL) || this.isRelational(\"<\")) {\n            return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n          } else {\n            node.key = this.createIdentifier(id, \"new\");\n            return this.tsParsePropertyOrMethodSignature(node, false);\n          }\n        }\n\n        var readonly = !!this.tsParseModifier([\"readonly\"]);\n        var idx = this.tsTryParseIndexSignature(node);\n\n        if (idx) {\n          if (readonly) node.readonly = true;\n          return idx;\n        }\n\n        this.parsePropertyName(node, false);\n        return this.tsParsePropertyOrMethodSignature(node, readonly);\n      }\n    }, {\n      key: \"tsParseTypeLiteral\",\n      value: function tsParseTypeLiteral() {\n        var node = this.startNode();\n        node.members = this.tsParseObjectTypeMembers();\n        return this.finishNode(node, \"TSTypeLiteral\");\n      }\n    }, {\n      key: \"tsParseObjectTypeMembers\",\n      value: function tsParseObjectTypeMembers() {\n        this.expect(types.braceL);\n        var members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n        this.expect(types.braceR);\n        return members;\n      }\n    }, {\n      key: \"tsIsStartOfMappedType\",\n      value: function tsIsStartOfMappedType() {\n        this.next();\n\n        if (this.eat(types.plusMin)) {\n          return this.isContextual(\"readonly\");\n        }\n\n        if (this.isContextual(\"readonly\")) {\n          this.next();\n        }\n\n        if (!this.match(types.bracketL)) {\n          return false;\n        }\n\n        this.next();\n\n        if (!this.tsIsIdentifier()) {\n          return false;\n        }\n\n        this.next();\n        return this.match(types._in);\n      }\n    }, {\n      key: \"tsParseMappedTypeParameter\",\n      value: function tsParseMappedTypeParameter() {\n        var node = this.startNode();\n        node.name = this.parseIdentifierName(node.start);\n        node.constraint = this.tsExpectThenParseType(types._in);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsParseMappedType\",\n      value: function tsParseMappedType() {\n        var node = this.startNode();\n        this.expect(types.braceL);\n\n        if (this.match(types.plusMin)) {\n          node.readonly = this.state.value;\n          this.next();\n          this.expectContextual(\"readonly\");\n        } else if (this.eatContextual(\"readonly\")) {\n          node.readonly = true;\n        }\n\n        this.expect(types.bracketL);\n        node.typeParameter = this.tsParseMappedTypeParameter();\n        node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n        this.expect(types.bracketR);\n\n        if (this.match(types.plusMin)) {\n          node.optional = this.state.value;\n          this.next();\n          this.expect(types.question);\n        } else if (this.eat(types.question)) {\n          node.optional = true;\n        }\n\n        node.typeAnnotation = this.tsTryParseType();\n        this.semicolon();\n        this.expect(types.braceR);\n        return this.finishNode(node, \"TSMappedType\");\n      }\n    }, {\n      key: \"tsParseTupleType\",\n      value: function tsParseTupleType() {\n        var _this17 = this;\n\n        var node = this.startNode();\n        node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n        var seenOptionalElement = false;\n        var labeledElements = null;\n        node.elementTypes.forEach(function (elementNode) {\n          var _labeledElements;\n\n          var _elementNode = elementNode,\n              type = _elementNode.type;\n\n          if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n            _this17.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n          }\n\n          seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n          if (type === \"TSRestType\") {\n            elementNode = elementNode.typeAnnotation;\n            type = elementNode.type;\n          }\n\n          var isLabeled = type === \"TSNamedTupleMember\";\n          labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n          if (labeledElements !== isLabeled) {\n            _this17.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n          }\n        });\n        return this.finishNode(node, \"TSTupleType\");\n      }\n    }, {\n      key: \"tsParseTupleElementType\",\n      value: function tsParseTupleElementType() {\n        var _this$state = this.state,\n            startPos = _this$state.start,\n            startLoc = _this$state.startLoc;\n        var rest = this.eat(types.ellipsis);\n        var type = this.tsParseType();\n        var optional = this.eat(types.question);\n        var labeled = this.eat(types.colon);\n\n        if (labeled) {\n          var labeledNode = this.startNodeAtNode(type);\n          labeledNode.optional = optional;\n\n          if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n            labeledNode.label = type.typeName;\n          } else {\n            this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n            labeledNode.label = type;\n          }\n\n          labeledNode.elementType = this.tsParseType();\n          type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n        } else if (optional) {\n          var optionalTypeNode = this.startNodeAtNode(type);\n          optionalTypeNode.typeAnnotation = type;\n          type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n        }\n\n        if (rest) {\n          var restNode = this.startNodeAt(startPos, startLoc);\n          restNode.typeAnnotation = type;\n          type = this.finishNode(restNode, \"TSRestType\");\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseParenthesizedType\",\n      value: function tsParseParenthesizedType() {\n        var node = this.startNode();\n        this.expect(types.parenL);\n        node.typeAnnotation = this.tsParseType();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"TSParenthesizedType\");\n      }\n    }, {\n      key: \"tsParseFunctionOrConstructorType\",\n      value: function tsParseFunctionOrConstructorType(type) {\n        var node = this.startNode();\n\n        if (type === \"TSConstructorType\") {\n          this.expect(types._new);\n        }\n\n        this.tsFillSignature(types.arrow, node);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"tsParseLiteralTypeNode\",\n      value: function tsParseLiteralTypeNode() {\n        var _this18 = this;\n\n        var node = this.startNode();\n\n        node.literal = function () {\n          switch (_this18.state.type) {\n            case types.num:\n            case types.bigint:\n            case types.string:\n            case types._true:\n            case types._false:\n              return _this18.parseExprAtom();\n\n            default:\n              throw _this18.unexpected();\n          }\n        }();\n\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"tsParseTemplateLiteralType\",\n      value: function tsParseTemplateLiteralType() {\n        var node = this.startNode();\n        node.literal = this.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"parseTemplateSubstitution\",\n      value: function parseTemplateSubstitution() {\n        if (this.state.inType) return this.tsParseType();\n        return _get(_getPrototypeOf(_class3.prototype), \"parseTemplateSubstitution\", this).call(this);\n      }\n    }, {\n      key: \"tsParseThisTypeOrThisTypePredicate\",\n      value: function tsParseThisTypeOrThisTypePredicate() {\n        var thisKeyword = this.tsParseThisTypeNode();\n\n        if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n          return this.tsParseThisTypePredicate(thisKeyword);\n        } else {\n          return thisKeyword;\n        }\n      }\n    }, {\n      key: \"tsParseNonArrayType\",\n      value: function tsParseNonArrayType() {\n        switch (this.state.type) {\n          case types.name:\n          case types._void:\n          case types._null:\n            {\n              var type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n              if (type !== undefined && this.lookaheadCharCode() !== 46) {\n                var node = this.startNode();\n                this.next();\n                return this.finishNode(node, type);\n              }\n\n              return this.tsParseTypeReference();\n            }\n\n          case types.string:\n          case types.num:\n          case types.bigint:\n          case types._true:\n          case types._false:\n            return this.tsParseLiteralTypeNode();\n\n          case types.plusMin:\n            if (this.state.value === \"-\") {\n              var _node6 = this.startNode();\n\n              var nextToken = this.lookahead();\n\n              if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n                throw this.unexpected();\n              }\n\n              _node6.literal = this.parseMaybeUnary();\n              return this.finishNode(_node6, \"TSLiteralType\");\n            }\n\n            break;\n\n          case types._this:\n            return this.tsParseThisTypeOrThisTypePredicate();\n\n          case types._typeof:\n            return this.tsParseTypeQuery();\n\n          case types._import:\n            return this.tsParseImportType();\n\n          case types.braceL:\n            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n          case types.bracketL:\n            return this.tsParseTupleType();\n\n          case types.parenL:\n            return this.tsParseParenthesizedType();\n\n          case types.backQuote:\n            return this.tsParseTemplateLiteralType();\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"tsParseArrayTypeOrHigher\",\n      value: function tsParseArrayTypeOrHigher() {\n        var type = this.tsParseNonArrayType();\n\n        while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n          if (this.match(types.bracketR)) {\n            var node = this.startNodeAtNode(type);\n            node.elementType = type;\n            this.expect(types.bracketR);\n            type = this.finishNode(node, \"TSArrayType\");\n          } else {\n            var _node7 = this.startNodeAtNode(type);\n\n            _node7.objectType = type;\n            _node7.indexType = this.tsParseType();\n            this.expect(types.bracketR);\n            type = this.finishNode(_node7, \"TSIndexedAccessType\");\n          }\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseTypeOperator\",\n      value: function tsParseTypeOperator(operator) {\n        var node = this.startNode();\n        this.expectContextual(operator);\n        node.operator = operator;\n        node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n        if (operator === \"readonly\") {\n          this.tsCheckTypeAnnotationForReadOnly(node);\n        }\n\n        return this.finishNode(node, \"TSTypeOperator\");\n      }\n    }, {\n      key: \"tsCheckTypeAnnotationForReadOnly\",\n      value: function tsCheckTypeAnnotationForReadOnly(node) {\n        switch (node.typeAnnotation.type) {\n          case \"TSTupleType\":\n          case \"TSArrayType\":\n            return;\n\n          default:\n            this.raise(node.start, TSErrors.UnexpectedReadonly);\n        }\n      }\n    }, {\n      key: \"tsParseInferType\",\n      value: function tsParseInferType() {\n        var node = this.startNode();\n        this.expectContextual(\"infer\");\n        var typeParameter = this.startNode();\n        typeParameter.name = this.parseIdentifierName(typeParameter.start);\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n        return this.finishNode(node, \"TSInferType\");\n      }\n    }, {\n      key: \"tsParseTypeOperatorOrHigher\",\n      value: function tsParseTypeOperatorOrHigher() {\n        var _this19 = this;\n\n        var operator = [\"keyof\", \"unique\", \"readonly\"].find(function (kw) {\n          return _this19.isContextual(kw);\n        });\n        return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseUnionOrIntersectionType\",\n      value: function tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n        this.eat(operator);\n        var type = parseConstituentType();\n\n        if (this.match(operator)) {\n          var _types = [type];\n\n          while (this.eat(operator)) {\n            _types.push(parseConstituentType());\n          }\n\n          var node = this.startNodeAtNode(type);\n          node.types = _types;\n          type = this.finishNode(node, kind);\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseIntersectionTypeOrHigher\",\n      value: function tsParseIntersectionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n      }\n    }, {\n      key: \"tsParseUnionTypeOrHigher\",\n      value: function tsParseUnionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n      }\n    }, {\n      key: \"tsIsStartOfFunctionType\",\n      value: function tsIsStartOfFunctionType() {\n        if (this.isRelational(\"<\")) {\n          return true;\n        }\n\n        return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n      }\n    }, {\n      key: \"tsSkipParameterStart\",\n      value: function tsSkipParameterStart() {\n        if (this.match(types.name) || this.match(types._this)) {\n          this.next();\n          return true;\n        }\n\n        if (this.match(types.braceL)) {\n          var braceStackCounter = 1;\n          this.next();\n\n          while (braceStackCounter > 0) {\n            if (this.match(types.braceL)) {\n              ++braceStackCounter;\n            } else if (this.match(types.braceR)) {\n              --braceStackCounter;\n            }\n\n            this.next();\n          }\n\n          return true;\n        }\n\n        if (this.match(types.bracketL)) {\n          var _braceStackCounter = 1;\n          this.next();\n\n          while (_braceStackCounter > 0) {\n            if (this.match(types.bracketL)) {\n              ++_braceStackCounter;\n            } else if (this.match(types.bracketR)) {\n              --_braceStackCounter;\n            }\n\n            this.next();\n          }\n\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsIsUnambiguouslyStartOfFunctionType\",\n      value: function tsIsUnambiguouslyStartOfFunctionType() {\n        this.next();\n\n        if (this.match(types.parenR) || this.match(types.ellipsis)) {\n          return true;\n        }\n\n        if (this.tsSkipParameterStart()) {\n          if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n            return true;\n          }\n\n          if (this.match(types.parenR)) {\n            this.next();\n\n            if (this.match(types.arrow)) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsParseTypeOrTypePredicateAnnotation\",\n      value: function tsParseTypeOrTypePredicateAnnotation(returnToken) {\n        var _this20 = this;\n\n        return this.tsInType(function () {\n          var t = _this20.startNode();\n\n          _this20.expect(returnToken);\n\n          var asserts = !!_this20.tsTryParse(_this20.tsParseTypePredicateAsserts.bind(_this20));\n\n          if (asserts && _this20.match(types._this)) {\n            var thisTypePredicate = _this20.tsParseThisTypeOrThisTypePredicate();\n\n            if (thisTypePredicate.type === \"TSThisType\") {\n              var _node8 = _this20.startNodeAtNode(t);\n\n              _node8.parameterName = thisTypePredicate;\n              _node8.asserts = true;\n              thisTypePredicate = _this20.finishNode(_node8, \"TSTypePredicate\");\n            } else {\n              thisTypePredicate.asserts = true;\n            }\n\n            t.typeAnnotation = thisTypePredicate;\n            return _this20.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var typePredicateVariable = _this20.tsIsIdentifier() && _this20.tsTryParse(_this20.tsParseTypePredicatePrefix.bind(_this20));\n\n          if (!typePredicateVariable) {\n            if (!asserts) {\n              return _this20.tsParseTypeAnnotation(false, t);\n            }\n\n            var _node9 = _this20.startNodeAtNode(t);\n\n            _node9.parameterName = _this20.parseIdentifier();\n            _node9.asserts = asserts;\n            t.typeAnnotation = _this20.finishNode(_node9, \"TSTypePredicate\");\n            return _this20.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var type = _this20.tsParseTypeAnnotation(false);\n\n          var node = _this20.startNodeAtNode(t);\n\n          node.parameterName = typePredicateVariable;\n          node.typeAnnotation = type;\n          node.asserts = asserts;\n          t.typeAnnotation = _this20.finishNode(node, \"TSTypePredicate\");\n          return _this20.finishNode(t, \"TSTypeAnnotation\");\n        });\n      }\n    }, {\n      key: \"tsTryParseTypeOrTypePredicateAnnotation\",\n      value: function tsTryParseTypeOrTypePredicateAnnotation() {\n        return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n      }\n    }, {\n      key: \"tsTryParseTypeAnnotation\",\n      value: function tsTryParseTypeAnnotation() {\n        return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n      }\n    }, {\n      key: \"tsTryParseType\",\n      value: function tsTryParseType() {\n        return this.tsEatThenParseType(types.colon);\n      }\n    }, {\n      key: \"tsParseTypePredicatePrefix\",\n      value: function tsParseTypePredicatePrefix() {\n        var id = this.parseIdentifier();\n\n        if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n          this.next();\n          return id;\n        }\n      }\n    }, {\n      key: \"tsParseTypePredicateAsserts\",\n      value: function tsParseTypePredicateAsserts() {\n        if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n          return false;\n        }\n\n        var containsEsc = this.state.containsEsc;\n        this.next();\n\n        if (!this.match(types.name) && !this.match(types._this)) {\n          return false;\n        }\n\n        if (containsEsc) {\n          this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n        }\n\n        return true;\n      }\n    }, {\n      key: \"tsParseTypeAnnotation\",\n      value: function tsParseTypeAnnotation() {\n        var _this21 = this;\n\n        var eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n        this.tsInType(function () {\n          if (eatColon) _this21.expect(types.colon);\n          t.typeAnnotation = _this21.tsParseType();\n        });\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n    }, {\n      key: \"tsParseType\",\n      value: function tsParseType() {\n        assert(this.state.inType);\n        var type = this.tsParseNonConditionalType();\n\n        if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n          return type;\n        }\n\n        var node = this.startNodeAtNode(type);\n        node.checkType = type;\n        node.extendsType = this.tsParseNonConditionalType();\n        this.expect(types.question);\n        node.trueType = this.tsParseType();\n        this.expect(types.colon);\n        node.falseType = this.tsParseType();\n        return this.finishNode(node, \"TSConditionalType\");\n      }\n    }, {\n      key: \"tsParseNonConditionalType\",\n      value: function tsParseNonConditionalType() {\n        if (this.tsIsStartOfFunctionType()) {\n          return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n        }\n\n        if (this.match(types._new)) {\n          return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n        }\n\n        return this.tsParseUnionTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseTypeAssertion\",\n      value: function tsParseTypeAssertion() {\n        var node = this.startNode();\n\n        var _const = this.tsTryNextParseConstantContext();\n\n        node.typeAnnotation = _const || this.tsNextThenParseType();\n        this.expectRelational(\">\");\n        node.expression = this.parseMaybeUnary();\n        return this.finishNode(node, \"TSTypeAssertion\");\n      }\n    }, {\n      key: \"tsParseHeritageClause\",\n      value: function tsParseHeritageClause(descriptor) {\n        var originalStart = this.state.start;\n        var delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n        if (!delimitedList.length) {\n          this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n        }\n\n        return delimitedList;\n      }\n    }, {\n      key: \"tsParseExpressionWithTypeArguments\",\n      value: function tsParseExpressionWithTypeArguments() {\n        var node = this.startNode();\n        node.expression = this.tsParseEntityName(false);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n      }\n    }, {\n      key: \"tsParseInterfaceDeclaration\",\n      value: function tsParseInterfaceDeclaration(node) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n        node.typeParameters = this.tsTryParseTypeParameters();\n\n        if (this.eat(types._extends)) {\n          node.extends = this.tsParseHeritageClause(\"extends\");\n        }\n\n        var body = this.startNode();\n        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n        node.body = this.finishNode(body, \"TSInterfaceBody\");\n        return this.finishNode(node, \"TSInterfaceDeclaration\");\n      }\n    }, {\n      key: \"tsParseTypeAliasDeclaration\",\n      value: function tsParseTypeAliasDeclaration(node) {\n        var _this22 = this;\n\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n        node.typeParameters = this.tsTryParseTypeParameters();\n        node.typeAnnotation = this.tsInType(function () {\n          _this22.expect(types.eq);\n\n          if (_this22.isContextual(\"intrinsic\") && _this22.lookahead().type !== types.dot) {\n            var _node10 = _this22.startNode();\n\n            _this22.next();\n\n            return _this22.finishNode(_node10, \"TSIntrinsicKeyword\");\n          }\n\n          return _this22.tsParseType();\n        });\n        this.semicolon();\n        return this.finishNode(node, \"TSTypeAliasDeclaration\");\n      }\n    }, {\n      key: \"tsInNoContext\",\n      value: function tsInNoContext(cb) {\n        var oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      }\n    }, {\n      key: \"tsInType\",\n      value: function tsInType(cb) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n\n        try {\n          return cb();\n        } finally {\n          this.state.inType = oldInType;\n        }\n      }\n    }, {\n      key: \"tsEatThenParseType\",\n      value: function tsEatThenParseType(token) {\n        return !this.match(token) ? undefined : this.tsNextThenParseType();\n      }\n    }, {\n      key: \"tsExpectThenParseType\",\n      value: function tsExpectThenParseType(token) {\n        var _this23 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this23.expect(token);\n        });\n      }\n    }, {\n      key: \"tsNextThenParseType\",\n      value: function tsNextThenParseType() {\n        var _this24 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this24.next();\n        });\n      }\n    }, {\n      key: \"tsDoThenParseType\",\n      value: function tsDoThenParseType(cb) {\n        var _this25 = this;\n\n        return this.tsInType(function () {\n          cb();\n          return _this25.tsParseType();\n        });\n      }\n    }, {\n      key: \"tsParseEnumMember\",\n      value: function tsParseEnumMember() {\n        var node = this.startNode();\n        node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n        if (this.eat(types.eq)) {\n          node.initializer = this.parseMaybeAssignAllowIn();\n        }\n\n        return this.finishNode(node, \"TSEnumMember\");\n      }\n    }, {\n      key: \"tsParseEnumDeclaration\",\n      value: function tsParseEnumDeclaration(node, isConst) {\n        if (isConst) node.const = true;\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n        this.expect(types.braceL);\n        node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n        this.expect(types.braceR);\n        return this.finishNode(node, \"TSEnumDeclaration\");\n      }\n    }, {\n      key: \"tsParseModuleBlock\",\n      value: function tsParseModuleBlock() {\n        var node = this.startNode();\n        this.scope.enter(SCOPE_OTHER);\n        this.expect(types.braceL);\n        this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n        this.scope.exit();\n        return this.finishNode(node, \"TSModuleBlock\");\n      }\n    }, {\n      key: \"tsParseModuleOrNamespaceDeclaration\",\n      value: function tsParseModuleOrNamespaceDeclaration(node) {\n        var nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.parseIdentifier();\n\n        if (!nested) {\n          this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n        }\n\n        if (this.eat(types.dot)) {\n          var inner = this.startNode();\n          this.tsParseModuleOrNamespaceDeclaration(inner, true);\n          node.body = inner;\n        } else {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseAmbientExternalModuleDeclaration\",\n      value: function tsParseAmbientExternalModuleDeclaration(node) {\n        if (this.isContextual(\"global\")) {\n          node.global = true;\n          node.id = this.parseIdentifier();\n        } else if (this.match(types.string)) {\n          node.id = this.parseExprAtom();\n        } else {\n          this.unexpected();\n        }\n\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        } else {\n          this.semicolon();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseImportEqualsDeclaration\",\n      value: function tsParseImportEqualsDeclaration(node, isExport) {\n        node.isExport = isExport || false;\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n        this.expect(types.eq);\n        node.moduleReference = this.tsParseModuleReference();\n        this.semicolon();\n        return this.finishNode(node, \"TSImportEqualsDeclaration\");\n      }\n    }, {\n      key: \"tsIsExternalModuleReference\",\n      value: function tsIsExternalModuleReference() {\n        return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n      }\n    }, {\n      key: \"tsParseModuleReference\",\n      value: function tsParseModuleReference() {\n        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n      }\n    }, {\n      key: \"tsParseExternalModuleReference\",\n      value: function tsParseExternalModuleReference() {\n        var node = this.startNode();\n        this.expectContextual(\"require\");\n        this.expect(types.parenL);\n\n        if (!this.match(types.string)) {\n          throw this.unexpected();\n        }\n\n        node.expression = this.parseExprAtom();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"TSExternalModuleReference\");\n      }\n    }, {\n      key: \"tsLookAhead\",\n      value: function tsLookAhead(f) {\n        var state = this.state.clone();\n        var res = f();\n        this.state = state;\n        return res;\n      }\n    }, {\n      key: \"tsTryParseAndCatch\",\n      value: function tsTryParseAndCatch(f) {\n        var result = this.tryParse(function (abort) {\n          return f() || abort();\n        });\n        if (result.aborted || !result.node) return undefined;\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"tsTryParse\",\n      value: function tsTryParse(f) {\n        var state = this.state.clone();\n        var result = f();\n\n        if (result !== undefined && result !== false) {\n          return result;\n        } else {\n          this.state = state;\n          return undefined;\n        }\n      }\n    }, {\n      key: \"tsTryParseDeclare\",\n      value: function tsTryParseDeclare(nany) {\n        var _this26 = this;\n\n        if (this.isLineTerminator()) {\n          return;\n        }\n\n        var starttype = this.state.type;\n        var kind;\n\n        if (this.isContextual(\"let\")) {\n          starttype = types._var;\n          kind = \"let\";\n        }\n\n        return this.tsInDeclareContext(function () {\n          switch (starttype) {\n            case types._function:\n              nany.declare = true;\n              return _this26.parseFunctionStatement(nany, false, true);\n\n            case types._class:\n              nany.declare = true;\n              return _this26.parseClass(nany, true, false);\n\n            case types._const:\n              if (_this26.match(types._const) && _this26.isLookaheadContextual(\"enum\")) {\n                _this26.expect(types._const);\n\n                _this26.expectContextual(\"enum\");\n\n                return _this26.tsParseEnumDeclaration(nany, true);\n              }\n\n            case types._var:\n              kind = kind || _this26.state.value;\n              return _this26.parseVarStatement(nany, kind);\n\n            case types.name:\n              {\n                var value = _this26.state.value;\n\n                if (value === \"global\") {\n                  return _this26.tsParseAmbientExternalModuleDeclaration(nany);\n                } else {\n                  return _this26.tsParseDeclaration(nany, value, true);\n                }\n              }\n          }\n        });\n      }\n    }, {\n      key: \"tsTryParseExportDeclaration\",\n      value: function tsTryParseExportDeclaration() {\n        return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      }\n    }, {\n      key: \"tsParseExpressionStatement\",\n      value: function tsParseExpressionStatement(node, expr) {\n        switch (expr.name) {\n          case \"declare\":\n            {\n              var declaration = this.tsTryParseDeclare(node);\n\n              if (declaration) {\n                declaration.declare = true;\n                return declaration;\n              }\n\n              break;\n            }\n\n          case \"global\":\n            if (this.match(types.braceL)) {\n              this.scope.enter(SCOPE_TS_MODULE);\n              this.prodParam.enter(PARAM);\n              var mod = node;\n              mod.global = true;\n              mod.id = expr;\n              mod.body = this.tsParseModuleBlock();\n              this.scope.exit();\n              this.prodParam.exit();\n              return this.finishNode(mod, \"TSModuleDeclaration\");\n            }\n\n            break;\n\n          default:\n            return this.tsParseDeclaration(node, expr.name, false);\n        }\n      }\n    }, {\n      key: \"tsParseDeclaration\",\n      value: function tsParseDeclaration(node, value, next) {\n        switch (value) {\n          case \"abstract\":\n            if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n              var cls = node;\n              cls.abstract = true;\n\n              if (next) {\n                this.next();\n\n                if (!this.match(types._class)) {\n                  this.unexpected(null, types._class);\n                }\n              }\n\n              return this.parseClass(cls, true, false);\n            }\n\n            break;\n\n          case \"enum\":\n            if (next || this.match(types.name)) {\n              if (next) this.next();\n              return this.tsParseEnumDeclaration(node, false);\n            }\n\n            break;\n\n          case \"interface\":\n            if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              if (next) this.next();\n              return this.tsParseInterfaceDeclaration(node);\n            }\n\n            break;\n\n          case \"module\":\n            if (next) this.next();\n\n            if (this.match(types.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n\n            break;\n\n          case \"namespace\":\n            if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              if (next) this.next();\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n\n            break;\n\n          case \"type\":\n            if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n              if (next) this.next();\n              return this.tsParseTypeAliasDeclaration(node);\n            }\n\n            break;\n        }\n      }\n    }, {\n      key: \"tsCheckLineTerminatorAndMatch\",\n      value: function tsCheckLineTerminatorAndMatch(tokenType, next) {\n        return (next || this.match(tokenType)) && !this.isLineTerminator();\n      }\n    }, {\n      key: \"tsTryParseGenericAsyncArrowFunction\",\n      value: function tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n        var _this27 = this;\n\n        if (!this.isRelational(\"<\")) {\n          return undefined;\n        }\n\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        this.state.maybeInArrowParameters = true;\n        var res = this.tsTryParseAndCatch(function () {\n          var node = _this27.startNodeAt(startPos, startLoc);\n\n          node.typeParameters = _this27.tsParseTypeParameters();\n\n          _get(_getPrototypeOf(_class3.prototype), \"parseFunctionParams\", _this27).call(_this27, node);\n\n          node.returnType = _this27.tsTryParseTypeOrTypePredicateAnnotation();\n\n          _this27.expect(types.arrow);\n\n          return node;\n        });\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n        if (!res) {\n          return undefined;\n        }\n\n        return this.parseArrowExpression(res, null, true);\n      }\n    }, {\n      key: \"tsParseTypeArguments\",\n      value: function tsParseTypeArguments() {\n        var _this28 = this;\n\n        var node = this.startNode();\n        node.params = this.tsInType(function () {\n          return _this28.tsInNoContext(function () {\n            _this28.expectRelational(\"<\");\n\n            return _this28.tsParseDelimitedList(\"TypeParametersOrArguments\", _this28.tsParseType.bind(_this28));\n          });\n        });\n\n        if (node.params.length === 0) {\n          this.raise(node.start, TSErrors.EmptyTypeArguments);\n        }\n\n        this.state.exprAllowed = false;\n        this.expectRelational(\">\");\n        return this.finishNode(node, \"TSTypeParameterInstantiation\");\n      }\n    }, {\n      key: \"tsIsDeclarationStart\",\n      value: function tsIsDeclarationStart() {\n        if (this.match(types.name)) {\n          switch (this.state.value) {\n            case \"abstract\":\n            case \"declare\":\n            case \"enum\":\n            case \"interface\":\n            case \"module\":\n            case \"namespace\":\n            case \"type\":\n              return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.tsIsDeclarationStart()) return false;\n        return _get(_getPrototypeOf(_class3.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseAssignableListItem\",\n      value: function parseAssignableListItem(allowModifiers, decorators) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var accessibility;\n        var readonly = false;\n\n        if (allowModifiers !== undefined) {\n          accessibility = this.parseAccessModifier();\n          readonly = !!this.tsParseModifier([\"readonly\"]);\n\n          if (allowModifiers === false && (accessibility || readonly)) {\n            this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n          }\n        }\n\n        var left = this.parseMaybeDefault();\n        this.parseAssignableListItemTypes(left);\n        var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n        if (accessibility || readonly) {\n          var pp = this.startNodeAt(startPos, startLoc);\n\n          if (decorators.length) {\n            pp.decorators = decorators;\n          }\n\n          if (accessibility) pp.accessibility = accessibility;\n          if (readonly) pp.readonly = readonly;\n\n          if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n            this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n          }\n\n          pp.parameter = elt;\n          return this.finishNode(pp, \"TSParameterProperty\");\n        }\n\n        if (decorators.length) {\n          left.decorators = decorators;\n        }\n\n        return elt;\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(types.colon)) {\n          node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        }\n\n        var bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n        if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n          this.finishNode(node, bodilessType);\n          return;\n        }\n\n        if (bodilessType === \"TSDeclareFunction\" && this.state.isDeclareContext) {\n          this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n          if (node.declare) {\n            _get(_getPrototypeOf(_class3.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, bodilessType, isMethod);\n\n            return;\n          }\n        }\n\n        _get(_getPrototypeOf(_class3.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"registerFunctionStatementId\",\n      value: function registerFunctionStatementId(node) {\n        if (!node.body && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n        } else {\n          _get(_getPrototypeOf(_class3.prototype), \"registerFunctionStatementId\", this).apply(this, arguments);\n        }\n      }\n    }, {\n      key: \"tsCheckForInvalidTypeCasts\",\n      value: function tsCheckForInvalidTypeCasts(items) {\n        var _this29 = this;\n\n        items.forEach(function (node) {\n          if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n            _this29.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n          }\n        });\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isInParens) {\n        this.tsCheckForInvalidTypeCasts(exprList);\n        return exprList;\n      }\n    }, {\n      key: \"parseArrayLike\",\n      value: function parseArrayLike() {\n        var _get5;\n\n        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          args[_key7] = arguments[_key7];\n        }\n\n        var node = (_get5 = _get(_getPrototypeOf(_class3.prototype), \"parseArrayLike\", this)).call.apply(_get5, [this].concat(args));\n\n        if (node.type === \"ArrayExpression\") {\n          this.tsCheckForInvalidTypeCasts(node.elements);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        var _this30 = this;\n\n        if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n          this.state.exprAllowed = false;\n          this.next();\n          var nonNullExpression = this.startNodeAt(startPos, startLoc);\n          nonNullExpression.expression = base;\n          return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n        }\n\n        if (this.isRelational(\"<\")) {\n          var result = this.tsTryParseAndCatch(function () {\n            if (!noCalls && _this30.atPossibleAsyncArrow(base)) {\n              var asyncArrowFn = _this30.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n              if (asyncArrowFn) {\n                return asyncArrowFn;\n              }\n            }\n\n            var node = _this30.startNodeAt(startPos, startLoc);\n\n            node.callee = base;\n\n            var typeArguments = _this30.tsParseTypeArguments();\n\n            if (typeArguments) {\n              if (!noCalls && _this30.eat(types.parenL)) {\n                node.arguments = _this30.parseCallExpressionArguments(types.parenR, false);\n\n                _this30.tsCheckForInvalidTypeCasts(node.arguments);\n\n                node.typeParameters = typeArguments;\n                return _this30.finishCallExpression(node, state.optionalChainMember);\n              } else if (_this30.match(types.backQuote)) {\n                var _result = _this30.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n\n                _result.typeParameters = typeArguments;\n                return _result;\n              }\n            }\n\n            _this30.unexpected();\n          });\n          if (result) return result;\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n      }\n    }, {\n      key: \"parseNewArguments\",\n      value: function parseNewArguments(node) {\n        var _this31 = this;\n\n        if (this.isRelational(\"<\")) {\n          var typeParameters = this.tsTryParseAndCatch(function () {\n            var args = _this31.tsParseTypeArguments();\n\n            if (!_this31.match(types.parenL)) _this31.unexpected();\n            return args;\n          });\n\n          if (typeParameters) {\n            node.typeParameters = typeParameters;\n          }\n        }\n\n        _get(_getPrototypeOf(_class3.prototype), \"parseNewArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExprOp\",\n      value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n        if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.expression = left;\n\n          var _const = this.tsTryNextParseConstantContext();\n\n          if (_const) {\n            node.typeAnnotation = _const;\n          } else {\n            node.typeAnnotation = this.tsNextThenParseType();\n          }\n\n          this.finishNode(node, \"TSAsExpression\");\n          this.reScan_lt_gt();\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"parseExprOp\", this).call(this, left, leftStartPos, leftStartLoc, minPrec);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n    }, {\n      key: \"checkDuplicateExports\",\n      value: function checkDuplicateExports() {}\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n          var ahead = this.lookahead();\n\n          if (this.match(types.name) && ahead.type === types.eq) {\n            return this.tsParseImportEqualsDeclaration(node);\n          }\n\n          if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n            node.importKind = \"type\";\n            this.next();\n          }\n        }\n\n        if (!node.importKind) {\n          node.importKind = \"value\";\n        }\n\n        var importNode = _get(_getPrototypeOf(_class3.prototype), \"parseImport\", this).call(this, node);\n\n        if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n          this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n        }\n\n        return importNode;\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        if (this.match(types._import)) {\n          this.expect(types._import);\n          return this.tsParseImportEqualsDeclaration(node, true);\n        } else if (this.eat(types.eq)) {\n          var assign = node;\n          assign.expression = this.parseExpression();\n          this.semicolon();\n          return this.finishNode(assign, \"TSExportAssignment\");\n        } else if (this.eatContextual(\"as\")) {\n          var decl = node;\n          this.expectContextual(\"namespace\");\n          decl.id = this.parseIdentifier();\n          this.semicolon();\n          return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n        } else {\n          if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n            this.next();\n            node.exportKind = \"type\";\n          } else {\n            node.exportKind = \"value\";\n          }\n\n          return _get(_getPrototypeOf(_class3.prototype), \"parseExport\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"isAbstractClass\",\n      value: function isAbstractClass() {\n        return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.isAbstractClass()) {\n          var cls = this.startNode();\n          this.next();\n          this.parseClass(cls, true, true);\n          cls.abstract = true;\n          return cls;\n        }\n\n        if (this.state.value === \"interface\") {\n          var result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n          if (result) return result;\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseStatementContent\",\n      value: function parseStatementContent(context, topLevel) {\n        if (this.state.type === types._const) {\n          var ahead = this.lookahead();\n\n          if (ahead.type === types.name && ahead.value === \"enum\") {\n            var node = this.startNode();\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(node, true);\n          }\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"parseStatementContent\", this).call(this, context, topLevel);\n      }\n    }, {\n      key: \"parseAccessModifier\",\n      value: function parseAccessModifier() {\n        return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state) {\n        var _this32 = this;\n\n        this.tsParseModifiers(member, [\"declare\"]);\n        var accessibility = this.parseAccessModifier();\n        if (accessibility) member.accessibility = accessibility;\n        this.tsParseModifiers(member, [\"declare\"]);\n\n        var callParseClassMember = function callParseClassMember() {\n          _get(_getPrototypeOf(_class3.prototype), \"parseClassMember\", _this32).call(_this32, classBody, member, state);\n        };\n\n        if (member.declare) {\n          this.tsInDeclareContext(callParseClassMember);\n        } else {\n          callParseClassMember();\n        }\n      }\n    }, {\n      key: \"parseClassMemberWithIsStatic\",\n      value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n        this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n        var idx = this.tsTryParseIndexSignature(member);\n\n        if (idx) {\n          classBody.body.push(idx);\n\n          if (member.abstract) {\n            this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n          }\n\n          if (isStatic) {\n            this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n          }\n\n          if (member.accessibility) {\n            this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n          }\n\n          if (member.declare) {\n            this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n          }\n\n          return;\n        }\n\n        _get(_getPrototypeOf(_class3.prototype), \"parseClassMemberWithIsStatic\", this).call(this, classBody, member, state, isStatic);\n      }\n    }, {\n      key: \"parsePostMemberNameModifiers\",\n      value: function parsePostMemberNameModifiers(methodOrProp) {\n        var optional = this.eat(types.question);\n        if (optional) methodOrProp.optional = true;\n\n        if (methodOrProp.readonly && this.match(types.parenL)) {\n          this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n        }\n\n        if (methodOrProp.declare && this.match(types.parenL)) {\n          this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n        }\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        var decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n        return decl || _get(_getPrototypeOf(_class3.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        if (this.tsIsDeclarationStart()) return true;\n        return _get(_getPrototypeOf(_class3.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n        var _this33 = this;\n\n        if (!refNeedsArrowPos || !this.match(types.question)) {\n          return _get(_getPrototypeOf(_class3.prototype), \"parseConditional\", this).call(this, expr, startPos, startLoc, refNeedsArrowPos);\n        }\n\n        var result = this.tryParse(function () {\n          return _get(_getPrototypeOf(_class3.prototype), \"parseConditional\", _this33).call(_this33, expr, startPos, startLoc);\n        });\n\n        if (!result.node) {\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = _get(_getPrototypeOf(_class3.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(types.colon)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var isDeclare = this.eatContextual(\"declare\");\n        var declaration;\n\n        if (this.match(types.name)) {\n          declaration = this.tsTryParseExportDeclaration();\n        }\n\n        if (!declaration) {\n          declaration = _get(_getPrototypeOf(_class3.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n\n        if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n          node.exportKind = \"type\";\n        }\n\n        if (declaration && isDeclare) {\n          this.resetStartLocation(declaration, startPos, startLoc);\n          declaration.declare = true;\n        }\n\n        return declaration;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n          return;\n        }\n\n        _get(_getPrototypeOf(_class3.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) node.typeParameters = typeParameters;\n      }\n    }, {\n      key: \"parseClassPropertyAnnotation\",\n      value: function parseClassPropertyAnnotation(node) {\n        if (!node.optional && this.eat(types.bang)) {\n          node.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        this.parseClassPropertyAnnotation(node);\n\n        if (this.state.isDeclareContext && this.match(types.eq)) {\n          this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (node.abstract) {\n          this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n        }\n\n        if (node.accessibility) {\n          this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n        }\n\n        this.parseClassPropertyAnnotation(node);\n        return _get(_getPrototypeOf(_class3.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        var typeParameters = this.tsTryParseTypeParameters();\n\n        if (typeParameters && isConstructor) {\n          this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n        }\n\n        if (typeParameters) method.typeParameters = typeParameters;\n\n        _get(_getPrototypeOf(_class3.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) method.typeParameters = typeParameters;\n\n        _get(_getPrototypeOf(_class3.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        _get(_getPrototypeOf(_class3.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && this.isRelational(\"<\")) {\n          node.superTypeParameters = this.tsParseTypeArguments();\n        }\n\n        if (this.eatContextual(\"implements\")) {\n          node.implements = this.tsParseHeritageClause(\"implements\");\n        }\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop) {\n        var _get6;\n\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) prop.typeParameters = typeParameters;\n\n        for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n          args[_key8 - 1] = arguments[_key8];\n        }\n\n        (_get6 = _get(_getPrototypeOf(_class3.prototype), \"parseObjPropValue\", this)).call.apply(_get6, [this, prop].concat(args));\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) node.typeParameters = typeParameters;\n\n        _get(_getPrototypeOf(_class3.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        _get(_getPrototypeOf(_class3.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n          decl.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n\n        if (type) {\n          decl.id.typeAnnotation = type;\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(types.colon)) {\n          node.returnType = this.tsParseTypeAnnotation();\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign() {\n        var _this34 = this;\n\n        for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n          args[_key9] = arguments[_key9];\n        }\n\n        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n        var state;\n        var jsx;\n        var typeCast;\n\n        if (this.match(types.jsxTagStart)) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            var _get7;\n\n            return (_get7 = _get(_getPrototypeOf(_class3.prototype), \"parseMaybeAssign\", _this34)).call.apply(_get7, [_this34].concat(args));\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n\n          if (context[context.length - 1] === types$1.j_oTag) {\n            context.length -= 2;\n          } else if (context[context.length - 1] === types$1.j_expr) {\n            context.length -= 1;\n          }\n        }\n\n        if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n          var _get8;\n\n          return (_get8 = _get(_getPrototypeOf(_class3.prototype), \"parseMaybeAssign\", this)).call.apply(_get8, [this].concat(args));\n        }\n\n        var typeParameters;\n        state = state || this.state.clone();\n        var arrow = this.tryParse(function (abort) {\n          var _get9;\n\n          var _typeParameters;\n\n          typeParameters = _this34.tsParseTypeParameters();\n\n          var expr = (_get9 = _get(_getPrototypeOf(_class3.prototype), \"parseMaybeAssign\", _this34)).call.apply(_get9, [_this34].concat(args));\n\n          if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n            abort();\n          }\n\n          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n            _this34.resetStartLocationFromNode(expr, typeParameters);\n          }\n\n          expr.typeParameters = typeParameters;\n          return expr;\n        }, state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        if (!jsx) {\n          assert(!this.hasPlugin(\"jsx\"));\n          typeCast = this.tryParse(function () {\n            var _get10;\n\n            return (_get10 = _get(_getPrototypeOf(_class3.prototype), \"parseMaybeAssign\", _this34)).call.apply(_get10, [_this34].concat(args));\n          }, state);\n          if (!typeCast.error) return typeCast.node;\n        }\n\n        if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n          this.state = typeCast.failState;\n          return typeCast.node;\n        }\n\n        if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n        throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n      }\n    }, {\n      key: \"parseMaybeUnary\",\n      value: function parseMaybeUnary(refExpressionErrors) {\n        if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n          return this.tsParseTypeAssertion();\n        } else {\n          return _get(_getPrototypeOf(_class3.prototype), \"parseMaybeUnary\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this35 = this;\n\n        if (this.match(types.colon)) {\n          var result = this.tryParse(function (abort) {\n            var returnType = _this35.tsParseTypeOrTypePredicateAnnotation(types.colon);\n\n            if (_this35.canInsertSemicolon() || !_this35.match(types.arrow)) abort();\n            return returnType;\n          });\n          if (result.aborted) return;\n\n          if (!result.thrown) {\n            if (result.error) this.state = result.failState;\n            node.returnType = result.node;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(types.question)) {\n          if (param.type !== \"Identifier\" && !this.state.isDeclareContext && !this.state.inType) {\n            this.raise(param.start, TSErrors.PatternIsOptional);\n          }\n\n          param.optional = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) param.typeAnnotation = type;\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        switch (node.type) {\n          case \"TSTypeCastExpression\":\n            return _get(_getPrototypeOf(_class3.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node), isLHS);\n\n          case \"TSParameterProperty\":\n            return _get(_getPrototypeOf(_class3.prototype), \"toAssignable\", this).call(this, node, isLHS);\n\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n            node.expression = this.toAssignable(node.expression, isLHS);\n            return node;\n\n          default:\n            return _get(_getPrototypeOf(_class3.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr, contextDescription) {\n        var _get11;\n\n        for (var _len10 = arguments.length, args = new Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {\n          args[_key10 - 2] = arguments[_key10];\n        }\n\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            return;\n\n          case \"TSParameterProperty\":\n            this.checkLVal.apply(this, [expr.parameter, \"parameter property\"].concat(args));\n            return;\n\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n            this.checkLVal.apply(this, [expr.expression, contextDescription].concat(args));\n            return;\n\n          default:\n            (_get11 = _get(_getPrototypeOf(_class3.prototype), \"checkLVal\", this)).call.apply(_get11, [this, expr, contextDescription].concat(args));\n\n            return;\n        }\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        switch (this.state.type) {\n          case types._this:\n            return this.parseIdentifier(true);\n\n          default:\n            return _get(_getPrototypeOf(_class3.prototype), \"parseBindingAtom\", this).call(this);\n        }\n      }\n    }, {\n      key: \"parseMaybeDecoratorArguments\",\n      value: function parseMaybeDecoratorArguments(expr) {\n        if (this.isRelational(\"<\")) {\n          var typeArguments = this.tsParseTypeArguments();\n\n          if (this.match(types.parenL)) {\n            var call = _get(_getPrototypeOf(_class3.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n\n            call.typeParameters = typeArguments;\n            return call;\n          }\n\n          this.unexpected(this.state.start, types.parenL);\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.isRelational(\"<\") || _get(_getPrototypeOf(_class3.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(types.bang) || this.match(types.colon) || _get(_getPrototypeOf(_class3.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault() {\n        var _get12;\n\n        for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n          args[_key11] = arguments[_key11];\n        }\n\n        var node = (_get12 = _get(_getPrototypeOf(_class3.prototype), \"parseMaybeDefault\", this)).call.apply(_get12, [this].concat(args));\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inType && (code === 62 || code === 60)) {\n          return this.finishOp(types.relational, 1);\n        } else {\n          return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"reScan_lt_gt\",\n      value: function reScan_lt_gt() {\n        if (this.match(types.relational)) {\n          var code = this.input.charCodeAt(this.state.start);\n\n          if (code === 60 || code === 62) {\n            this.state.pos -= 1;\n            this.readToken_lt_gt(code);\n          }\n        }\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n          if (!expr) continue;\n\n          switch (expr.type) {\n            case \"TSTypeCastExpression\":\n              exprList[i] = this.typeCastToParameter(expr);\n              break;\n\n            case \"TSAsExpression\":\n            case \"TSTypeAssertion\":\n              if (!this.state.maybeInArrowParameters) {\n                exprList[i] = this.typeCastToParameter(expr);\n              } else {\n                this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n              }\n\n              break;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"toAssignableList\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_class3.prototype), \"shouldParseArrow\", this).call(this);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(types.colon) || _get(_getPrototypeOf(_class3.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"canHaveLeadingDecorator\",\n      value: function canHaveLeadingDecorator() {\n        return _get(_getPrototypeOf(_class3.prototype), \"canHaveLeadingDecorator\", this).call(this) || this.isAbstractClass();\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var _this36 = this;\n\n        if (this.isRelational(\"<\")) {\n          var typeArguments = this.tsTryParseAndCatch(function () {\n            return _this36.tsParseTypeArguments();\n          });\n          if (typeArguments) node.typeParameters = typeArguments;\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"jsxParseOpeningElementAfterName\", this).call(this, node);\n      }\n    }, {\n      key: \"getGetterSetterExpectedParamCount\",\n      value: function getGetterSetterExpectedParamCount(method) {\n        var baseCount = _get(_getPrototypeOf(_class3.prototype), \"getGetterSetterExpectedParamCount\", this).call(this, method);\n\n        var params = this.getObjectOrClassMethodParams(method);\n        var firstParam = params[0];\n        var hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n        return hasContextParam ? baseCount + 1 : baseCount;\n      }\n    }, {\n      key: \"parseCatchClauseParam\",\n      value: function parseCatchClauseParam() {\n        var param = _get(_getPrototypeOf(_class3.prototype), \"parseCatchClauseParam\", this).call(this);\n\n        var type = this.tsTryParseTypeAnnotation();\n\n        if (type) {\n          param.typeAnnotation = type;\n          this.resetEndLocation(param);\n        }\n\n        return param;\n      }\n    }, {\n      key: \"tsInDeclareContext\",\n      value: function tsInDeclareContext(cb) {\n        var oldIsDeclareContext = this.state.isDeclareContext;\n        this.state.isDeclareContext = true;\n\n        try {\n          return cb();\n        } finally {\n          this.state.isDeclareContext = oldIsDeclareContext;\n        }\n      }\n    }]);\n\n    return _class3;\n  }(superClass);\n};\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\n\nvar placeholders = function placeholders(superClass) {\n  return /*#__PURE__*/function (_superClass5) {\n    _inherits(_class4, _superClass5);\n\n    var _super9 = _createSuper(_class4);\n\n    function _class4() {\n      _classCallCheck(this, _class4);\n\n      return _super9.apply(this, arguments);\n    }\n\n    _createClass(_class4, [{\n      key: \"parsePlaceholder\",\n      value: function parsePlaceholder(expectedNode) {\n        if (this.match(types.placeholder)) {\n          var node = this.startNode();\n          this.next();\n          this.assertNoSpace(\"Unexpected space in placeholder.\");\n          node.name = _get(_getPrototypeOf(_class4.prototype), \"parseIdentifier\", this).call(this, true);\n          this.assertNoSpace(\"Unexpected space in placeholder.\");\n          this.expect(types.placeholder);\n          return this.finishPlaceholder(node, expectedNode);\n        }\n      }\n    }, {\n      key: \"finishPlaceholder\",\n      value: function finishPlaceholder(node, expectedNode) {\n        var isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n        node.expectedNode = expectedNode;\n        return isFinished ? node : this.finishNode(node, \"Placeholder\");\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n          return this.finishOp(types.placeholder, 2);\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"getTokenFromCode\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parsePlaceholder(\"Expression\") || _get(_getPrototypeOf(_class4.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseIdentifier\",\n      value: function parseIdentifier() {\n        return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(_class4.prototype), \"parseIdentifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word) {\n        if (word !== undefined) _get(_getPrototypeOf(_class4.prototype), \"checkReservedWord\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        return this.parsePlaceholder(\"Pattern\") || _get(_getPrototypeOf(_class4.prototype), \"parseBindingAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        if (expr.type !== \"Placeholder\") _get(_getPrototypeOf(_class4.prototype), \"checkLVal\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n          node.expectedNode = \"Pattern\";\n          return node;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"verifyBreakContinue\",\n      value: function verifyBreakContinue(node) {\n        if (node.label && node.label.type === \"Placeholder\") return;\n\n        _get(_getPrototypeOf(_class4.prototype), \"verifyBreakContinue\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n          return _get(_getPrototypeOf(_class4.prototype), \"parseExpressionStatement\", this).apply(this, arguments);\n        }\n\n        if (this.match(types.colon)) {\n          var stmt = node;\n          stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n          this.next();\n          stmt.body = this.parseStatement(\"label\");\n          return this.finishNode(stmt, \"LabeledStatement\");\n        }\n\n        this.semicolon();\n        node.name = expr.name;\n        return this.finishPlaceholder(node, \"Statement\");\n      }\n    }, {\n      key: \"parseBlock\",\n      value: function parseBlock() {\n        return this.parsePlaceholder(\"BlockStatement\") || _get(_getPrototypeOf(_class4.prototype), \"parseBlock\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseFunctionId\",\n      value: function parseFunctionId() {\n        return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(_class4.prototype), \"parseFunctionId\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node, isStatement, optionalId) {\n        var type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n        this.next();\n        this.takeDecorators(node);\n        var oldStrict = this.state.strict;\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n\n        if (placeholder) {\n          if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n            node.id = placeholder;\n          } else if (optionalId || !isStatement) {\n            node.id = null;\n            node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n            return this.finishNode(node, type);\n          } else {\n            this.unexpected(null, \"A class name is required\");\n          }\n        } else {\n          this.parseClassId(node, isStatement, optionalId);\n        }\n\n        this.parseClassSuper(node);\n        node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return _get(_getPrototypeOf(_class4.prototype), \"parseExport\", this).apply(this, arguments);\n\n        if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n          node.specifiers = [];\n          node.source = null;\n          node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        }\n\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = placeholder;\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return _get(_getPrototypeOf(_class4.prototype), \"parseExport\", this).call(this, node);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(types._default)) {\n          var next = this.nextTokenStart();\n\n          if (this.isUnparsedContextual(next, \"from\")) {\n            if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n              return true;\n            }\n          }\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"maybeParseExportDefaultSpecifier\",\n      value: function maybeParseExportDefaultSpecifier(node) {\n        if (node.specifiers && node.specifiers.length > 0) {\n          return true;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"maybeParseExportDefaultSpecifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkExport\",\n      value: function checkExport(node) {\n        var specifiers = node.specifiers;\n\n        if (specifiers == null ? void 0 : specifiers.length) {\n          node.specifiers = specifiers.filter(function (node) {\n            return node.exported.type === \"Placeholder\";\n          });\n        }\n\n        _get(_getPrototypeOf(_class4.prototype), \"checkExport\", this).call(this, node);\n\n        node.specifiers = specifiers;\n      }\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return _get(_getPrototypeOf(_class4.prototype), \"parseImport\", this).apply(this, arguments);\n        node.specifiers = [];\n\n        if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n          node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n          this.semicolon();\n          return this.finishNode(node, \"ImportDeclaration\");\n        }\n\n        var specifier = this.startNodeAtNode(placeholder);\n        specifier.local = placeholder;\n        this.finishNode(specifier, \"ImportDefaultSpecifier\");\n        node.specifiers.push(specifier);\n\n        if (this.eat(types.comma)) {\n          var hasStarImport = this.maybeParseStarImportSpecifier(node);\n          if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n        }\n\n        this.expectContextual(\"from\");\n        node.source = this.parseImportSource();\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n    }, {\n      key: \"parseImportSource\",\n      value: function parseImportSource() {\n        return this.parsePlaceholder(\"StringLiteral\") || _get(_getPrototypeOf(_class4.prototype), \"parseImportSource\", this).apply(this, arguments);\n      }\n    }]);\n\n    return _class4;\n  }(superClass);\n};\n\nvar v8intrinsic = function v8intrinsic(superClass) {\n  return /*#__PURE__*/function (_superClass6) {\n    _inherits(_class5, _superClass6);\n\n    var _super10 = _createSuper(_class5);\n\n    function _class5() {\n      _classCallCheck(this, _class5);\n\n      return _super10.apply(this, arguments);\n    }\n\n    _createClass(_class5, [{\n      key: \"parseV8Intrinsic\",\n      value: function parseV8Intrinsic() {\n        if (this.match(types.modulo)) {\n          var v8IntrinsicStart = this.state.start;\n          var node = this.startNode();\n          this.eat(types.modulo);\n\n          if (this.match(types.name)) {\n            var name = this.parseIdentifierName(this.state.start);\n            var identifier = this.createIdentifier(node, name);\n            identifier.type = \"V8IntrinsicIdentifier\";\n\n            if (this.match(types.parenL)) {\n              return identifier;\n            }\n          }\n\n          this.unexpected(v8IntrinsicStart);\n        }\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parseV8Intrinsic() || _get(_getPrototypeOf(_class5.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }]);\n\n    return _class5;\n  }(superClass);\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  var plugin = plugins.find(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nvar PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nvar RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    var decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n    }\n\n    var moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(\", \"));\n  }\n}\n\nvar mixinPlugins = {\n  estree: estree,\n  jsx: jsx,\n  flow: flow,\n  typescript: typescript,\n  v8intrinsic: v8intrinsic,\n  placeholders: placeholders\n};\nvar mixinPluginNames = Object.keys(mixinPlugins);\nvar defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar State = /*#__PURE__*/function () {\n  function State() {\n    _classCallCheck(this, State);\n\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.isDeclareContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  _createClass(State, [{\n    key: \"init\",\n    value: function init(options) {\n      this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n      this.curLine = options.startLine;\n      this.startLoc = this.endLoc = this.curPosition();\n    }\n  }, {\n    key: \"curPosition\",\n    value: function curPosition() {\n      return new Position(this.curLine, this.pos - this.lineStart);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(skipArrays) {\n      var state = new State();\n      var keys = Object.keys(this);\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var val = this[key];\n\n        if (!skipArrays && Array.isArray(val)) {\n          val = val.slice();\n        }\n\n        state[key] = val;\n      }\n\n      return state;\n    }\n  }]);\n\n  return State;\n}();\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nvar VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nvar forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nvar allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.bin), [50, 51, 52, 53, 54, 55]);\nallowedNumericSeparatorSiblings.dec = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.oct), [56, 57]);\nallowedNumericSeparatorSiblings.hex = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.dec), [65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102]);\n\nvar Token = function Token(state) {\n  _classCallCheck(this, Token);\n\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n};\n\nvar Tokenizer = /*#__PURE__*/function (_ParserError) {\n  _inherits(Tokenizer, _ParserError);\n\n  var _super11 = _createSuper(Tokenizer);\n\n  function Tokenizer(options, input) {\n    var _this37;\n\n    _classCallCheck(this, Tokenizer);\n\n    _this37 = _super11.call(this);\n    _this37.isLookahead = void 0;\n    _this37.tokens = [];\n    _this37.state = new State();\n\n    _this37.state.init(options);\n\n    _this37.input = input;\n    _this37.length = input.length;\n    _this37.isLookahead = false;\n    return _this37;\n  }\n\n  _createClass(Tokenizer, [{\n    key: \"pushToken\",\n    value: function pushToken(token) {\n      this.tokens.length = this.state.tokensLength;\n      this.tokens.push(token);\n      ++this.state.tokensLength;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (!this.isLookahead) {\n        this.checkKeywordEscapes();\n\n        if (this.options.tokens) {\n          this.pushToken(new Token(this.state));\n        }\n      }\n\n      this.state.lastTokEnd = this.state.end;\n      this.state.lastTokStart = this.state.start;\n      this.state.lastTokEndLoc = this.state.endLoc;\n      this.state.lastTokStartLoc = this.state.startLoc;\n      this.nextToken();\n    }\n  }, {\n    key: \"eat\",\n    value: function eat(type) {\n      if (this.match(type)) {\n        this.next();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(type) {\n      return this.state.type === type;\n    }\n  }, {\n    key: \"lookahead\",\n    value: function lookahead() {\n      var old = this.state;\n      this.state = old.clone(true);\n      this.isLookahead = true;\n      this.next();\n      this.isLookahead = false;\n      var curr = this.state;\n      this.state = old;\n      return curr;\n    }\n  }, {\n    key: \"nextTokenStart\",\n    value: function nextTokenStart() {\n      return this.nextTokenStartSince(this.state.pos);\n    }\n  }, {\n    key: \"nextTokenStartSince\",\n    value: function nextTokenStartSince(pos) {\n      skipWhiteSpace.lastIndex = pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      return pos + skip[0].length;\n    }\n  }, {\n    key: \"lookaheadCharCode\",\n    value: function lookaheadCharCode() {\n      return this.input.charCodeAt(this.nextTokenStart());\n    }\n  }, {\n    key: \"setStrict\",\n    value: function setStrict(strict) {\n      var _this38 = this;\n\n      this.state.strict = strict;\n\n      if (strict) {\n        this.state.strictErrors.forEach(function (message, pos) {\n          return _this38.raise(pos, message);\n        });\n        this.state.strictErrors.clear();\n      }\n    }\n  }, {\n    key: \"curContext\",\n    value: function curContext() {\n      return this.state.context[this.state.context.length - 1];\n    }\n  }, {\n    key: \"nextToken\",\n    value: function nextToken() {\n      var curContext = this.curContext();\n      if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n      this.state.start = this.state.pos;\n      this.state.startLoc = this.state.curPosition();\n\n      if (this.state.pos >= this.length) {\n        this.finishToken(types.eof);\n        return;\n      }\n\n      var override = curContext == null ? void 0 : curContext.override;\n\n      if (override) {\n        override(this);\n      } else {\n        this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n      }\n    }\n  }, {\n    key: \"pushComment\",\n    value: function pushComment(block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? \"CommentBlock\" : \"CommentLine\",\n        value: text,\n        start: start,\n        end: end,\n        loc: new SourceLocation(startLoc, endLoc)\n      };\n      if (this.options.tokens) this.pushToken(comment);\n      this.state.comments.push(comment);\n      this.addComment(comment);\n    }\n  }, {\n    key: \"skipBlockComment\",\n    value: function skipBlockComment() {\n      var startLoc = this.state.curPosition();\n      var start = this.state.pos;\n      var end = this.input.indexOf(\"*/\", this.state.pos + 2);\n      if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n      this.state.pos = end + 2;\n      lineBreakG.lastIndex = start;\n      var match;\n\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n        ++this.state.curLine;\n        this.state.lineStart = match.index + match[0].length;\n      }\n\n      if (this.isLookahead) return;\n      this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n    }\n  }, {\n    key: \"skipLineComment\",\n    value: function skipLineComment(startSkip) {\n      var start = this.state.pos;\n      var startLoc = this.state.curPosition();\n      var ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n      if (this.state.pos < this.length) {\n        while (!isNewLine(ch) && ++this.state.pos < this.length) {\n          ch = this.input.charCodeAt(this.state.pos);\n        }\n      }\n\n      if (this.isLookahead) return;\n      this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n    }\n  }, {\n    key: \"skipSpace\",\n    value: function skipSpace() {\n      loop: while (this.state.pos < this.length) {\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case 32:\n          case 160:\n          case 9:\n            ++this.state.pos;\n            break;\n\n          case 13:\n            if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n          case 8232:\n          case 8233:\n            ++this.state.pos;\n            ++this.state.curLine;\n            this.state.lineStart = this.state.pos;\n            break;\n\n          case 47:\n            switch (this.input.charCodeAt(this.state.pos + 1)) {\n              case 42:\n                this.skipBlockComment();\n                break;\n\n              case 47:\n                this.skipLineComment(2);\n                break;\n\n              default:\n                break loop;\n            }\n\n            break;\n\n          default:\n            if (isWhitespace(ch)) {\n              ++this.state.pos;\n            } else {\n              break loop;\n            }\n\n        }\n      }\n    }\n  }, {\n    key: \"finishToken\",\n    value: function finishToken(type, val) {\n      this.state.end = this.state.pos;\n      this.state.endLoc = this.state.curPosition();\n      var prevType = this.state.type;\n      this.state.type = type;\n      this.state.value = val;\n      if (!this.isLookahead) this.updateContext(prevType);\n    }\n  }, {\n    key: \"readToken_numberSign\",\n    value: function readToken_numberSign() {\n      if (this.state.pos === 0 && this.readToken_interpreter()) {\n        return;\n      }\n\n      var nextPos = this.state.pos + 1;\n      var next = this.input.charCodeAt(nextPos);\n\n      if (next >= 48 && next <= 57) {\n        throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n      }\n\n      if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n        this.expectPlugin(\"recordAndTuple\");\n\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n          throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n        }\n\n        if (next === 123) {\n          this.finishToken(types.braceHashL);\n        } else {\n          this.finishToken(types.bracketHashL);\n        }\n\n        this.state.pos += 2;\n      } else {\n        this.finishOp(types.hash, 1);\n      }\n    }\n  }, {\n    key: \"readToken_dot\",\n    value: function readToken_dot() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next >= 48 && next <= 57) {\n        this.readNumber(true);\n        return;\n      }\n\n      if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n        this.state.pos += 3;\n        this.finishToken(types.ellipsis);\n      } else {\n        ++this.state.pos;\n        this.finishToken(types.dot);\n      }\n    }\n  }, {\n    key: \"readToken_slash\",\n    value: function readToken_slash() {\n      if (this.state.exprAllowed && !this.state.inType) {\n        ++this.state.pos;\n        this.readRegexp();\n        return;\n      }\n\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n      } else {\n        this.finishOp(types.slash, 1);\n      }\n    }\n  }, {\n    key: \"readToken_interpreter\",\n    value: function readToken_interpreter() {\n      if (this.state.pos !== 0 || this.length < 2) return false;\n      var ch = this.input.charCodeAt(this.state.pos + 1);\n      if (ch !== 33) return false;\n      var start = this.state.pos;\n      this.state.pos += 1;\n\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n\n      var value = this.input.slice(start + 2, this.state.pos);\n      this.finishToken(types.interpreterDirective, value);\n      return true;\n    }\n  }, {\n    key: \"readToken_mult_modulo\",\n    value: function readToken_mult_modulo(code) {\n      var type = code === 42 ? types.star : types.modulo;\n      var width = 1;\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var exprAllowed = this.state.exprAllowed;\n\n      if (code === 42 && next === 42) {\n        width++;\n        next = this.input.charCodeAt(this.state.pos + 2);\n        type = types.exponent;\n      }\n\n      if (next === 61 && !exprAllowed) {\n        width++;\n        type = types.assign;\n      }\n\n      this.finishOp(type, width);\n    }\n  }, {\n    key: \"readToken_pipe_amp\",\n    value: function readToken_pipe_amp(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n          this.finishOp(types.assign, 3);\n        } else {\n          this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n        }\n\n        return;\n      }\n\n      if (code === 124) {\n        if (next === 62) {\n          this.finishOp(types.pipeline, 2);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n          }\n\n          this.finishOp(types.braceBarR, 2);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n          }\n\n          this.finishOp(types.bracketBarR, 2);\n          return;\n        }\n      }\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n        return;\n      }\n\n      this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n    }\n  }, {\n    key: \"readToken_caret\",\n    value: function readToken_caret() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n      } else {\n        this.finishOp(types.bitwiseXOR, 1);\n      }\n    }\n  }, {\n    key: \"readToken_plus_min\",\n    value: function readToken_plus_min(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n          this.skipLineComment(3);\n          this.skipSpace();\n          this.nextToken();\n          return;\n        }\n\n        this.finishOp(types.incDec, 2);\n        return;\n      }\n\n      if (next === 61) {\n        this.finishOp(types.assign, 2);\n      } else {\n        this.finishOp(types.plusMin, 1);\n      }\n    }\n  }, {\n    key: \"readToken_lt_gt\",\n    value: function readToken_lt_gt(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var size = 1;\n\n      if (next === code) {\n        size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n        if (this.input.charCodeAt(this.state.pos + size) === 61) {\n          this.finishOp(types.assign, size + 1);\n          return;\n        }\n\n        this.finishOp(types.bitShift, size);\n        return;\n      }\n\n      if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n        this.skipLineComment(4);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      if (next === 61) {\n        size = 2;\n      }\n\n      this.finishOp(types.relational, size);\n    }\n  }, {\n    key: \"readToken_eq_excl\",\n    value: function readToken_eq_excl(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n        return;\n      }\n\n      if (code === 61 && next === 62) {\n        this.state.pos += 2;\n        this.finishToken(types.arrow);\n        return;\n      }\n\n      this.finishOp(code === 61 ? types.eq : types.bang, 1);\n    }\n  }, {\n    key: \"readToken_question\",\n    value: function readToken_question() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var next2 = this.input.charCodeAt(this.state.pos + 2);\n\n      if (next === 63) {\n        if (next2 === 61) {\n          this.finishOp(types.assign, 3);\n        } else {\n          this.finishOp(types.nullishCoalescing, 2);\n        }\n      } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n        this.state.pos += 2;\n        this.finishToken(types.questionDot);\n      } else {\n        ++this.state.pos;\n        this.finishToken(types.question);\n      }\n    }\n  }, {\n    key: \"getTokenFromCode\",\n    value: function getTokenFromCode(code) {\n      switch (code) {\n        case 46:\n          this.readToken_dot();\n          return;\n\n        case 40:\n          ++this.state.pos;\n          this.finishToken(types.parenL);\n          return;\n\n        case 41:\n          ++this.state.pos;\n          this.finishToken(types.parenR);\n          return;\n\n        case 59:\n          ++this.state.pos;\n          this.finishToken(types.semi);\n          return;\n\n        case 44:\n          ++this.state.pos;\n          this.finishToken(types.comma);\n          return;\n\n        case 91:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n            }\n\n            this.finishToken(types.bracketBarL);\n            this.state.pos += 2;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.bracketL);\n          }\n\n          return;\n\n        case 93:\n          ++this.state.pos;\n          this.finishToken(types.bracketR);\n          return;\n\n        case 123:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n            }\n\n            this.finishToken(types.braceBarL);\n            this.state.pos += 2;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.braceL);\n          }\n\n          return;\n\n        case 125:\n          ++this.state.pos;\n          this.finishToken(types.braceR);\n          return;\n\n        case 58:\n          if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n            this.finishOp(types.doubleColon, 2);\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.colon);\n          }\n\n          return;\n\n        case 63:\n          this.readToken_question();\n          return;\n\n        case 96:\n          ++this.state.pos;\n          this.finishToken(types.backQuote);\n          return;\n\n        case 48:\n          {\n            var next = this.input.charCodeAt(this.state.pos + 1);\n\n            if (next === 120 || next === 88) {\n              this.readRadixNumber(16);\n              return;\n            }\n\n            if (next === 111 || next === 79) {\n              this.readRadixNumber(8);\n              return;\n            }\n\n            if (next === 98 || next === 66) {\n              this.readRadixNumber(2);\n              return;\n            }\n          }\n\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          this.readNumber(false);\n          return;\n\n        case 34:\n        case 39:\n          this.readString(code);\n          return;\n\n        case 47:\n          this.readToken_slash();\n          return;\n\n        case 37:\n        case 42:\n          this.readToken_mult_modulo(code);\n          return;\n\n        case 124:\n        case 38:\n          this.readToken_pipe_amp(code);\n          return;\n\n        case 94:\n          this.readToken_caret();\n          return;\n\n        case 43:\n        case 45:\n          this.readToken_plus_min(code);\n          return;\n\n        case 60:\n        case 62:\n          this.readToken_lt_gt(code);\n          return;\n\n        case 61:\n        case 33:\n          this.readToken_eq_excl(code);\n          return;\n\n        case 126:\n          this.finishOp(types.tilde, 1);\n          return;\n\n        case 64:\n          ++this.state.pos;\n          this.finishToken(types.at);\n          return;\n\n        case 35:\n          this.readToken_numberSign();\n          return;\n\n        case 92:\n          this.readWord();\n          return;\n\n        default:\n          if (isIdentifierStart(code)) {\n            this.readWord();\n            return;\n          }\n\n      }\n\n      throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n    }\n  }, {\n    key: \"finishOp\",\n    value: function finishOp(type, size) {\n      var str = this.input.slice(this.state.pos, this.state.pos + size);\n      this.state.pos += size;\n      this.finishToken(type, str);\n    }\n  }, {\n    key: \"readRegexp\",\n    value: function readRegexp() {\n      var start = this.state.pos;\n      var escaped, inClass;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n        }\n\n        var ch = this.input.charAt(this.state.pos);\n\n        if (lineBreak.test(ch)) {\n          throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n        }\n\n        if (escaped) {\n          escaped = false;\n        } else {\n          if (ch === \"[\") {\n            inClass = true;\n          } else if (ch === \"]\" && inClass) {\n            inClass = false;\n          } else if (ch === \"/\" && !inClass) {\n            break;\n          }\n\n          escaped = ch === \"\\\\\";\n        }\n\n        ++this.state.pos;\n      }\n\n      var content = this.input.slice(start, this.state.pos);\n      ++this.state.pos;\n      var mods = \"\";\n\n      while (this.state.pos < this.length) {\n        var char = this.input[this.state.pos];\n        var charCode = this.input.codePointAt(this.state.pos);\n\n        if (VALID_REGEX_FLAGS.has(char)) {\n          if (mods.indexOf(char) > -1) {\n            this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n          }\n        } else if (isIdentifierChar(charCode) || charCode === 92) {\n          this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n        } else {\n          break;\n        }\n\n        ++this.state.pos;\n        mods += char;\n      }\n\n      this.finishToken(types.regexp, {\n        pattern: content,\n        flags: mods\n      });\n    }\n  }, {\n    key: \"readInt\",\n    value: function readInt(radix, len, forceLen) {\n      var allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var start = this.state.pos;\n      var forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n      var allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n      var invalid = false;\n      var total = 0;\n\n      for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n        var code = this.input.charCodeAt(this.state.pos);\n        var val = void 0;\n\n        if (code === 95) {\n          var prev = this.input.charCodeAt(this.state.pos - 1);\n          var next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n          } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n\n        if (code >= 97) {\n          val = code - 97 + 10;\n        } else if (code >= 65) {\n          val = code - 65 + 10;\n        } else if (_isDigit(code)) {\n          val = code - 48;\n        } else {\n          val = Infinity;\n        }\n\n        if (val >= radix) {\n          if (this.options.errorRecovery && val <= 9) {\n            val = 0;\n            this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n          } else if (forceLen) {\n            val = 0;\n            invalid = true;\n          } else {\n            break;\n          }\n        }\n\n        ++this.state.pos;\n        total = total * radix + val;\n      }\n\n      if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n        return null;\n      }\n\n      return total;\n    }\n  }, {\n    key: \"readRadixNumber\",\n    value: function readRadixNumber(radix) {\n      var start = this.state.pos;\n      var isBigInt = false;\n      this.state.pos += 2;\n      var val = this.readInt(radix);\n\n      if (val == null) {\n        this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      } else if (next === 109) {\n        throw this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n        throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n      }\n\n      if (isBigInt) {\n        var str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n        this.finishToken(types.bigint, str);\n        return;\n      }\n\n      this.finishToken(types.num, val);\n    }\n  }, {\n    key: \"readNumber\",\n    value: function readNumber(startsWithDot) {\n      var start = this.state.pos;\n      var isFloat = false;\n      var isBigInt = false;\n      var isDecimal = false;\n      var hasExponent = false;\n      var isOctal = false;\n\n      if (!startsWithDot && this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidNumber);\n      }\n\n      var hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n      if (hasLeadingZero) {\n        var integer = this.input.slice(start, this.state.pos);\n        this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n        if (!this.state.strict) {\n          var underscorePos = integer.indexOf(\"_\");\n\n          if (underscorePos > 0) {\n            this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n          }\n        }\n\n        isOctal = hasLeadingZero && !/[89]/.test(integer);\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 46 && !isOctal) {\n        ++this.state.pos;\n        this.readInt(10);\n        isFloat = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if ((next === 69 || next === 101) && !isOctal) {\n        next = this.input.charCodeAt(++this.state.pos);\n\n        if (next === 43 || next === 45) {\n          ++this.state.pos;\n        }\n\n        if (this.readInt(10) === null) {\n          this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n        }\n\n        isFloat = true;\n        hasExponent = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if (next === 110) {\n        if (isFloat || hasLeadingZero) {\n          this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n        }\n\n        ++this.state.pos;\n        isBigInt = true;\n      }\n\n      if (next === 109) {\n        this.expectPlugin(\"decimal\", this.state.pos);\n\n        if (hasExponent || hasLeadingZero) {\n          this.raise(start, ErrorMessages.InvalidDecimal);\n        }\n\n        ++this.state.pos;\n        isDecimal = true;\n      }\n\n      if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n        throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n      }\n\n      var str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n      if (isBigInt) {\n        this.finishToken(types.bigint, str);\n        return;\n      }\n\n      if (isDecimal) {\n        this.finishToken(types.decimal, str);\n        return;\n      }\n\n      var val = isOctal ? parseInt(str, 8) : parseFloat(str);\n      this.finishToken(types.num, val);\n    }\n  }, {\n    key: \"readCodePoint\",\n    value: function readCodePoint(throwOnInvalid) {\n      var ch = this.input.charCodeAt(this.state.pos);\n      var code;\n\n      if (ch === 123) {\n        var codePos = ++this.state.pos;\n        code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n        ++this.state.pos;\n\n        if (code !== null && code > 0x10ffff) {\n          if (throwOnInvalid) {\n            this.raise(codePos, ErrorMessages.InvalidCodePoint);\n          } else {\n            return null;\n          }\n        }\n      } else {\n        code = this.readHexChar(4, false, throwOnInvalid);\n      }\n\n      return code;\n    }\n  }, {\n    key: \"readString\",\n    value: function readString(quote) {\n      var out = \"\",\n          chunkStart = ++this.state.pos;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.readEscapedChar(false);\n          chunkStart = this.state.pos;\n        } else if (ch === 8232 || ch === 8233) {\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n        } else {\n          ++this.state.pos;\n        }\n      }\n\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(types.string, out);\n    }\n  }, {\n    key: \"readTmplToken\",\n    value: function readTmplToken() {\n      var out = \"\",\n          chunkStart = this.state.pos,\n          containsInvalid = false;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n          if (this.state.pos === this.state.start && this.match(types.template)) {\n            if (ch === 36) {\n              this.state.pos += 2;\n              this.finishToken(types.dollarBraceL);\n              return;\n            } else {\n              ++this.state.pos;\n              this.finishToken(types.backQuote);\n              return;\n            }\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(types.template, containsInvalid ? null : out);\n          return;\n        }\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          var escaped = this.readEscapedChar(true);\n\n          if (escaped === null) {\n            containsInvalid = true;\n          } else {\n            out += escaped;\n          }\n\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          ++this.state.pos;\n\n          switch (ch) {\n            case 13:\n              if (this.input.charCodeAt(this.state.pos) === 10) {\n                ++this.state.pos;\n              }\n\n            case 10:\n              out += \"\\n\";\n              break;\n\n            default:\n              out += String.fromCharCode(ch);\n              break;\n          }\n\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n    }\n  }, {\n    key: \"recordStrictModeErrors\",\n    value: function recordStrictModeErrors(pos, message) {\n      if (this.state.strict && !this.state.strictErrors.has(pos)) {\n        this.raise(pos, message);\n      } else {\n        this.state.strictErrors.set(pos, message);\n      }\n    }\n  }, {\n    key: \"readEscapedChar\",\n    value: function readEscapedChar(inTemplate) {\n      var throwOnInvalid = !inTemplate;\n      var ch = this.input.charCodeAt(++this.state.pos);\n      ++this.state.pos;\n\n      switch (ch) {\n        case 110:\n          return \"\\n\";\n\n        case 114:\n          return \"\\r\";\n\n        case 120:\n          {\n            var code = this.readHexChar(2, false, throwOnInvalid);\n            return code === null ? null : String.fromCharCode(code);\n          }\n\n        case 117:\n          {\n            var _code = this.readCodePoint(throwOnInvalid);\n\n            return _code === null ? null : String.fromCodePoint(_code);\n          }\n\n        case 116:\n          return \"\\t\";\n\n        case 98:\n          return \"\\b\";\n\n        case 118:\n          return \"\\x0B\";\n\n        case 102:\n          return \"\\f\";\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n          this.state.lineStart = this.state.pos;\n          ++this.state.curLine;\n\n        case 8232:\n        case 8233:\n          return \"\";\n\n        case 56:\n        case 57:\n          if (inTemplate) {\n            return null;\n          } else {\n            this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n          }\n\n        default:\n          if (ch >= 48 && ch <= 55) {\n            var codePos = this.state.pos - 1;\n            var match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n            var octalStr = match[0];\n            var octal = parseInt(octalStr, 8);\n\n            if (octal > 255) {\n              octalStr = octalStr.slice(0, -1);\n              octal = parseInt(octalStr, 8);\n            }\n\n            this.state.pos += octalStr.length - 1;\n            var next = this.input.charCodeAt(this.state.pos);\n\n            if (octalStr !== \"0\" || next === 56 || next === 57) {\n              if (inTemplate) {\n                return null;\n              } else {\n                this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n              }\n            }\n\n            return String.fromCharCode(octal);\n          }\n\n          return String.fromCharCode(ch);\n      }\n    }\n  }, {\n    key: \"readHexChar\",\n    value: function readHexChar(len, forceLen, throwOnInvalid) {\n      var codePos = this.state.pos;\n      var n = this.readInt(16, len, forceLen, false);\n\n      if (n === null) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n        } else {\n          this.state.pos = codePos - 1;\n        }\n      }\n\n      return n;\n    }\n  }, {\n    key: \"readWord1\",\n    value: function readWord1() {\n      var word = \"\";\n      this.state.containsEsc = false;\n      var start = this.state.pos;\n      var chunkStart = this.state.pos;\n\n      while (this.state.pos < this.length) {\n        var ch = this.input.codePointAt(this.state.pos);\n\n        if (isIdentifierChar(ch)) {\n          this.state.pos += ch <= 0xffff ? 1 : 2;\n        } else if (this.state.isIterator && ch === 64) {\n          ++this.state.pos;\n        } else if (ch === 92) {\n          this.state.containsEsc = true;\n          word += this.input.slice(chunkStart, this.state.pos);\n          var escStart = this.state.pos;\n          var identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n          if (this.input.charCodeAt(++this.state.pos) !== 117) {\n            this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n            continue;\n          }\n\n          ++this.state.pos;\n          var esc = this.readCodePoint(true);\n\n          if (esc !== null) {\n            if (!identifierCheck(esc)) {\n              this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n            }\n\n            word += String.fromCodePoint(esc);\n          }\n\n          chunkStart = this.state.pos;\n        } else {\n          break;\n        }\n      }\n\n      return word + this.input.slice(chunkStart, this.state.pos);\n    }\n  }, {\n    key: \"isIterator\",\n    value: function isIterator(word) {\n      return word === \"@@iterator\" || word === \"@@asyncIterator\";\n    }\n  }, {\n    key: \"readWord\",\n    value: function readWord() {\n      var word = this.readWord1();\n      var type = keywords.get(word) || types.name;\n\n      if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n        this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n      }\n\n      this.finishToken(type, word);\n    }\n  }, {\n    key: \"checkKeywordEscapes\",\n    value: function checkKeywordEscapes() {\n      var kw = this.state.type.keyword;\n\n      if (kw && this.state.containsEsc) {\n        this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n      }\n    }\n  }, {\n    key: \"braceIsBlock\",\n    value: function braceIsBlock(prevType) {\n      var parent = this.curContext();\n\n      if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n        return true;\n      }\n\n      if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n        return !parent.isExpr;\n      }\n\n      if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n        return this.hasPrecedingLineBreak();\n      }\n\n      if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n        return true;\n      }\n\n      if (prevType === types.braceL) {\n        return parent === types$1.braceStatement;\n      }\n\n      if (prevType === types._var || prevType === types._const || prevType === types.name) {\n        return false;\n      }\n\n      if (prevType === types.relational) {\n        return true;\n      }\n\n      return !this.state.exprAllowed;\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(prevType) {\n      var type = this.state.type;\n      var update;\n\n      if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n        this.state.exprAllowed = false;\n      } else if (update = type.updateContext) {\n        update.call(this, prevType);\n      } else {\n        this.state.exprAllowed = type.beforeExpr;\n      }\n    }\n  }]);\n\n  return Tokenizer;\n}(ParserError);\n\nvar UtilParser = /*#__PURE__*/function (_Tokenizer) {\n  _inherits(UtilParser, _Tokenizer);\n\n  var _super12 = _createSuper(UtilParser);\n\n  function UtilParser() {\n    _classCallCheck(this, UtilParser);\n\n    return _super12.apply(this, arguments);\n  }\n\n  _createClass(UtilParser, [{\n    key: \"addExtra\",\n    value: function addExtra(node, key, val) {\n      if (!node) return;\n      var extra = node.extra = node.extra || {};\n      extra[key] = val;\n    }\n  }, {\n    key: \"isRelational\",\n    value: function isRelational(op) {\n      return this.match(types.relational) && this.state.value === op;\n    }\n  }, {\n    key: \"expectRelational\",\n    value: function expectRelational(op) {\n      if (this.isRelational(op)) {\n        this.next();\n      } else {\n        this.unexpected(null, types.relational);\n      }\n    }\n  }, {\n    key: \"isContextual\",\n    value: function isContextual(name) {\n      return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n    }\n  }, {\n    key: \"isUnparsedContextual\",\n    value: function isUnparsedContextual(nameStart, name) {\n      var nameEnd = nameStart + name.length;\n      return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n    }\n  }, {\n    key: \"isLookaheadContextual\",\n    value: function isLookaheadContextual(name) {\n      var next = this.nextTokenStart();\n      return this.isUnparsedContextual(next, name);\n    }\n  }, {\n    key: \"eatContextual\",\n    value: function eatContextual(name) {\n      return this.isContextual(name) && this.eat(types.name);\n    }\n  }, {\n    key: \"expectContextual\",\n    value: function expectContextual(name, message) {\n      if (!this.eatContextual(name)) this.unexpected(null, message);\n    }\n  }, {\n    key: \"canInsertSemicolon\",\n    value: function canInsertSemicolon() {\n      return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n    }\n  }, {\n    key: \"hasPrecedingLineBreak\",\n    value: function hasPrecedingLineBreak() {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n  }, {\n    key: \"isLineTerminator\",\n    value: function isLineTerminator() {\n      return this.eat(types.semi) || this.canInsertSemicolon();\n    }\n  }, {\n    key: \"semicolon\",\n    value: function semicolon() {\n      if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n    }\n  }, {\n    key: \"expect\",\n    value: function expect(type, pos) {\n      this.eat(type) || this.unexpected(pos, type);\n    }\n  }, {\n    key: \"assertNoSpace\",\n    value: function assertNoSpace() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n      if (this.state.start > this.state.lastTokEnd) {\n        this.raise(this.state.lastTokEnd, message);\n      }\n    }\n  }, {\n    key: \"unexpected\",\n    value: function unexpected(pos) {\n      var messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Unexpected token\";\n\n      if (typeof messageOrType !== \"string\") {\n        messageOrType = \"Unexpected token, expected \\\"\".concat(messageOrType.label, \"\\\"\");\n      }\n\n      throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    }\n  }, {\n    key: \"expectPlugin\",\n    value: function expectPlugin(name, pos) {\n      if (!this.hasPlugin(name)) {\n        throw this.raiseWithData(pos != null ? pos : this.state.start, {\n          missingPlugin: [name]\n        }, \"This experimental syntax requires enabling the parser plugin: '\".concat(name, \"'\"));\n      }\n\n      return true;\n    }\n  }, {\n    key: \"expectOnePlugin\",\n    value: function expectOnePlugin(names, pos) {\n      var _this39 = this;\n\n      if (!names.some(function (n) {\n        return _this39.hasPlugin(n);\n      })) {\n        throw this.raiseWithData(pos != null ? pos : this.state.start, {\n          missingPlugin: names\n        }, \"This experimental syntax requires enabling one of the following parser plugin(s): '\".concat(names.join(\", \"), \"'\"));\n      }\n    }\n  }, {\n    key: \"tryParse\",\n    value: function tryParse(fn) {\n      var oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n      var abortSignal = {\n        node: null\n      };\n\n      try {\n        var node = fn(function () {\n          var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          abortSignal.node = node;\n          throw abortSignal;\n        });\n\n        if (this.state.errors.length > oldState.errors.length) {\n          var failState = this.state;\n          this.state = oldState;\n          return {\n            node: node,\n            error: failState.errors[oldState.errors.length],\n            thrown: false,\n            aborted: false,\n            failState: failState\n          };\n        }\n\n        return {\n          node: node,\n          error: null,\n          thrown: false,\n          aborted: false,\n          failState: null\n        };\n      } catch (error) {\n        var _failState = this.state;\n        this.state = oldState;\n\n        if (error instanceof SyntaxError) {\n          return {\n            node: null,\n            error: error,\n            thrown: true,\n            aborted: false,\n            failState: _failState\n          };\n        }\n\n        if (error === abortSignal) {\n          return {\n            node: abortSignal.node,\n            error: null,\n            thrown: false,\n            aborted: true,\n            failState: _failState\n          };\n        }\n\n        throw error;\n      }\n    }\n  }, {\n    key: \"checkExpressionErrors\",\n    value: function checkExpressionErrors(refExpressionErrors, andThrow) {\n      if (!refExpressionErrors) return false;\n      var shorthandAssign = refExpressionErrors.shorthandAssign,\n          doubleProto = refExpressionErrors.doubleProto;\n      if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n      if (shorthandAssign >= 0) {\n        this.unexpected(shorthandAssign);\n      }\n\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, ErrorMessages.DuplicateProto);\n      }\n    }\n  }, {\n    key: \"isLiteralPropertyName\",\n    value: function isLiteralPropertyName() {\n      return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n    }\n  }, {\n    key: \"isPrivateName\",\n    value: function isPrivateName(node) {\n      return node.type === \"PrivateName\";\n    }\n  }, {\n    key: \"getPrivateNameSV\",\n    value: function getPrivateNameSV(node) {\n      return node.id.name;\n    }\n  }, {\n    key: \"hasPropertyAsPrivateName\",\n    value: function hasPropertyAsPrivateName(node) {\n      return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n    }\n  }, {\n    key: \"isOptionalChain\",\n    value: function isOptionalChain(node) {\n      return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n    }\n  }, {\n    key: \"isObjectProperty\",\n    value: function isObjectProperty(node) {\n      return node.type === \"ObjectProperty\";\n    }\n  }, {\n    key: \"isObjectMethod\",\n    value: function isObjectMethod(node) {\n      return node.type === \"ObjectMethod\";\n    }\n  }]);\n\n  return UtilParser;\n}(Tokenizer);\n\nvar ExpressionErrors = function ExpressionErrors() {\n  _classCallCheck(this, ExpressionErrors);\n\n  this.shorthandAssign = -1;\n  this.doubleProto = -1;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(parser, pos, loc) {\n    _classCallCheck(this, Node);\n\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  _createClass(Node, [{\n    key: \"__clone\",\n    value: function __clone() {\n      var newNode = new Node();\n      var keys = Object.keys(this);\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n\n        if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n          newNode[key] = this[key];\n        }\n      }\n\n      return newNode;\n    }\n  }]);\n\n  return Node;\n}();\n\nvar NodeUtils = /*#__PURE__*/function (_UtilParser) {\n  _inherits(NodeUtils, _UtilParser);\n\n  var _super13 = _createSuper(NodeUtils);\n\n  function NodeUtils() {\n    _classCallCheck(this, NodeUtils);\n\n    return _super13.apply(this, arguments);\n  }\n\n  _createClass(NodeUtils, [{\n    key: \"startNode\",\n    value: function startNode() {\n      return new Node(this, this.state.start, this.state.startLoc);\n    }\n  }, {\n    key: \"startNodeAt\",\n    value: function startNodeAt(pos, loc) {\n      return new Node(this, pos, loc);\n    }\n  }, {\n    key: \"startNodeAtNode\",\n    value: function startNodeAtNode(type) {\n      return this.startNodeAt(type.start, type.loc.start);\n    }\n  }, {\n    key: \"finishNode\",\n    value: function finishNode(node, type) {\n      return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n    }\n  }, {\n    key: \"finishNodeAt\",\n    value: function finishNodeAt(node, type, pos, loc) {\n      node.type = type;\n      node.end = pos;\n      node.loc.end = loc;\n      if (this.options.ranges) node.range[1] = pos;\n      this.processComment(node);\n      return node;\n    }\n  }, {\n    key: \"resetStartLocation\",\n    value: function resetStartLocation(node, start, startLoc) {\n      node.start = start;\n      node.loc.start = startLoc;\n      if (this.options.ranges) node.range[0] = start;\n    }\n  }, {\n    key: \"resetEndLocation\",\n    value: function resetEndLocation(node) {\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEnd;\n      var endLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.lastTokEndLoc;\n      node.end = end;\n      node.loc.end = endLoc;\n      if (this.options.ranges) node.range[1] = end;\n    }\n  }, {\n    key: \"resetStartLocationFromNode\",\n    value: function resetStartLocationFromNode(node, locationNode) {\n      this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n    }\n  }]);\n\n  return NodeUtils;\n}(UtilParser);\n\nvar unwrapParenthesizedExpression = function unwrapParenthesizedExpression(node) {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nvar LValParser = /*#__PURE__*/function (_NodeUtils) {\n  _inherits(LValParser, _NodeUtils);\n\n  var _super14 = _createSuper(LValParser);\n\n  function LValParser() {\n    _classCallCheck(this, LValParser);\n\n    return _super14.apply(this, arguments);\n  }\n\n  _createClass(LValParser, [{\n    key: \"toAssignable\",\n    value: function toAssignable(node) {\n      var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _node$extra, _node$extra3;\n\n      var parenthesized = undefined;\n\n      if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n        parenthesized = unwrapParenthesizedExpression(node);\n\n        if (isLHS) {\n          if (parenthesized.type === \"Identifier\") {\n            this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n          } else if (parenthesized.type !== \"MemberExpression\") {\n            this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n          }\n        } else {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      }\n\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (var i = 0, length = node.properties.length, _last2 = length - 1; i < length; i++) {\n            var _node$extra2;\n\n            var prop = node.properties[i];\n            var isLast = i === _last2;\n            this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n            if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n              this.raiseRestNotLast(node.extra.trailingComma);\n            }\n          }\n\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value, isLHS);\n          break;\n\n        case \"SpreadElement\":\n          {\n            this.checkToRestConversion(node);\n            node.type = \"RestElement\";\n            var arg = node.argument;\n            this.toAssignable(arg, isLHS);\n            break;\n          }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator !== \"=\") {\n            this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n          }\n\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          this.toAssignable(node.left, isLHS);\n          break;\n\n        case \"ParenthesizedExpression\":\n          this.toAssignable(parenthesized, isLHS);\n          break;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"toAssignableObjectExpressionProp\",\n    value: function toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n      if (prop.type === \"ObjectMethod\") {\n        var error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n        this.raise(prop.key.start, error);\n      } else if (prop.type === \"SpreadElement\" && !isLast) {\n        this.raiseRestNotLast(prop.start);\n      } else {\n        this.toAssignable(prop, isLHS);\n      }\n    }\n  }, {\n    key: \"toAssignableList\",\n    value: function toAssignableList(exprList, trailingCommaPos, isLHS) {\n      var end = exprList.length;\n\n      if (end) {\n        var _last3 = exprList[end - 1];\n\n        if ((_last3 == null ? void 0 : _last3.type) === \"RestElement\") {\n          --end;\n        } else if ((_last3 == null ? void 0 : _last3.type) === \"SpreadElement\") {\n          _last3.type = \"RestElement\";\n          var arg = _last3.argument;\n          this.toAssignable(arg, isLHS);\n          arg = unwrapParenthesizedExpression(arg);\n\n          if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n            this.unexpected(arg.start);\n          }\n\n          if (trailingCommaPos) {\n            this.raiseTrailingCommaAfterRest(trailingCommaPos);\n          }\n\n          --end;\n        }\n      }\n\n      for (var i = 0; i < end; i++) {\n        var elt = exprList[i];\n\n        if (elt) {\n          this.toAssignable(elt, isLHS);\n\n          if (elt.type === \"RestElement\") {\n            this.raiseRestNotLast(elt.start);\n          }\n        }\n      }\n\n      return exprList;\n    }\n  }, {\n    key: \"toReferencedList\",\n    value: function toReferencedList(exprList, isParenthesizedExpr) {\n      return exprList;\n    }\n  }, {\n    key: \"toReferencedListDeep\",\n    value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n      this.toReferencedList(exprList, isParenthesizedExpr);\n\n      for (var _i = 0; _i < exprList.length; _i++) {\n        var expr = exprList[_i];\n\n        if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n          this.toReferencedListDeep(expr.elements);\n        }\n      }\n    }\n  }, {\n    key: \"parseSpread\",\n    value: function parseSpread(refExpressionErrors, refNeedsArrowPos) {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n      return this.finishNode(node, \"SpreadElement\");\n    }\n  }, {\n    key: \"parseRestBinding\",\n    value: function parseRestBinding() {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseBindingAtom();\n      return this.finishNode(node, \"RestElement\");\n    }\n  }, {\n    key: \"parseBindingAtom\",\n    value: function parseBindingAtom() {\n      switch (this.state.type) {\n        case types.bracketL:\n          {\n            var node = this.startNode();\n            this.next();\n            node.elements = this.parseBindingList(types.bracketR, 93, true);\n            return this.finishNode(node, \"ArrayPattern\");\n          }\n\n        case types.braceL:\n          return this.parseObjectLike(types.braceR, true);\n      }\n\n      return this.parseIdentifier();\n    }\n  }, {\n    key: \"parseBindingList\",\n    value: function parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n        }\n\n        if (allowEmpty && this.match(types.comma)) {\n          elts.push(null);\n        } else if (this.eat(close)) {\n          break;\n        } else if (this.match(types.ellipsis)) {\n          elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n          this.checkCommaAfterRest(closeCharCode);\n          this.expect(close);\n          break;\n        } else {\n          var decorators = [];\n\n          if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n          }\n\n          while (this.match(types.at)) {\n            decorators.push(this.parseDecorator());\n          }\n\n          elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n        }\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseAssignableListItem\",\n    value: function parseAssignableListItem(allowModifiers, decorators) {\n      var left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseAssignableListItemTypes\",\n    value: function parseAssignableListItemTypes(param) {\n      return param;\n    }\n  }, {\n    key: \"parseMaybeDefault\",\n    value: function parseMaybeDefault(startPos, startLoc, left) {\n      var _startLoc, _startPos, _left;\n\n      startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n      startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n      left = (_left = left) != null ? _left : this.parseBindingAtom();\n      if (!this.eat(types.eq)) return left;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.left = left;\n      node.right = this.parseMaybeAssignAllowIn();\n      return this.finishNode(node, \"AssignmentPattern\");\n    }\n  }, {\n    key: \"checkLVal\",\n    value: function checkLVal(expr, contextDescription) {\n      var bindingType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BIND_NONE;\n      var checkClashes = arguments.length > 3 ? arguments[3] : undefined;\n      var disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n      var strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n      switch (expr.type) {\n        case \"Identifier\":\n          {\n            var name = expr.name;\n\n            if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n              this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n            }\n\n            if (checkClashes) {\n              if (checkClashes.has(name)) {\n                this.raise(expr.start, ErrorMessages.ParamDupe);\n              } else {\n                checkClashes.add(name);\n              }\n            }\n\n            if (disallowLetBinding && name === \"let\") {\n              this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n            }\n\n            if (!(bindingType & BIND_NONE)) {\n              this.scope.declareName(name, bindingType, expr.start);\n            }\n\n            break;\n          }\n\n        case \"MemberExpression\":\n          if (bindingType !== BIND_NONE) {\n            this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n          }\n\n          break;\n\n        case \"ObjectPattern\":\n          for (var _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n            var prop = _expr$properties[_i2];\n            if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n            this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n\n          break;\n\n        case \"ArrayPattern\":\n          for (var _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n            var elem = _expr$elements[_i3];\n\n            if (elem) {\n              this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n            }\n          }\n\n          break;\n\n        case \"AssignmentPattern\":\n          this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n          break;\n\n        case \"RestElement\":\n          this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n          break;\n\n        case \"ParenthesizedExpression\":\n          this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n          break;\n\n        default:\n          {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n          }\n      }\n    }\n  }, {\n    key: \"checkToRestConversion\",\n    value: function checkToRestConversion(node) {\n      if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n        this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n      }\n    }\n  }, {\n    key: \"checkCommaAfterRest\",\n    value: function checkCommaAfterRest(close) {\n      if (this.match(types.comma)) {\n        if (this.lookaheadCharCode() === close) {\n          this.raiseTrailingCommaAfterRest(this.state.start);\n        } else {\n          this.raiseRestNotLast(this.state.start);\n        }\n      }\n    }\n  }, {\n    key: \"raiseRestNotLast\",\n    value: function raiseRestNotLast(pos) {\n      throw this.raise(pos, ErrorMessages.ElementAfterRest);\n    }\n  }, {\n    key: \"raiseTrailingCommaAfterRest\",\n    value: function raiseTrailingCommaAfterRest(pos) {\n      this.raise(pos, ErrorMessages.RestTrailingComma);\n    }\n  }]);\n\n  return LValParser;\n}(NodeUtils);\n\nvar kExpression = 0,\n    kMaybeArrowParameterDeclaration = 1,\n    kMaybeAsyncArrowParameterDeclaration = 2,\n    kParameterDeclaration = 3;\n\nvar ExpressionScope = /*#__PURE__*/function () {\n  function ExpressionScope() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n\n    _classCallCheck(this, ExpressionScope);\n\n    this.type = void 0;\n    this.type = type;\n  }\n\n  _createClass(ExpressionScope, [{\n    key: \"canBeArrowParameterDeclaration\",\n    value: function canBeArrowParameterDeclaration() {\n      return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n    }\n  }, {\n    key: \"isCertainlyParameterDeclaration\",\n    value: function isCertainlyParameterDeclaration() {\n      return this.type === kParameterDeclaration;\n    }\n  }]);\n\n  return ExpressionScope;\n}();\n\nvar ArrowHeadParsingScope = /*#__PURE__*/function (_ExpressionScope) {\n  _inherits(ArrowHeadParsingScope, _ExpressionScope);\n\n  var _super15 = _createSuper(ArrowHeadParsingScope);\n\n  function ArrowHeadParsingScope(type) {\n    var _this40;\n\n    _classCallCheck(this, ArrowHeadParsingScope);\n\n    _this40 = _super15.call(this, type);\n    _this40.errors = new Map();\n    return _this40;\n  }\n\n  _createClass(ArrowHeadParsingScope, [{\n    key: \"recordDeclarationError\",\n    value: function recordDeclarationError(pos, message) {\n      this.errors.set(pos, message);\n    }\n  }, {\n    key: \"clearDeclarationError\",\n    value: function clearDeclarationError(pos) {\n      this.errors.delete(pos);\n    }\n  }, {\n    key: \"iterateErrors\",\n    value: function iterateErrors(iterator) {\n      this.errors.forEach(iterator);\n    }\n  }]);\n\n  return ArrowHeadParsingScope;\n}(ExpressionScope);\n\nvar ExpressionScopeHandler = /*#__PURE__*/function () {\n  function ExpressionScopeHandler(raise) {\n    _classCallCheck(this, ExpressionScopeHandler);\n\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  _createClass(ExpressionScopeHandler, [{\n    key: \"enter\",\n    value: function enter(scope) {\n      this.stack.push(scope);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stack.pop();\n    }\n  }, {\n    key: \"recordParameterInitializerError\",\n    value: function recordParameterInitializerError(pos, message) {\n      var stack = this.stack;\n      var i = stack.length - 1;\n      var scope = stack[i];\n\n      while (!scope.isCertainlyParameterDeclaration()) {\n        if (scope.canBeArrowParameterDeclaration()) {\n          scope.recordDeclarationError(pos, message);\n        } else {\n          return;\n        }\n\n        scope = stack[--i];\n      }\n\n      this.raise(pos, message);\n    }\n  }, {\n    key: \"recordParenthesizedIdentifierError\",\n    value: function recordParenthesizedIdentifierError(pos, message) {\n      var stack = this.stack;\n      var scope = stack[stack.length - 1];\n\n      if (scope.isCertainlyParameterDeclaration()) {\n        this.raise(pos, message);\n      } else if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, message);\n      } else {\n        return;\n      }\n    }\n  }, {\n    key: \"recordAsyncArrowParametersError\",\n    value: function recordAsyncArrowParametersError(pos, message) {\n      var stack = this.stack;\n      var i = stack.length - 1;\n      var scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n          scope.recordDeclarationError(pos, message);\n        }\n\n        scope = stack[--i];\n      }\n    }\n  }, {\n    key: \"validateAsPattern\",\n    value: function validateAsPattern() {\n      var _this41 = this;\n\n      var stack = this.stack;\n      var currentScope = stack[stack.length - 1];\n      if (!currentScope.canBeArrowParameterDeclaration()) return;\n      currentScope.iterateErrors(function (message, pos) {\n        _this41.raise(pos, message);\n\n        var i = stack.length - 2;\n        var scope = stack[i];\n\n        while (scope.canBeArrowParameterDeclaration()) {\n          scope.clearDeclarationError(pos);\n          scope = stack[--i];\n        }\n      });\n    }\n  }]);\n\n  return ExpressionScopeHandler;\n}();\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nvar ExpressionParser = /*#__PURE__*/function (_LValParser) {\n  _inherits(ExpressionParser, _LValParser);\n\n  var _super16 = _createSuper(ExpressionParser);\n\n  function ExpressionParser() {\n    _classCallCheck(this, ExpressionParser);\n\n    return _super16.apply(this, arguments);\n  }\n\n  _createClass(ExpressionParser, [{\n    key: \"checkProto\",\n    value: function checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n      if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n        return;\n      }\n\n      var key = prop.key;\n      var name = key.type === \"Identifier\" ? key.name : key.value;\n\n      if (name === \"__proto__\") {\n        if (isRecord) {\n          this.raise(key.start, ErrorMessages.RecordNoProto);\n          return;\n        }\n\n        if (protoRef.used) {\n          if (refExpressionErrors) {\n            if (refExpressionErrors.doubleProto === -1) {\n              refExpressionErrors.doubleProto = key.start;\n            }\n          } else {\n            this.raise(key.start, ErrorMessages.DuplicateProto);\n          }\n        }\n\n        protoRef.used = true;\n      }\n    }\n  }, {\n    key: \"shouldExitDescending\",\n    value: function shouldExitDescending(expr, potentialArrowAt) {\n      return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n    }\n  }, {\n    key: \"getExpression\",\n    value: function getExpression() {\n      var paramFlags = PARAM;\n\n      if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n        paramFlags |= PARAM_AWAIT;\n      }\n\n      this.scope.enter(SCOPE_PROGRAM);\n      this.prodParam.enter(paramFlags);\n      this.nextToken();\n      var expr = this.parseExpression();\n\n      if (!this.match(types.eof)) {\n        this.unexpected();\n      }\n\n      expr.comments = this.state.comments;\n      expr.errors = this.state.errors;\n      return expr;\n    }\n  }, {\n    key: \"parseExpression\",\n    value: function parseExpression(disallowIn, refExpressionErrors) {\n      var _this42 = this;\n\n      if (disallowIn) {\n        return this.disallowInAnd(function () {\n          return _this42.parseExpressionBase(refExpressionErrors);\n        });\n      }\n\n      return this.allowInAnd(function () {\n        return _this42.parseExpressionBase(refExpressionErrors);\n      });\n    }\n  }, {\n    key: \"parseExpressionBase\",\n    value: function parseExpressionBase(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseMaybeAssign(refExpressionErrors);\n\n      if (this.match(types.comma)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.expressions = [expr];\n\n        while (this.eat(types.comma)) {\n          node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n        }\n\n        this.toReferencedList(node.expressions);\n        return this.finishNode(node, \"SequenceExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseMaybeAssignDisallowIn\",\n    value: function parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _this43 = this;\n\n      return this.disallowInAnd(function () {\n        return _this43.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n      });\n    }\n  }, {\n    key: \"parseMaybeAssignAllowIn\",\n    value: function parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _this44 = this;\n\n      return this.allowInAnd(function () {\n        return _this44.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n      });\n    }\n  }, {\n    key: \"parseMaybeAssign\",\n    value: function parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      if (this.isContextual(\"yield\")) {\n        if (this.prodParam.hasYield) {\n          this.state.exprAllowed = true;\n\n          var _left2 = this.parseYield();\n\n          if (afterLeftParse) {\n            _left2 = afterLeftParse.call(this, _left2, startPos, startLoc);\n          }\n\n          return _left2;\n        }\n      }\n\n      var ownExpressionErrors;\n\n      if (refExpressionErrors) {\n        ownExpressionErrors = false;\n      } else {\n        refExpressionErrors = new ExpressionErrors();\n        ownExpressionErrors = true;\n      }\n\n      if (this.match(types.parenL) || this.match(types.name)) {\n        this.state.potentialArrowAt = this.state.start;\n      }\n\n      var left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n      if (afterLeftParse) {\n        left = afterLeftParse.call(this, left, startPos, startLoc);\n      }\n\n      if (this.state.type.isAssign) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var operator = this.state.value;\n        node.operator = operator;\n\n        if (this.match(types.eq)) {\n          node.left = this.toAssignable(left, true);\n          refExpressionErrors.doubleProto = -1;\n        } else {\n          node.left = left;\n        }\n\n        if (refExpressionErrors.shorthandAssign >= node.left.start) {\n          refExpressionErrors.shorthandAssign = -1;\n        }\n\n        this.checkLVal(left, \"assignment expression\");\n        this.next();\n        node.right = this.parseMaybeAssign();\n        return this.finishNode(node, \"AssignmentExpression\");\n      } else if (ownExpressionErrors) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseMaybeConditional\",\n    value: function parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprOps(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n  }, {\n    key: \"parseConditional\",\n    value: function parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n      if (this.eat(types.question)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.test = expr;\n        node.consequent = this.parseMaybeAssignAllowIn();\n        this.expect(types.colon);\n        node.alternate = this.parseMaybeAssign();\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExprOps\",\n    value: function parseExprOps(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseMaybeUnary(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseExprOp(expr, startPos, startLoc, -1);\n    }\n  }, {\n    key: \"parseExprOp\",\n    value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n      var prec = this.state.type.binop;\n\n      if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n        if (prec > minPrec) {\n          var op = this.state.type;\n\n          if (op === types.pipeline) {\n            this.expectPlugin(\"pipelineOperator\");\n\n            if (this.state.inFSharpPipelineDirectBody) {\n              return left;\n            }\n\n            this.state.inPipeline = true;\n            this.checkPipelineAtInfixOperator(left, leftStartPos);\n          }\n\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.left = left;\n          node.operator = this.state.value;\n\n          if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n            this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n          }\n\n          var logical = op === types.logicalOR || op === types.logicalAND;\n          var coalesce = op === types.nullishCoalescing;\n\n          if (coalesce) {\n            prec = types.logicalAND.binop;\n          }\n\n          this.next();\n\n          if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n            if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n              throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n            }\n          }\n\n          node.right = this.parseExprOpRightExpr(op, prec);\n          this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n          var nextOp = this.state.type;\n\n          if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n            throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n          }\n\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n        }\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseExprOpRightExpr\",\n    value: function parseExprOpRightExpr(op, prec) {\n      var _this45 = this;\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      switch (op) {\n        case types.pipeline:\n          switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n            case \"smart\":\n              return this.withTopicPermittingContext(function () {\n                return _this45.parseSmartPipelineBody(_this45.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n              });\n\n            case \"fsharp\":\n              return this.withSoloAwaitPermittingContext(function () {\n                return _this45.parseFSharpPipelineBody(prec);\n              });\n          }\n\n        default:\n          return this.parseExprOpBaseRightExpr(op, prec);\n      }\n    }\n  }, {\n    key: \"parseExprOpBaseRightExpr\",\n    value: function parseExprOpBaseRightExpr(op, prec) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n    }\n  }, {\n    key: \"parseMaybeUnary\",\n    value: function parseMaybeUnary(refExpressionErrors) {\n      if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n        return this.parseAwait();\n      }\n\n      var update = this.match(types.incDec);\n      var node = this.startNode();\n\n      if (this.state.type.prefix) {\n        node.operator = this.state.value;\n        node.prefix = true;\n\n        if (this.match(types._throw)) {\n          this.expectPlugin(\"throwExpressions\");\n        }\n\n        var isDelete = this.match(types._delete);\n        this.next();\n        node.argument = this.parseMaybeUnary();\n        this.checkExpressionErrors(refExpressionErrors, true);\n\n        if (this.state.strict && isDelete) {\n          var arg = node.argument;\n\n          if (arg.type === \"Identifier\") {\n            this.raise(node.start, ErrorMessages.StrictDelete);\n          } else if (this.hasPropertyAsPrivateName(arg)) {\n            this.raise(node.start, ErrorMessages.DeletePrivateField);\n          }\n        }\n\n        if (!update) {\n          return this.finishNode(node, \"UnaryExpression\");\n        }\n      }\n\n      return this.parseUpdate(node, update, refExpressionErrors);\n    }\n  }, {\n    key: \"parseUpdate\",\n    value: function parseUpdate(node, update, refExpressionErrors) {\n      if (update) {\n        this.checkLVal(node.argument, \"prefix operation\");\n        return this.finishNode(node, \"UpdateExpression\");\n      }\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseExprSubscripts(refExpressionErrors);\n      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n      while (this.state.type.postfix && !this.canInsertSemicolon()) {\n        var _node11 = this.startNodeAt(startPos, startLoc);\n\n        _node11.operator = this.state.value;\n        _node11.prefix = false;\n        _node11.argument = expr;\n        this.checkLVal(expr, \"postfix operation\");\n        this.next();\n        expr = this.finishNode(_node11, \"UpdateExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExprSubscripts\",\n    value: function parseExprSubscripts(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprAtom(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseSubscripts(expr, startPos, startLoc);\n    }\n  }, {\n    key: \"parseSubscripts\",\n    value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n      var state = {\n        optionalChainMember: false,\n        maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n        stop: false\n      };\n\n      do {\n        base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n        state.maybeAsyncArrow = false;\n      } while (!state.stop);\n\n      return base;\n    }\n  }, {\n    key: \"parseSubscript\",\n    value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n      if (!noCalls && this.eat(types.doubleColon)) {\n        return this.parseBind(base, startPos, startLoc, noCalls, state);\n      } else if (this.match(types.backQuote)) {\n        return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n      }\n\n      var optional = false;\n\n      if (this.match(types.questionDot)) {\n        if (noCalls && this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n\n        state.optionalChainMember = optional = true;\n        this.next();\n      }\n\n      if (!noCalls && this.match(types.parenL)) {\n        return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n      } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n        return this.parseMember(base, startPos, startLoc, state, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }, {\n    key: \"parseMember\",\n    value: function parseMember(base, startPos, startLoc, state, optional) {\n      var node = this.startNodeAt(startPos, startLoc);\n      var computed = this.eat(types.bracketL);\n      node.object = base;\n      node.computed = computed;\n      var property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n      if (this.isPrivateName(property)) {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, ErrorMessages.SuperPrivateField);\n        }\n\n        this.classScope.usePrivateName(this.getPrivateNameSV(property), property.start);\n      }\n\n      node.property = property;\n\n      if (computed) {\n        this.expect(types.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    }\n  }, {\n    key: \"parseBind\",\n    value: function parseBind(base, startPos, startLoc, noCalls, state) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    }\n  }, {\n    key: \"parseCoverCallAndAsyncArrowHead\",\n    value: function parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n      this.next();\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.enter(newAsyncArrowScope());\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n      }\n\n      if (optional) {\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n      }\n\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n        this.expressionScope.validateAsPattern();\n        this.expressionScope.exit();\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n      } else {\n        if (state.maybeAsyncArrow) {\n          this.expressionScope.exit();\n        }\n\n        this.toReferencedArguments(node);\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    }\n  }, {\n    key: \"toReferencedArguments\",\n    value: function toReferencedArguments(node, isParenthesizedExpr) {\n      this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n    }\n  }, {\n    key: \"parseTaggedTemplateExpression\",\n    value: function parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate(true);\n\n      if (state.optionalChainMember) {\n        this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n      }\n\n      return this.finishNode(node, \"TaggedTemplateExpression\");\n    }\n  }, {\n    key: \"atPossibleAsyncArrow\",\n    value: function atPossibleAsyncArrow(base) {\n      return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n    }\n  }, {\n    key: \"finishCallExpression\",\n    value: function finishCallExpression(node, optional) {\n      if (node.callee.type === \"Import\") {\n        if (node.arguments.length === 2) {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n\n        if (node.arguments.length === 0 || node.arguments.length > 2) {\n          this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n        } else {\n          for (var _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n            var arg = _node$arguments[_i];\n\n            if (arg.type === \"SpreadElement\") {\n              this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n            }\n          }\n        }\n      }\n\n      return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n    }\n  }, {\n    key: \"parseCallExpressionArguments\",\n    value: function parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n      var elts = [];\n      var first = true;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n\n          if (this.match(close)) {\n            if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n              this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n            }\n\n            if (nodeForExtra) {\n              this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n          start: 0\n        } : undefined, allowPlaceholder));\n      }\n\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return elts;\n    }\n  }, {\n    key: \"shouldParseAsyncArrow\",\n    value: function shouldParseAsyncArrow() {\n      return this.match(types.arrow) && !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseAsyncArrowFromCallExpression\",\n    value: function parseAsyncArrowFromCallExpression(node, call) {\n      var _call$extra;\n\n      this.expect(types.arrow);\n      this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n      return node;\n    }\n  }, {\n    key: \"parseNoCallExpr\",\n    value: function parseNoCallExpr() {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    }\n  }, {\n    key: \"parseExprAtom\",\n    value: function parseExprAtom(refExpressionErrors) {\n      if (this.state.type === types.slash) this.readRegexp();\n      var canBeArrow = this.state.potentialArrowAt === this.state.start;\n      var node;\n\n      switch (this.state.type) {\n        case types._super:\n          return this.parseSuper();\n\n        case types._import:\n          node = this.startNode();\n          this.next();\n\n          if (this.match(types.dot)) {\n            return this.parseImportMetaProperty(node);\n          }\n\n          if (!this.match(types.parenL)) {\n            this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n          }\n\n          return this.finishNode(node, \"Import\");\n\n        case types._this:\n          node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"ThisExpression\");\n\n        case types.name:\n          {\n            var containsEsc = this.state.containsEsc;\n            var id = this.parseIdentifier();\n\n            if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n              if (this.match(types._function)) {\n                var _last4 = this.state.context.length - 1;\n\n                if (this.state.context[_last4] !== types$1.functionStatement) {\n                  throw new Error(\"Internal error\");\n                }\n\n                this.state.context[_last4] = types$1.functionExpression;\n                this.next();\n                return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n              } else if (this.match(types.name)) {\n                return this.parseAsyncArrowUnaryFunction(id);\n              }\n            }\n\n            if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n              this.next();\n              return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n            }\n\n            return id;\n          }\n\n        case types._do:\n          {\n            return this.parseDo();\n          }\n\n        case types.regexp:\n          {\n            var value = this.state.value;\n            node = this.parseLiteral(value.value, \"RegExpLiteral\");\n            node.pattern = value.pattern;\n            node.flags = value.flags;\n            return node;\n          }\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n        case types.bigint:\n          return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n        case types.decimal:\n          return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n        case types._null:\n          node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"NullLiteral\");\n\n        case types._true:\n        case types._false:\n          return this.parseBooleanLiteral();\n\n        case types.parenL:\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n\n        case types.bracketBarL:\n        case types.bracketHashL:\n          {\n            return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n          }\n\n        case types.bracketL:\n          {\n            return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n          }\n\n        case types.braceBarL:\n        case types.braceHashL:\n          {\n            return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n          }\n\n        case types.braceL:\n          {\n            return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n          }\n\n        case types._function:\n          return this.parseFunctionOrFunctionSent();\n\n        case types.at:\n          this.parseDecorators();\n\n        case types._class:\n          node = this.startNode();\n          this.takeDecorators(node);\n          return this.parseClass(node, false);\n\n        case types._new:\n          return this.parseNewOrNewTarget();\n\n        case types.backQuote:\n          return this.parseTemplate(false);\n\n        case types.doubleColon:\n          {\n            node = this.startNode();\n            this.next();\n            node.object = null;\n            var callee = node.callee = this.parseNoCallExpr();\n\n            if (callee.type === \"MemberExpression\") {\n              return this.finishNode(node, \"BindExpression\");\n            } else {\n              throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n            }\n          }\n\n        case types.hash:\n          {\n            if (this.state.inPipeline) {\n              node = this.startNode();\n\n              if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n                this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n              }\n\n              this.next();\n\n              if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n                this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n              }\n\n              this.registerTopicReference();\n              return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n            }\n\n            var nextCh = this.input.codePointAt(this.state.end);\n\n            if (isIdentifierStart(nextCh) || nextCh === 92) {\n              var start = this.state.start;\n              node = this.parseMaybePrivateName(true);\n\n              if (this.match(types._in)) {\n                this.expectPlugin(\"privateIn\");\n                this.classScope.usePrivateName(node.id.name, node.start);\n              } else if (this.hasPlugin(\"privateIn\")) {\n                this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n              } else {\n                throw this.unexpected(start);\n              }\n\n              return node;\n            }\n          }\n\n        case types.relational:\n          {\n            if (this.state.value === \"<\") {\n              var lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n              if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n            }\n          }\n\n        default:\n          throw this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseAsyncArrowUnaryFunction\",\n    value: function parseAsyncArrowUnaryFunction(id) {\n      var node = this.startNodeAtNode(id);\n      this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n      var params = [this.parseIdentifier()];\n      this.prodParam.exit();\n\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n      }\n\n      this.expect(types.arrow);\n      this.parseArrowExpression(node, params, true);\n      return node;\n    }\n  }, {\n    key: \"parseDo\",\n    value: function parseDo() {\n      this.expectPlugin(\"doExpressions\");\n      var node = this.startNode();\n      this.next();\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      node.body = this.parseBlock();\n      this.state.labels = oldLabels;\n      return this.finishNode(node, \"DoExpression\");\n    }\n  }, {\n    key: \"parseSuper\",\n    value: function parseSuper() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(node.start, ErrorMessages.SuperNotAllowed);\n      } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(node.start, ErrorMessages.UnexpectedSuper);\n      }\n\n      if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n        this.raise(node.start, ErrorMessages.UnsupportedSuper);\n      }\n\n      return this.finishNode(node, \"Super\");\n    }\n  }, {\n    key: \"parseBooleanLiteral\",\n    value: function parseBooleanLiteral() {\n      var node = this.startNode();\n      node.value = this.match(types._true);\n      this.next();\n      return this.finishNode(node, \"BooleanLiteral\");\n    }\n  }, {\n    key: \"parseMaybePrivateName\",\n    value: function parseMaybePrivateName(isPrivateNameAllowed) {\n      var isPrivate = this.match(types.hash);\n\n      if (isPrivate) {\n        this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n        if (!isPrivateNameAllowed) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n        }\n\n        var node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space between # and identifier\");\n        node.id = this.parseIdentifier(true);\n        return this.finishNode(node, \"PrivateName\");\n      } else {\n        return this.parseIdentifier(true);\n      }\n    }\n  }, {\n    key: \"parseFunctionOrFunctionSent\",\n    value: function parseFunctionOrFunctionSent() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.prodParam.hasYield && this.match(types.dot)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n        this.next();\n        return this.parseMetaProperty(node, meta, \"sent\");\n      }\n\n      return this.parseFunction(node);\n    }\n  }, {\n    key: \"parseMetaProperty\",\n    value: function parseMetaProperty(node, meta, propertyName) {\n      node.meta = meta;\n\n      if (meta.name === \"function\" && propertyName === \"sent\") {\n        if (this.isContextual(propertyName)) {\n          this.expectPlugin(\"functionSent\");\n        } else if (!this.hasPlugin(\"functionSent\")) {\n          this.unexpected();\n        }\n      }\n\n      var containsEsc = this.state.containsEsc;\n      node.property = this.parseIdentifier(true);\n\n      if (node.property.name !== propertyName || containsEsc) {\n        this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n      }\n\n      return this.finishNode(node, \"MetaProperty\");\n    }\n  }, {\n    key: \"parseImportMetaProperty\",\n    value: function parseImportMetaProperty(node) {\n      var id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n      this.next();\n\n      if (this.isContextual(\"meta\")) {\n        if (!this.inModule) {\n          this.raiseWithData(id.start, {\n            code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n          }, ErrorMessages.ImportMetaOutsideModule);\n        }\n\n        this.sawUnambiguousESM = true;\n      }\n\n      return this.parseMetaProperty(node, id, \"meta\");\n    }\n  }, {\n    key: \"parseLiteral\",\n    value: function parseLiteral(value, type, startPos, startLoc) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      var node = this.startNodeAt(startPos, startLoc);\n      this.addExtra(node, \"rawValue\", value);\n      this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n      node.value = value;\n      this.next();\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseParenAndDistinguishExpression\",\n    value: function parseParenAndDistinguishExpression(canBeArrow) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var val;\n      this.next();\n      this.expressionScope.enter(newArrowHeadScope());\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.maybeInArrowParameters = true;\n      this.state.inFSharpPipelineDirectBody = false;\n      var innerStartPos = this.state.start;\n      var innerStartLoc = this.state.startLoc;\n      var exprList = [];\n      var refExpressionErrors = new ExpressionErrors();\n      var refNeedsArrowPos = {\n        start: 0\n      };\n      var first = true;\n      var spreadStart;\n      var optionalCommaStart;\n\n      while (!this.match(types.parenR)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma, refNeedsArrowPos.start || null);\n\n          if (this.match(types.parenR)) {\n            optionalCommaStart = this.state.start;\n            break;\n          }\n        }\n\n        if (this.match(types.ellipsis)) {\n          var spreadNodeStartPos = this.state.start;\n          var spreadNodeStartLoc = this.state.startLoc;\n          spreadStart = this.state.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n          this.checkCommaAfterRest(41);\n          break;\n        } else {\n          exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n        }\n      }\n\n      var innerEndPos = this.state.lastTokEnd;\n      var innerEndLoc = this.state.lastTokEndLoc;\n      this.expect(types.parenR);\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var arrowNode = this.startNodeAt(startPos, startLoc);\n\n      if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n        this.expressionScope.validateAsPattern();\n        this.expressionScope.exit();\n        this.parseArrowExpression(arrowNode, exprList, false);\n        return arrowNode;\n      }\n\n      this.expressionScope.exit();\n\n      if (!exprList.length) {\n        this.unexpected(this.state.lastTokStart);\n      }\n\n      if (optionalCommaStart) this.unexpected(optionalCommaStart);\n      if (spreadStart) this.unexpected(spreadStart);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n      this.toReferencedListDeep(exprList, true);\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n\n      if (!this.options.createParenthesizedExpressions) {\n        this.addExtra(val, \"parenthesized\", true);\n        this.addExtra(val, \"parenStart\", startPos);\n        return val;\n      }\n\n      var parenExpression = this.startNodeAt(startPos, startLoc);\n      parenExpression.expression = val;\n      this.finishNode(parenExpression, \"ParenthesizedExpression\");\n      return parenExpression;\n    }\n  }, {\n    key: \"shouldParseArrow\",\n    value: function shouldParseArrow() {\n      return !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseArrow\",\n    value: function parseArrow(node) {\n      if (this.eat(types.arrow)) {\n        return node;\n      }\n    }\n  }, {\n    key: \"parseParenItem\",\n    value: function parseParenItem(node, startPos, startLoc) {\n      return node;\n    }\n  }, {\n    key: \"parseNewOrNewTarget\",\n    value: function parseNewOrNewTarget() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.match(types.dot)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n        this.next();\n        var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n        if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n          var error = ErrorMessages.UnexpectedNewTarget;\n\n          if (this.hasPlugin(\"classProperties\")) {\n            error += \" or class properties\";\n          }\n\n          this.raise(metaProp.start, error);\n        }\n\n        return metaProp;\n      }\n\n      return this.parseNew(node);\n    }\n  }, {\n    key: \"parseNew\",\n    value: function parseNew(node) {\n      node.callee = this.parseNoCallExpr();\n\n      if (node.callee.type === \"Import\") {\n        this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n      } else if (this.isOptionalChain(node.callee)) {\n        this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n      } else if (this.eat(types.questionDot)) {\n        this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n      }\n\n      this.parseNewArguments(node);\n      return this.finishNode(node, \"NewExpression\");\n    }\n  }, {\n    key: \"parseNewArguments\",\n    value: function parseNewArguments(node) {\n      if (this.eat(types.parenL)) {\n        var args = this.parseExprList(types.parenR);\n        this.toReferencedList(args);\n        node.arguments = args;\n      } else {\n        node.arguments = [];\n      }\n    }\n  }, {\n    key: \"parseTemplateElement\",\n    value: function parseTemplateElement(isTagged) {\n      var elem = this.startNode();\n\n      if (this.state.value === null) {\n        if (!isTagged) {\n          this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n        }\n      }\n\n      elem.value = {\n        raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.state.value\n      };\n      this.next();\n      elem.tail = this.match(types.backQuote);\n      return this.finishNode(elem, \"TemplateElement\");\n    }\n  }, {\n    key: \"parseTemplate\",\n    value: function parseTemplate(isTagged) {\n      var node = this.startNode();\n      this.next();\n      node.expressions = [];\n      var curElt = this.parseTemplateElement(isTagged);\n      node.quasis = [curElt];\n\n      while (!curElt.tail) {\n        this.expect(types.dollarBraceL);\n        node.expressions.push(this.parseTemplateSubstitution());\n        this.expect(types.braceR);\n        node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n      }\n\n      this.next();\n      return this.finishNode(node, \"TemplateLiteral\");\n    }\n  }, {\n    key: \"parseTemplateSubstitution\",\n    value: function parseTemplateSubstitution() {\n      return this.parseExpression();\n    }\n  }, {\n    key: \"parseObjectLike\",\n    value: function parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n      if (isRecord) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var propHash = Object.create(null);\n      var first = true;\n      var node = this.startNode();\n      node.properties = [];\n      this.next();\n\n      while (!this.match(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n\n          if (this.match(close)) {\n            this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n            break;\n          }\n        }\n\n        var prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n        if (!isPattern) {\n          this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n        }\n\n        if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n          this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n        }\n\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n\n        node.properties.push(prop);\n      }\n\n      this.state.exprAllowed = false;\n      this.next();\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var type = \"ObjectExpression\";\n\n      if (isPattern) {\n        type = \"ObjectPattern\";\n      } else if (isRecord) {\n        type = \"RecordExpression\";\n      }\n\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"maybeAsyncOrAccessorProp\",\n    value: function maybeAsyncOrAccessorProp(prop) {\n      return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n    }\n  }, {\n    key: \"parsePropertyDefinition\",\n    value: function parsePropertyDefinition(isPattern, refExpressionErrors) {\n      var decorators = [];\n\n      if (this.match(types.at)) {\n        if (this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n      }\n\n      var prop = this.startNode();\n      var isGenerator = false;\n      var isAsync = false;\n      var isAccessor = false;\n      var startPos;\n      var startLoc;\n\n      if (this.match(types.ellipsis)) {\n        if (decorators.length) this.unexpected();\n\n        if (isPattern) {\n          this.next();\n          prop.argument = this.parseIdentifier();\n          this.checkCommaAfterRest(125);\n          return this.finishNode(prop, \"RestElement\");\n        }\n\n        return this.parseSpread();\n      }\n\n      if (decorators.length) {\n        prop.decorators = decorators;\n        decorators = [];\n      }\n\n      prop.method = false;\n\n      if (isPattern || refExpressionErrors) {\n        startPos = this.state.start;\n        startLoc = this.state.startLoc;\n      }\n\n      if (!isPattern) {\n        isGenerator = this.eat(types.star);\n      }\n\n      var containsEsc = this.state.containsEsc;\n      var key = this.parsePropertyName(prop, false);\n\n      if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n        var keyName = key.name;\n\n        if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n          isAsync = true;\n          isGenerator = this.eat(types.star);\n          this.parsePropertyName(prop, false);\n        }\n\n        if (keyName === \"get\" || keyName === \"set\") {\n          isAccessor = true;\n          prop.kind = keyName;\n\n          if (this.match(types.star)) {\n            isGenerator = true;\n            this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n            this.next();\n          }\n\n          this.parsePropertyName(prop, false);\n        }\n      }\n\n      this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n      return prop;\n    }\n  }, {\n    key: \"getGetterSetterExpectedParamCount\",\n    value: function getGetterSetterExpectedParamCount(method) {\n      return method.kind === \"get\" ? 0 : 1;\n    }\n  }, {\n    key: \"getObjectOrClassMethodParams\",\n    value: function getObjectOrClassMethodParams(method) {\n      return method.params;\n    }\n  }, {\n    key: \"checkGetterSetterParams\",\n    value: function checkGetterSetterParams(method) {\n      var _params;\n\n      var paramCount = this.getGetterSetterExpectedParamCount(method);\n      var params = this.getObjectOrClassMethodParams(method);\n      var start = method.start;\n\n      if (params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n  }, {\n    key: \"parseObjectMethod\",\n    value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n      if (isAccessor) {\n        this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n        this.checkGetterSetterParams(prop);\n        return prop;\n      }\n\n      if (isAsync || isGenerator || this.match(types.parenL)) {\n        if (isPattern) this.unexpected();\n        prop.kind = \"method\";\n        prop.method = true;\n        return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n      }\n    }\n  }, {\n    key: \"parseObjectProperty\",\n    value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n      prop.shorthand = false;\n\n      if (this.eat(types.colon)) {\n        prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n\n      if (!prop.computed && prop.key.type === \"Identifier\") {\n        this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n        if (isPattern) {\n          prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n        } else if (this.match(types.eq) && refExpressionErrors) {\n          if (refExpressionErrors.shorthandAssign === -1) {\n            refExpressionErrors.shorthandAssign = this.state.start;\n          }\n\n          prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n        } else {\n          prop.value = prop.key.__clone();\n        }\n\n        prop.shorthand = true;\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n    }\n  }, {\n    key: \"parseObjPropValue\",\n    value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n      if (!node) this.unexpected();\n      return node;\n    }\n  }, {\n    key: \"parsePropertyName\",\n    value: function parsePropertyName(prop, isPrivateNameAllowed) {\n      if (this.eat(types.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssignAllowIn();\n        this.expect(types.bracketR);\n      } else {\n        var oldInPropertyName = this.state.inPropertyName;\n        this.state.inPropertyName = true;\n        prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n        if (!this.isPrivateName(prop.key)) {\n          prop.computed = false;\n        }\n\n        this.state.inPropertyName = oldInPropertyName;\n      }\n\n      return prop.key;\n    }\n  }, {\n    key: \"initFunction\",\n    value: function initFunction(node, isAsync) {\n      node.id = null;\n      node.generator = false;\n      node.async = !!isAsync;\n    }\n  }, {\n    key: \"parseMethod\",\n    value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n      var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      this.initFunction(node, isAsync);\n      node.generator = !!isGenerator;\n      var allowModifiers = isConstructor;\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n      this.parseFunctionParams(node, allowModifiers);\n      this.parseFunctionBodyAndFinish(node, type, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      return node;\n    }\n  }, {\n    key: \"parseArrayLike\",\n    value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n      if (isTuple) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n    }\n  }, {\n    key: \"parseArrowExpression\",\n    value: function parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      var flags = functionFlags(isAsync, false);\n\n      if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n        flags |= PARAM_IN;\n      }\n\n      this.prodParam.enter(flags);\n      this.initFunction(node, isAsync);\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n      if (params) {\n        this.state.maybeInArrowParameters = true;\n        this.setArrowFunctionParameters(node, params, trailingCommaPos);\n      }\n\n      this.state.maybeInArrowParameters = false;\n      this.parseFunctionBody(node, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return this.finishNode(node, \"ArrowFunctionExpression\");\n    }\n  }, {\n    key: \"setArrowFunctionParameters\",\n    value: function setArrowFunctionParameters(node, params, trailingCommaPos) {\n      node.params = this.toAssignableList(params, trailingCommaPos, false);\n    }\n  }, {\n    key: \"parseFunctionBodyAndFinish\",\n    value: function parseFunctionBodyAndFinish(node, type) {\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.parseFunctionBody(node, false, isMethod);\n      this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseFunctionBody\",\n    value: function parseFunctionBody(node, allowExpression) {\n      var _this46 = this;\n\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isExpression = allowExpression && !this.match(types.braceL);\n      this.expressionScope.enter(newExpressionScope());\n\n      if (isExpression) {\n        node.body = this.parseMaybeAssign();\n        this.checkParams(node, false, allowExpression, false);\n      } else {\n        var oldStrict = this.state.strict;\n        var oldLabels = this.state.labels;\n        this.state.labels = [];\n        this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n        node.body = this.parseBlock(true, false, function (hasStrictModeDirective) {\n          var nonSimple = !_this46.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            var errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n\n            _this46.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n          }\n\n          var strictModeChanged = !oldStrict && _this46.state.strict;\n\n          _this46.checkParams(node, !_this46.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n          if (_this46.state.strict && node.id) {\n            _this46.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n          }\n        });\n        this.prodParam.exit();\n        this.expressionScope.exit();\n        this.state.labels = oldLabels;\n      }\n    }\n  }, {\n    key: \"isSimpleParamList\",\n    value: function isSimpleParamList(params) {\n      for (var i = 0, len = params.length; i < len; i++) {\n        if (params[i].type !== \"Identifier\") return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkParams\",\n    value: function checkParams(node, allowDuplicates, isArrowFunction) {\n      var strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var checkClashes = new Set();\n\n      for (var _i2 = 0, _node$params = node.params; _i2 < _node$params.length; _i2++) {\n        var param = _node$params[_i2];\n        this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n      }\n    }\n  }, {\n    key: \"parseExprList\",\n    value: function parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n\n          if (this.match(close)) {\n            if (nodeForExtra) {\n              this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseExprListItem\",\n    value: function parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n      var elt;\n\n      if (this.match(types.comma)) {\n        if (!allowEmpty) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n        }\n\n        elt = null;\n      } else if (this.match(types.ellipsis)) {\n        var spreadNodeStartPos = this.state.start;\n        var spreadNodeStartLoc = this.state.startLoc;\n        elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n      } else if (this.match(types.question)) {\n        this.expectPlugin(\"partialApplication\");\n\n        if (!allowPlaceholder) {\n          this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n        }\n\n        var node = this.startNode();\n        this.next();\n        elt = this.finishNode(node, \"ArgumentPlaceholder\");\n      } else {\n        elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseIdentifier\",\n    value: function parseIdentifier(liberal) {\n      var node = this.startNode();\n      var name = this.parseIdentifierName(node.start, liberal);\n      return this.createIdentifier(node, name);\n    }\n  }, {\n    key: \"createIdentifier\",\n    value: function createIdentifier(node, name) {\n      node.name = name;\n      node.loc.identifierName = name;\n      return this.finishNode(node, \"Identifier\");\n    }\n  }, {\n    key: \"parseIdentifierName\",\n    value: function parseIdentifierName(pos, liberal) {\n      var name;\n      var _this$state2 = this.state,\n          start = _this$state2.start,\n          type = _this$state2.type;\n\n      if (type === types.name) {\n        name = this.state.value;\n      } else if (type.keyword) {\n        name = type.keyword;\n        var curContext = this.curContext();\n\n        if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n          this.state.context.pop();\n        }\n      } else {\n        throw this.unexpected();\n      }\n\n      if (liberal) {\n        this.state.type = types.name;\n      } else {\n        this.checkReservedWord(name, start, !!type.keyword, false);\n      }\n\n      this.next();\n      return name;\n    }\n  }, {\n    key: \"checkReservedWord\",\n    value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n      if (this.prodParam.hasYield && word === \"yield\") {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n\n      if (word === \"await\") {\n        if (this.prodParam.hasAwait) {\n          this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n          return;\n        } else {\n          this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        }\n      }\n\n      if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n\n      if (checkKeywords && isKeyword(word)) {\n        this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n        return;\n      }\n\n      var reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n      if (reservedTest(word, this.inModule)) {\n        if (!this.prodParam.hasAwait && word === \"await\") {\n          this.raise(startLoc, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n        } else {\n          this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n        }\n      }\n    }\n  }, {\n    key: \"isAwaitAllowed\",\n    value: function isAwaitAllowed() {\n      if (this.prodParam.hasAwait) return true;\n\n      if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseAwait\",\n    value: function parseAwait() {\n      var node = this.startNode();\n      this.next();\n      this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n      if (this.eat(types.star)) {\n        this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n      }\n\n      if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n        if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n          this.ambiguousScriptDifferentAst = true;\n        } else {\n          this.sawUnambiguousESM = true;\n        }\n      }\n\n      if (!this.state.soloAwait) {\n        node.argument = this.parseMaybeUnary();\n      }\n\n      return this.finishNode(node, \"AwaitExpression\");\n    }\n  }, {\n    key: \"parseYield\",\n    value: function parseYield() {\n      var node = this.startNode();\n      this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n      this.next();\n\n      if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n        node.delegate = false;\n        node.argument = null;\n      } else {\n        node.delegate = this.eat(types.star);\n        node.argument = this.parseMaybeAssign();\n      }\n\n      return this.finishNode(node, \"YieldExpression\");\n    }\n  }, {\n    key: \"checkPipelineAtInfixOperator\",\n    value: function checkPipelineAtInfixOperator(left, leftStartPos) {\n      if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n        if (left.type === \"SequenceExpression\") {\n          this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n        }\n      }\n    }\n  }, {\n    key: \"parseSmartPipelineBody\",\n    value: function parseSmartPipelineBody(childExpression, startPos, startLoc) {\n      this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n      return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n    }\n  }, {\n    key: \"checkSmartPipelineBodyEarlyErrors\",\n    value: function checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n      if (this.match(types.arrow)) {\n        throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n      } else if (childExpression.type === \"SequenceExpression\") {\n        this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n      }\n    }\n  }, {\n    key: \"parseSmartPipelineBodyInStyle\",\n    value: function parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n      var bodyNode = this.startNodeAt(startPos, startLoc);\n      var isSimpleReference = this.isSimpleReference(childExpression);\n\n      if (isSimpleReference) {\n        bodyNode.callee = childExpression;\n      } else {\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n        }\n\n        bodyNode.expression = childExpression;\n      }\n\n      return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n    }\n  }, {\n    key: \"isSimpleReference\",\n    value: function isSimpleReference(expression) {\n      switch (expression.type) {\n        case \"MemberExpression\":\n          return !expression.computed && this.isSimpleReference(expression.object);\n\n        case \"Identifier\":\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"withTopicPermittingContext\",\n    value: function withTopicPermittingContext(callback) {\n      var outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 1,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    }\n  }, {\n    key: \"withTopicForbiddingContext\",\n    value: function withTopicForbiddingContext(callback) {\n      var outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    }\n  }, {\n    key: \"withSoloAwaitPermittingContext\",\n    value: function withSoloAwaitPermittingContext(callback) {\n      var outerContextSoloAwaitState = this.state.soloAwait;\n      this.state.soloAwait = true;\n\n      try {\n        return callback();\n      } finally {\n        this.state.soloAwait = outerContextSoloAwaitState;\n      }\n    }\n  }, {\n    key: \"allowInAnd\",\n    value: function allowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToSet = PARAM_IN & ~flags;\n\n      if (prodParamToSet) {\n        this.prodParam.enter(flags | PARAM_IN);\n\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n\n      return callback();\n    }\n  }, {\n    key: \"disallowInAnd\",\n    value: function disallowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToClear = PARAM_IN & flags;\n\n      if (prodParamToClear) {\n        this.prodParam.enter(flags & ~PARAM_IN);\n\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n\n      return callback();\n    }\n  }, {\n    key: \"registerTopicReference\",\n    value: function registerTopicReference() {\n      this.state.topicContext.maxTopicIndex = 0;\n    }\n  }, {\n    key: \"primaryTopicReferenceIsAllowedInCurrentTopicContext\",\n    value: function primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n      return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n    }\n  }, {\n    key: \"topicReferenceWasUsedInCurrentTopicContext\",\n    value: function topicReferenceWasUsedInCurrentTopicContext() {\n      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n    }\n  }, {\n    key: \"parseFSharpPipelineBody\",\n    value: function parseFSharpPipelineBody(prec) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      this.state.potentialArrowAt = this.state.start;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = true;\n      var ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return ret;\n    }\n  }]);\n\n  return ExpressionParser;\n}(LValParser);\n\nvar loopLabel = {\n  kind: \"loop\"\n},\n    switchLabel = {\n  kind: \"switch\"\n};\nvar FUNC_NO_FLAGS = 0,\n    FUNC_STATEMENT = 1,\n    FUNC_HANGING_STATEMENT = 2,\n    FUNC_NULLABLE_ID = 4;\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n\nvar StatementParser = /*#__PURE__*/function (_ExpressionParser) {\n  _inherits(StatementParser, _ExpressionParser);\n\n  var _super17 = _createSuper(StatementParser);\n\n  function StatementParser() {\n    _classCallCheck(this, StatementParser);\n\n    return _super17.apply(this, arguments);\n  }\n\n  _createClass(StatementParser, [{\n    key: \"parseTopLevel\",\n    value: function parseTopLevel(file, program) {\n      program.sourceType = this.options.sourceType;\n      program.interpreter = this.parseInterpreterDirective();\n      this.parseBlockBody(program, true, true, types.eof);\n\n      if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n        for (var _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n          var _Array$from$_i = _slicedToArray(_Array$from[_i], 1),\n              name = _Array$from$_i[0];\n\n          var pos = this.scope.undefinedExports.get(name);\n          this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n        }\n      }\n\n      file.program = this.finishNode(program, \"Program\");\n      file.comments = this.state.comments;\n      if (this.options.tokens) file.tokens = this.tokens;\n      return this.finishNode(file, \"File\");\n    }\n  }, {\n    key: \"stmtToDirective\",\n    value: function stmtToDirective(stmt) {\n      var expr = stmt.expression;\n      var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n      var directive = this.startNodeAt(stmt.start, stmt.loc.start);\n      var raw = this.input.slice(expr.start, expr.end);\n      var val = directiveLiteral.value = raw.slice(1, -1);\n      this.addExtra(directiveLiteral, \"raw\", raw);\n      this.addExtra(directiveLiteral, \"rawValue\", val);\n      directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n      return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n    }\n  }, {\n    key: \"parseInterpreterDirective\",\n    value: function parseInterpreterDirective() {\n      if (!this.match(types.interpreterDirective)) {\n        return null;\n      }\n\n      var node = this.startNode();\n      node.value = this.state.value;\n      this.next();\n      return this.finishNode(node, \"InterpreterDirective\");\n    }\n  }, {\n    key: \"isLet\",\n    value: function isLet(context) {\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n\n      var next = this.nextTokenStart();\n      var nextCh = this.input.charCodeAt(next);\n      if (nextCh === 91) return true;\n      if (context) return false;\n      if (nextCh === 123) return true;\n\n      if (isIdentifierStart(nextCh)) {\n        var pos = next + 1;\n\n        while (isIdentifierChar(this.input.charCodeAt(pos))) {\n          ++pos;\n        }\n\n        var ident = this.input.slice(next, pos);\n        if (!keywordRelationalOperator.test(ident)) return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseStatement\",\n    value: function parseStatement(context, topLevel) {\n      if (this.match(types.at)) {\n        this.parseDecorators(true);\n      }\n\n      return this.parseStatementContent(context, topLevel);\n    }\n  }, {\n    key: \"parseStatementContent\",\n    value: function parseStatementContent(context, topLevel) {\n      var starttype = this.state.type;\n      var node = this.startNode();\n      var kind;\n\n      if (this.isLet(context)) {\n        starttype = types._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case types._break:\n        case types._continue:\n          return this.parseBreakContinueStatement(node, starttype.keyword);\n\n        case types._debugger:\n          return this.parseDebuggerStatement(node);\n\n        case types._do:\n          return this.parseDoStatement(node);\n\n        case types._for:\n          return this.parseForStatement(node);\n\n        case types._function:\n          if (this.lookaheadCharCode() === 46) break;\n\n          if (context) {\n            if (this.state.strict) {\n              this.raise(this.state.start, ErrorMessages.StrictFunction);\n            } else if (context !== \"if\" && context !== \"label\") {\n              this.raise(this.state.start, ErrorMessages.SloppyFunction);\n            }\n          }\n\n          return this.parseFunctionStatement(node, false, !context);\n\n        case types._class:\n          if (context) this.unexpected();\n          return this.parseClass(node, true);\n\n        case types._if:\n          return this.parseIfStatement(node);\n\n        case types._return:\n          return this.parseReturnStatement(node);\n\n        case types._switch:\n          return this.parseSwitchStatement(node);\n\n        case types._throw:\n          return this.parseThrowStatement(node);\n\n        case types._try:\n          return this.parseTryStatement(node);\n\n        case types._const:\n        case types._var:\n          kind = kind || this.state.value;\n\n          if (context && kind !== \"var\") {\n            this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n          }\n\n          return this.parseVarStatement(node, kind);\n\n        case types._while:\n          return this.parseWhileStatement(node);\n\n        case types._with:\n          return this.parseWithStatement(node);\n\n        case types.braceL:\n          return this.parseBlock();\n\n        case types.semi:\n          return this.parseEmptyStatement(node);\n\n        case types._import:\n          {\n            var nextTokenCharCode = this.lookaheadCharCode();\n\n            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n          }\n\n        case types._export:\n          {\n            if (!this.options.allowImportExportEverywhere && !topLevel) {\n              this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n            }\n\n            this.next();\n            var result;\n\n            if (starttype === types._import) {\n              result = this.parseImport(node);\n\n              if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n                this.sawUnambiguousESM = true;\n              }\n            } else {\n              result = this.parseExport(node);\n\n              if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n                this.sawUnambiguousESM = true;\n              }\n            }\n\n            this.assertModuleNodeAllowed(node);\n            return result;\n          }\n\n        default:\n          {\n            if (this.isAsyncFunction()) {\n              if (context) {\n                this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n              }\n\n              this.next();\n              return this.parseFunctionStatement(node, true, !context);\n            }\n          }\n      }\n\n      var maybeName = this.state.value;\n      var expr = this.parseExpression();\n\n      if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n        return this.parseLabeledStatement(node, maybeName, expr, context);\n      } else {\n        return this.parseExpressionStatement(node, expr);\n      }\n    }\n  }, {\n    key: \"assertModuleNodeAllowed\",\n    value: function assertModuleNodeAllowed(node) {\n      if (!this.options.allowImportExportEverywhere && !this.inModule) {\n        this.raiseWithData(node.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportOutsideModule);\n      }\n    }\n  }, {\n    key: \"takeDecorators\",\n    value: function takeDecorators(node) {\n      var decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (decorators.length) {\n        node.decorators = decorators;\n        this.resetStartLocationFromNode(node, decorators[0]);\n        this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n      }\n    }\n  }, {\n    key: \"canHaveLeadingDecorator\",\n    value: function canHaveLeadingDecorator() {\n      return this.match(types._class);\n    }\n  }, {\n    key: \"parseDecorators\",\n    value: function parseDecorators(allowExport) {\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      while (this.match(types.at)) {\n        var decorator = this.parseDecorator();\n        currentContextDecorators.push(decorator);\n      }\n\n      if (this.match(types._export)) {\n        if (!allowExport) {\n          this.unexpected();\n        }\n\n        if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n        }\n      } else if (!this.canHaveLeadingDecorator()) {\n        throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n      }\n    }\n  }, {\n    key: \"parseDecorator\",\n    value: function parseDecorator() {\n      this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n      var node = this.startNode();\n      this.next();\n\n      if (this.hasPlugin(\"decorators\")) {\n        this.state.decoratorStack.push([]);\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var expr;\n\n        if (this.eat(types.parenL)) {\n          expr = this.parseExpression();\n          this.expect(types.parenR);\n        } else {\n          expr = this.parseIdentifier(false);\n\n          while (this.eat(types.dot)) {\n            var _node12 = this.startNodeAt(startPos, startLoc);\n\n            _node12.object = expr;\n            _node12.property = this.parseIdentifier(true);\n            _node12.computed = false;\n            expr = this.finishNode(_node12, \"MemberExpression\");\n          }\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        this.state.decoratorStack.pop();\n      } else {\n        node.expression = this.parseExprSubscripts();\n      }\n\n      return this.finishNode(node, \"Decorator\");\n    }\n  }, {\n    key: \"parseMaybeDecoratorArguments\",\n    value: function parseMaybeDecoratorArguments(expr) {\n      if (this.eat(types.parenL)) {\n        var node = this.startNodeAtNode(expr);\n        node.callee = expr;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        this.toReferencedList(node.arguments);\n        return this.finishNode(node, \"CallExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseBreakContinueStatement\",\n    value: function parseBreakContinueStatement(node, keyword) {\n      var isBreak = keyword === \"break\";\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.label = null;\n      } else {\n        node.label = this.parseIdentifier();\n        this.semicolon();\n      }\n\n      this.verifyBreakContinue(node, keyword);\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n    }\n  }, {\n    key: \"verifyBreakContinue\",\n    value: function verifyBreakContinue(node, keyword) {\n      var isBreak = keyword === \"break\";\n      var i;\n\n      for (i = 0; i < this.state.labels.length; ++i) {\n        var lab = this.state.labels[i];\n\n        if (node.label == null || lab.name === node.label.name) {\n          if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n          if (node.label && isBreak) break;\n        }\n      }\n\n      if (i === this.state.labels.length) {\n        this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n      }\n    }\n  }, {\n    key: \"parseDebuggerStatement\",\n    value: function parseDebuggerStatement(node) {\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\");\n    }\n  }, {\n    key: \"parseHeaderExpression\",\n    value: function parseHeaderExpression() {\n      this.expect(types.parenL);\n      var val = this.parseExpression();\n      this.expect(types.parenR);\n      return val;\n    }\n  }, {\n    key: \"parseDoStatement\",\n    value: function parseDoStatement(node) {\n      var _this47 = this;\n\n      this.next();\n      this.state.labels.push(loopLabel);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this47.parseStatement(\"do\");\n      });\n      this.state.labels.pop();\n      this.expect(types._while);\n      node.test = this.parseHeaderExpression();\n      this.eat(types.semi);\n      return this.finishNode(node, \"DoWhileStatement\");\n    }\n  }, {\n    key: \"parseForStatement\",\n    value: function parseForStatement(node) {\n      this.next();\n      this.state.labels.push(loopLabel);\n      var awaitAt = -1;\n\n      if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n        awaitAt = this.state.lastTokStart;\n      }\n\n      this.scope.enter(SCOPE_OTHER);\n      this.expect(types.parenL);\n\n      if (this.match(types.semi)) {\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, null);\n      }\n\n      var isLet = this.isLet();\n\n      if (this.match(types._var) || this.match(types._const) || isLet) {\n        var _init = this.startNode();\n\n        var kind = isLet ? \"let\" : this.state.value;\n        this.next();\n        this.parseVar(_init, true, kind);\n        this.finishNode(_init, \"VariableDeclaration\");\n\n        if ((this.match(types._in) || this.isContextual(\"of\")) && _init.declarations.length === 1) {\n          return this.parseForIn(node, _init, awaitAt);\n        }\n\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, _init);\n      }\n\n      var refExpressionErrors = new ExpressionErrors();\n      var init = this.parseExpression(true, refExpressionErrors);\n\n      if (this.match(types._in) || this.isContextual(\"of\")) {\n        this.toAssignable(init, true);\n        var description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n        this.checkLVal(init, description);\n        return this.parseForIn(node, init, awaitAt);\n      } else {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n  }, {\n    key: \"parseFunctionStatement\",\n    value: function parseFunctionStatement(node, isAsync, declarationPosition) {\n      this.next();\n      return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n    }\n  }, {\n    key: \"parseIfStatement\",\n    value: function parseIfStatement(node) {\n      this.next();\n      node.test = this.parseHeaderExpression();\n      node.consequent = this.parseStatement(\"if\");\n      node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n      return this.finishNode(node, \"IfStatement\");\n    }\n  }, {\n    key: \"parseReturnStatement\",\n    value: function parseReturnStatement(node) {\n      if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n        this.raise(this.state.start, ErrorMessages.IllegalReturn);\n      }\n\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.argument = null;\n      } else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"ReturnStatement\");\n    }\n  }, {\n    key: \"parseSwitchStatement\",\n    value: function parseSwitchStatement(node) {\n      this.next();\n      node.discriminant = this.parseHeaderExpression();\n      var cases = node.cases = [];\n      this.expect(types.braceL);\n      this.state.labels.push(switchLabel);\n      this.scope.enter(SCOPE_OTHER);\n      var cur;\n\n      for (var sawDefault; !this.match(types.braceR);) {\n        if (this.match(types._case) || this.match(types._default)) {\n          var isCase = this.match(types._case);\n          if (cur) this.finishNode(cur, \"SwitchCase\");\n          cases.push(cur = this.startNode());\n          cur.consequent = [];\n          this.next();\n\n          if (isCase) {\n            cur.test = this.parseExpression();\n          } else {\n            if (sawDefault) {\n              this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n            }\n\n            sawDefault = true;\n            cur.test = null;\n          }\n\n          this.expect(types.colon);\n        } else {\n          if (cur) {\n            cur.consequent.push(this.parseStatement(null));\n          } else {\n            this.unexpected();\n          }\n        }\n      }\n\n      this.scope.exit();\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      this.next();\n      this.state.labels.pop();\n      return this.finishNode(node, \"SwitchStatement\");\n    }\n  }, {\n    key: \"parseThrowStatement\",\n    value: function parseThrowStatement(node) {\n      this.next();\n\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n      }\n\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\");\n    }\n  }, {\n    key: \"parseCatchClauseParam\",\n    value: function parseCatchClauseParam() {\n      var param = this.parseBindingAtom();\n      var simple = param.type === \"Identifier\";\n      this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n      return param;\n    }\n  }, {\n    key: \"parseTryStatement\",\n    value: function parseTryStatement(node) {\n      var _this48 = this;\n\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n\n      if (this.match(types._catch)) {\n        var clause = this.startNode();\n        this.next();\n\n        if (this.match(types.parenL)) {\n          this.expect(types.parenL);\n          clause.param = this.parseCatchClauseParam();\n          this.expect(types.parenR);\n        } else {\n          clause.param = null;\n          this.scope.enter(SCOPE_OTHER);\n        }\n\n        clause.body = this.withTopicForbiddingContext(function () {\n          return _this48.parseBlock(false, false);\n        });\n        this.scope.exit();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n\n      node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n      if (!node.handler && !node.finalizer) {\n        this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n      }\n\n      return this.finishNode(node, \"TryStatement\");\n    }\n  }, {\n    key: \"parseVarStatement\",\n    value: function parseVarStatement(node, kind) {\n      this.next();\n      this.parseVar(node, false, kind);\n      this.semicolon();\n      return this.finishNode(node, \"VariableDeclaration\");\n    }\n  }, {\n    key: \"parseWhileStatement\",\n    value: function parseWhileStatement(node) {\n      var _this49 = this;\n\n      this.next();\n      node.test = this.parseHeaderExpression();\n      this.state.labels.push(loopLabel);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this49.parseStatement(\"while\");\n      });\n      this.state.labels.pop();\n      return this.finishNode(node, \"WhileStatement\");\n    }\n  }, {\n    key: \"parseWithStatement\",\n    value: function parseWithStatement(node) {\n      var _this50 = this;\n\n      if (this.state.strict) {\n        this.raise(this.state.start, ErrorMessages.StrictWith);\n      }\n\n      this.next();\n      node.object = this.parseHeaderExpression();\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this50.parseStatement(\"with\");\n      });\n      return this.finishNode(node, \"WithStatement\");\n    }\n  }, {\n    key: \"parseEmptyStatement\",\n    value: function parseEmptyStatement(node) {\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\");\n    }\n  }, {\n    key: \"parseLabeledStatement\",\n    value: function parseLabeledStatement(node, maybeName, expr, context) {\n      for (var _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n        var label = _this$state$labels[_i2];\n\n        if (label.name === maybeName) {\n          this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n        }\n      }\n\n      var kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n      for (var i = this.state.labels.length - 1; i >= 0; i--) {\n        var _label = this.state.labels[i];\n\n        if (_label.statementStart === node.start) {\n          _label.statementStart = this.state.start;\n          _label.kind = kind;\n        } else {\n          break;\n        }\n      }\n\n      this.state.labels.push({\n        name: maybeName,\n        kind: kind,\n        statementStart: this.state.start\n      });\n      node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n      this.state.labels.pop();\n      node.label = expr;\n      return this.finishNode(node, \"LabeledStatement\");\n    }\n  }, {\n    key: \"parseExpressionStatement\",\n    value: function parseExpressionStatement(node, expr) {\n      node.expression = expr;\n      this.semicolon();\n      return this.finishNode(node, \"ExpressionStatement\");\n    }\n  }, {\n    key: \"parseBlock\",\n    value: function parseBlock() {\n      var allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n      var node = this.startNode();\n\n      if (allowDirectives) {\n        this.state.strictErrors.clear();\n      }\n\n      this.expect(types.braceL);\n\n      if (createNewLexicalScope) {\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n      if (createNewLexicalScope) {\n        this.scope.exit();\n      }\n\n      return this.finishNode(node, \"BlockStatement\");\n    }\n  }, {\n    key: \"isValidDirective\",\n    value: function isValidDirective(stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n    }\n  }, {\n    key: \"parseBlockBody\",\n    value: function parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n      var body = node.body = [];\n      var directives = node.directives = [];\n      this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n    }\n  }, {\n    key: \"parseBlockOrModuleBlockBody\",\n    value: function parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n      var oldStrict = this.state.strict;\n      var hasStrictModeDirective = false;\n      var parsedNonDirective = false;\n\n      while (!this.match(end)) {\n        var stmt = this.parseStatement(null, topLevel);\n\n        if (directives && !parsedNonDirective) {\n          if (this.isValidDirective(stmt)) {\n            var directive = this.stmtToDirective(stmt);\n            directives.push(directive);\n\n            if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n              hasStrictModeDirective = true;\n              this.setStrict(true);\n            }\n\n            continue;\n          }\n\n          parsedNonDirective = true;\n          this.state.strictErrors.clear();\n        }\n\n        body.push(stmt);\n      }\n\n      if (afterBlockParse) {\n        afterBlockParse.call(this, hasStrictModeDirective);\n      }\n\n      if (!oldStrict) {\n        this.setStrict(false);\n      }\n\n      this.next();\n    }\n  }, {\n    key: \"parseFor\",\n    value: function parseFor(node, init) {\n      var _this51 = this;\n\n      node.init = init;\n      this.expect(types.semi);\n      node.test = this.match(types.semi) ? null : this.parseExpression();\n      this.expect(types.semi);\n      node.update = this.match(types.parenR) ? null : this.parseExpression();\n      this.expect(types.parenR);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this51.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, \"ForStatement\");\n    }\n  }, {\n    key: \"parseForIn\",\n    value: function parseForIn(node, init, awaitAt) {\n      var _this52 = this;\n\n      var isForIn = this.match(types._in);\n      this.next();\n\n      if (isForIn) {\n        if (awaitAt > -1) this.unexpected(awaitAt);\n      } else {\n        node.await = awaitAt > -1;\n      }\n\n      if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n        this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n      } else if (init.type === \"AssignmentPattern\") {\n        this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n      }\n\n      node.left = init;\n      node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n      this.expect(types.parenR);\n      node.body = this.withTopicForbiddingContext(function () {\n        return _this52.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n    }\n  }, {\n    key: \"parseVar\",\n    value: function parseVar(node, isFor, kind) {\n      var declarations = node.declarations = [];\n      var isTypescript = this.hasPlugin(\"typescript\");\n      node.kind = kind;\n\n      for (;;) {\n        var decl = this.startNode();\n        this.parseVarId(decl, kind);\n\n        if (this.eat(types.eq)) {\n          decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n        } else {\n          if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n            if (!isTypescript) {\n              this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n            }\n          } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n          }\n\n          decl.init = null;\n        }\n\n        declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n        if (!this.eat(types.comma)) break;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"parseVarId\",\n    value: function parseVarId(decl, kind) {\n      decl.id = this.parseBindingAtom();\n      this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n    }\n  }, {\n    key: \"parseFunction\",\n    value: function parseFunction(node) {\n      var _this53 = this;\n\n      var statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n      var isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isStatement = statement & FUNC_STATEMENT;\n      var isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n      var requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n      this.initFunction(node, isAsync);\n\n      if (this.match(types.star) && isHangingStatement) {\n        this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n      }\n\n      node.generator = this.eat(types.star);\n\n      if (isStatement) {\n        node.id = this.parseFunctionId(requireId);\n      }\n\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = false;\n      this.scope.enter(SCOPE_FUNCTION);\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n      if (!isStatement) {\n        node.id = this.parseFunctionId();\n      }\n\n      this.parseFunctionParams(node, false);\n      this.withTopicForbiddingContext(function () {\n        _this53.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n      });\n      this.prodParam.exit();\n      this.scope.exit();\n\n      if (isStatement && !isHangingStatement) {\n        this.registerFunctionStatementId(node);\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    }\n  }, {\n    key: \"parseFunctionId\",\n    value: function parseFunctionId(requireId) {\n      return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n    }\n  }, {\n    key: \"parseFunctionParams\",\n    value: function parseFunctionParams(node, allowModifiers) {\n      this.expect(types.parenL);\n      this.expressionScope.enter(newParameterDeclarationScope());\n      node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n      this.expressionScope.exit();\n    }\n  }, {\n    key: \"registerFunctionStatementId\",\n    value: function registerFunctionStatementId(node) {\n      if (!node.id) return;\n      this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n    }\n  }, {\n    key: \"parseClass\",\n    value: function parseClass(node, isStatement, optionalId) {\n      this.next();\n      this.takeDecorators(node);\n      var oldStrict = this.state.strict;\n      this.state.strict = true;\n      this.parseClassId(node, isStatement, optionalId);\n      this.parseClassSuper(node);\n      node.body = this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n    }\n  }, {\n    key: \"isClassProperty\",\n    value: function isClassProperty() {\n      return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n    }\n  }, {\n    key: \"isClassMethod\",\n    value: function isClassMethod() {\n      return this.match(types.parenL);\n    }\n  }, {\n    key: \"isNonstaticConstructor\",\n    value: function isNonstaticConstructor(method) {\n      return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n    }\n  }, {\n    key: \"parseClassBody\",\n    value: function parseClassBody(constructorAllowsSuper, oldStrict) {\n      var _this54 = this;\n\n      this.classScope.enter();\n      var state = {\n        constructorAllowsSuper: constructorAllowsSuper,\n        hadConstructor: false,\n        hadStaticBlock: false\n      };\n      var decorators = [];\n      var classBody = this.startNode();\n      classBody.body = [];\n      this.expect(types.braceL);\n      this.withTopicForbiddingContext(function () {\n        while (!_this54.match(types.braceR)) {\n          if (_this54.eat(types.semi)) {\n            if (decorators.length > 0) {\n              throw _this54.raise(_this54.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n            }\n\n            continue;\n          }\n\n          if (_this54.match(types.at)) {\n            decorators.push(_this54.parseDecorator());\n            continue;\n          }\n\n          var member = _this54.startNode();\n\n          if (decorators.length) {\n            member.decorators = decorators;\n\n            _this54.resetStartLocationFromNode(member, decorators[0]);\n\n            decorators = [];\n          }\n\n          _this54.parseClassMember(classBody, member, state);\n\n          if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n            _this54.raise(member.start, ErrorMessages.DecoratorConstructor);\n          }\n        }\n      });\n      this.state.strict = oldStrict;\n      this.next();\n\n      if (decorators.length) {\n        throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n      }\n\n      this.classScope.exit();\n      return this.finishNode(classBody, \"ClassBody\");\n    }\n  }, {\n    key: \"parseClassMemberFromModifier\",\n    value: function parseClassMemberFromModifier(classBody, member) {\n      var key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        var method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false, false);\n        return true;\n      } else if (this.isClassProperty()) {\n        var prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseClassMember\",\n    value: function parseClassMember(classBody, member, state) {\n      var isStatic = this.isContextual(\"static\");\n\n      if (isStatic) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n\n        if (this.eat(types.braceL)) {\n          this.parseClassStaticBlock(classBody, member, state);\n          return;\n        }\n      }\n\n      this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n  }, {\n    key: \"parseClassMemberWithIsStatic\",\n    value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n      var publicMethod = member;\n      var privateMethod = member;\n      var publicProp = member;\n      var privateProp = member;\n      var method = publicMethod;\n      var publicMember = publicMethod;\n      member.static = isStatic;\n\n      if (this.eat(types.star)) {\n        method.kind = \"method\";\n        this.parseClassElementName(method);\n\n        if (this.isPrivateName(method.key)) {\n          this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n          return;\n        }\n\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n        return;\n      }\n\n      var containsEsc = this.state.containsEsc;\n      var key = this.parseClassElementName(member);\n      var isPrivate = this.isPrivateName(key);\n      var isSimple = key.type === \"Identifier\";\n      var maybeQuestionTokenStart = this.state.start;\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isClassMethod()) {\n        method.kind = \"method\";\n\n        if (isPrivate) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n          return;\n        }\n\n        var isConstructor = this.isNonstaticConstructor(publicMethod);\n        var allowsDirectSuper = false;\n\n        if (isConstructor) {\n          publicMethod.kind = \"constructor\";\n\n          if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n            this.raise(key.start, ErrorMessages.DuplicateConstructor);\n          }\n\n          state.hadConstructor = true;\n          allowsDirectSuper = state.constructorAllowsSuper;\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n      } else if (this.isClassProperty()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n        var isGenerator = this.eat(types.star);\n\n        if (publicMember.optional) {\n          this.unexpected(maybeQuestionTokenStart);\n        }\n\n        method.kind = \"method\";\n        this.parseClassElementName(method);\n        this.parsePostMemberNameModifiers(publicMember);\n\n        if (this.isPrivateName(method.key)) {\n          this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n          }\n\n          this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n        }\n      } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n        method.kind = key.name;\n        this.parseClassElementName(publicMethod);\n\n        if (this.isPrivateName(method.key)) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n          }\n\n          this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n        }\n\n        this.checkGetterSetterParams(publicMethod);\n      } else if (this.isLineTerminator()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else {\n        this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseClassElementName\",\n    value: function parseClassElementName(member) {\n      var key = this.parsePropertyName(member, true);\n\n      if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n        this.raise(key.start, ErrorMessages.StaticPrototype);\n      }\n\n      if (this.isPrivateName(key) && this.getPrivateNameSV(key) === \"constructor\") {\n        this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n      }\n\n      return key;\n    }\n  }, {\n    key: \"parseClassStaticBlock\",\n    value: function parseClassStaticBlock(classBody, member, state) {\n      var _member$decorators;\n\n      this.expectPlugin(\"classStaticBlock\", member.start);\n      this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n      this.expressionScope.enter(newExpressionScope());\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(PARAM);\n      var body = member.body = [];\n      this.parseBlockOrModuleBlockBody(body, undefined, false, types.braceR);\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.scope.exit();\n      this.state.labels = oldLabels;\n      classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n      if (state.hadStaticBlock) {\n        this.raise(member.start, ErrorMessages.DuplicateStaticBlock);\n      }\n\n      if ((_member$decorators = member.decorators) == null ? void 0 : _member$decorators.length) {\n        this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n      }\n\n      state.hadStaticBlock = true;\n    }\n  }, {\n    key: \"pushClassProperty\",\n    value: function pushClassProperty(classBody, prop) {\n      if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n        this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n      }\n\n      classBody.body.push(this.parseClassProperty(prop));\n    }\n  }, {\n    key: \"pushClassPrivateProperty\",\n    value: function pushClassPrivateProperty(classBody, prop) {\n      this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n      var node = this.parseClassPrivateProperty(prop);\n      classBody.body.push(node);\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n    }\n  }, {\n    key: \"pushClassMethod\",\n    value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n    }\n  }, {\n    key: \"pushClassPrivateMethod\",\n    value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      this.expectPlugin(\"classPrivateMethods\", method.key.start);\n      var node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n      classBody.body.push(node);\n      var kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n    }\n  }, {\n    key: \"parsePostMemberNameModifiers\",\n    value: function parsePostMemberNameModifiers(methodOrProp) {}\n  }, {\n    key: \"parseClassPrivateProperty\",\n    value: function parseClassPrivateProperty(node) {\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassPrivateProperty\");\n    }\n  }, {\n    key: \"parseClassProperty\",\n    value: function parseClassProperty(node) {\n      if (!node.typeAnnotation || this.match(types.eq)) {\n        this.expectPlugin(\"classProperties\");\n      }\n\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassProperty\");\n    }\n  }, {\n    key: \"parseInitializer\",\n    value: function parseInitializer(node) {\n      this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n      this.expressionScope.enter(newExpressionScope());\n      this.prodParam.enter(PARAM);\n      node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n      this.expressionScope.exit();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n  }, {\n    key: \"parseClassId\",\n    value: function parseClassId(node, isStatement, optionalId) {\n      var bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n      if (this.match(types.name)) {\n        node.id = this.parseIdentifier();\n\n        if (isStatement) {\n          this.checkLVal(node.id, \"class name\", bindingType);\n        }\n      } else {\n        if (optionalId || !isStatement) {\n          node.id = null;\n        } else {\n          this.unexpected(null, ErrorMessages.MissingClassName);\n        }\n      }\n    }\n  }, {\n    key: \"parseClassSuper\",\n    value: function parseClassSuper(node) {\n      node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n    }\n  }, {\n    key: \"parseExport\",\n    value: function parseExport(node) {\n      var hasDefault = this.maybeParseExportDefaultSpecifier(node);\n      var parseAfterDefault = !hasDefault || this.eat(types.comma);\n      var hasStar = parseAfterDefault && this.eatExportStar(node);\n      var hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n      var parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n      var isFromRequired = hasDefault || hasStar;\n\n      if (hasStar && !hasNamespace) {\n        if (hasDefault) this.unexpected();\n        this.parseExportFrom(node, true);\n        return this.finishNode(node, \"ExportAllDeclaration\");\n      }\n\n      var hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n      if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n        throw this.unexpected(null, types.braceL);\n      }\n\n      var hasDeclaration;\n\n      if (isFromRequired || hasSpecifiers) {\n        hasDeclaration = false;\n        this.parseExportFrom(node, isFromRequired);\n      } else {\n        hasDeclaration = this.maybeParseExportDeclaration(node);\n      }\n\n      if (isFromRequired || hasSpecifiers || hasDeclaration) {\n        this.checkExport(node, true, false, !!node.source);\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      if (this.eat(types._default)) {\n        node.declaration = this.parseExportDefaultExpression();\n        this.checkExport(node, true, true);\n        return this.finishNode(node, \"ExportDefaultDeclaration\");\n      }\n\n      throw this.unexpected(null, types.braceL);\n    }\n  }, {\n    key: \"eatExportStar\",\n    value: function eatExportStar(node) {\n      return this.eat(types.star);\n    }\n  }, {\n    key: \"maybeParseExportDefaultSpecifier\",\n    value: function maybeParseExportDefaultSpecifier(node) {\n      if (this.isExportDefaultSpecifier()) {\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = this.parseIdentifier(true);\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamespaceSpecifier\",\n    value: function maybeParseExportNamespaceSpecifier(node) {\n      if (this.isContextual(\"as\")) {\n        if (!node.specifiers) node.specifiers = [];\n        var specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n        this.next();\n        specifier.exported = this.parseModuleExportName();\n        node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamedSpecifiers\",\n    value: function maybeParseExportNamedSpecifiers(node) {\n      if (this.match(types.braceL)) {\n        var _node$specifiers2;\n\n        if (!node.specifiers) node.specifiers = [];\n\n        (_node$specifiers2 = node.specifiers).push.apply(_node$specifiers2, _toConsumableArray(this.parseExportSpecifiers()));\n\n        node.source = null;\n        node.declaration = null;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportDeclaration\",\n    value: function maybeParseExportDeclaration(node) {\n      if (this.shouldParseExportDeclaration()) {\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.parseExportDeclaration(node);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isAsyncFunction\",\n    value: function isAsyncFunction() {\n      if (!this.isContextual(\"async\")) return false;\n      var next = this.nextTokenStart();\n      return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n    }\n  }, {\n    key: \"parseExportDefaultExpression\",\n    value: function parseExportDefaultExpression() {\n      var expr = this.startNode();\n      var isAsync = this.isAsyncFunction();\n\n      if (this.match(types._function) || isAsync) {\n        this.next();\n\n        if (isAsync) {\n          this.next();\n        }\n\n        return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n      } else if (this.match(types._class)) {\n        return this.parseClass(expr, true, true);\n      } else if (this.match(types.at)) {\n        if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        }\n\n        this.parseDecorators(false);\n        return this.parseClass(expr, true, true);\n      } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n        throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n      } else {\n        var res = this.parseMaybeAssignAllowIn();\n        this.semicolon();\n        return res;\n      }\n    }\n  }, {\n    key: \"parseExportDeclaration\",\n    value: function parseExportDeclaration(node) {\n      return this.parseStatement(null);\n    }\n  }, {\n    key: \"isExportDefaultSpecifier\",\n    value: function isExportDefaultSpecifier() {\n      if (this.match(types.name)) {\n        var value = this.state.value;\n\n        if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n          return false;\n        }\n\n        if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n          var l = this.lookahead();\n\n          if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n            this.expectOnePlugin([\"flow\", \"typescript\"]);\n            return false;\n          }\n        }\n      } else if (!this.match(types._default)) {\n        return false;\n      }\n\n      var next = this.nextTokenStart();\n      var hasFrom = this.isUnparsedContextual(next, \"from\");\n\n      if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n        return true;\n      }\n\n      if (this.match(types._default) && hasFrom) {\n        var nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n        return nextAfterFrom === 34 || nextAfterFrom === 39;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseExportFrom\",\n    value: function parseExportFrom(node, expect) {\n      if (this.eatContextual(\"from\")) {\n        node.source = this.parseImportSource();\n        this.checkExport(node);\n        var assertions = this.maybeParseImportAssertions();\n\n        if (assertions) {\n          node.assertions = assertions;\n        }\n      } else {\n        if (expect) {\n          this.unexpected();\n        } else {\n          node.source = null;\n        }\n      }\n\n      this.semicolon();\n    }\n  }, {\n    key: \"shouldParseExportDeclaration\",\n    value: function shouldParseExportDeclaration() {\n      if (this.match(types.at)) {\n        this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n        if (this.hasPlugin(\"decorators\")) {\n          if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n            this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n          } else {\n            return true;\n          }\n        }\n      }\n\n      return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n    }\n  }, {\n    key: \"checkExport\",\n    value: function checkExport(node, checkNames, isDefault, isFrom) {\n      if (checkNames) {\n        if (isDefault) {\n          this.checkDuplicateExports(node, \"default\");\n\n          if (this.hasPlugin(\"exportDefaultFrom\")) {\n            var _declaration$extra;\n\n            var declaration = node.declaration;\n\n            if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n              this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n            }\n          }\n        } else if (node.specifiers && node.specifiers.length) {\n          for (var _i3 = 0, _node$specifiers = node.specifiers; _i3 < _node$specifiers.length; _i3++) {\n            var specifier = _node$specifiers[_i3];\n            var exported = specifier.exported;\n            var exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n            this.checkDuplicateExports(specifier, exportedName);\n\n            if (!isFrom && specifier.local) {\n              var local = specifier.local;\n\n              if (local.type === \"StringLiteral\") {\n                this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n              } else {\n                this.checkReservedWord(local.name, local.start, true, false);\n                this.scope.checkLocalExport(local);\n              }\n            }\n          }\n        } else if (node.declaration) {\n          if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n            var id = node.declaration.id;\n            if (!id) throw new Error(\"Assertion failure\");\n            this.checkDuplicateExports(node, id.name);\n          } else if (node.declaration.type === \"VariableDeclaration\") {\n            for (var _i4 = 0, _node$declaration$dec = node.declaration.declarations; _i4 < _node$declaration$dec.length; _i4++) {\n              var _declaration = _node$declaration$dec[_i4];\n              this.checkDeclaration(_declaration.id);\n            }\n          }\n        }\n      }\n\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (currentContextDecorators.length) {\n        throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n      }\n    }\n  }, {\n    key: \"checkDeclaration\",\n    value: function checkDeclaration(node) {\n      if (node.type === \"Identifier\") {\n        this.checkDuplicateExports(node, node.name);\n      } else if (node.type === \"ObjectPattern\") {\n        for (var _i5 = 0, _node$properties = node.properties; _i5 < _node$properties.length; _i5++) {\n          var prop = _node$properties[_i5];\n          this.checkDeclaration(prop);\n        }\n      } else if (node.type === \"ArrayPattern\") {\n        for (var _i6 = 0, _node$elements = node.elements; _i6 < _node$elements.length; _i6++) {\n          var elem = _node$elements[_i6];\n\n          if (elem) {\n            this.checkDeclaration(elem);\n          }\n        }\n      } else if (node.type === \"ObjectProperty\") {\n        this.checkDeclaration(node.value);\n      } else if (node.type === \"RestElement\") {\n        this.checkDeclaration(node.argument);\n      } else if (node.type === \"AssignmentPattern\") {\n        this.checkDeclaration(node.left);\n      }\n    }\n  }, {\n    key: \"checkDuplicateExports\",\n    value: function checkDuplicateExports(node, name) {\n      if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n        this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n      }\n\n      this.state.exportedIdentifiers.push(name);\n    }\n  }, {\n    key: \"parseExportSpecifiers\",\n    value: function parseExportSpecifiers() {\n      var nodes = [];\n      var first = true;\n      this.expect(types.braceL);\n\n      while (!this.eat(types.braceR)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types.comma);\n          if (this.eat(types.braceR)) break;\n        }\n\n        var node = this.startNode();\n        node.local = this.parseModuleExportName();\n        node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n        nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n      }\n\n      return nodes;\n    }\n  }, {\n    key: \"parseModuleExportName\",\n    value: function parseModuleExportName() {\n      if (this.match(types.string)) {\n        this.expectPlugin(\"moduleStringNames\");\n        var result = this.parseLiteral(this.state.value, \"StringLiteral\");\n        var surrogate = result.value.match(loneSurrogate);\n\n        if (surrogate) {\n          this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n        }\n\n        return result;\n      }\n\n      return this.parseIdentifier(true);\n    }\n  }, {\n    key: \"parseImport\",\n    value: function parseImport(node) {\n      node.specifiers = [];\n\n      if (!this.match(types.string)) {\n        var hasDefault = this.maybeParseDefaultImportSpecifier(node);\n        var parseNext = !hasDefault || this.eat(types.comma);\n        var hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n        if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n        this.expectContextual(\"from\");\n      }\n\n      node.source = this.parseImportSource();\n      var assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      } else {\n        var attributes = this.maybeParseModuleAttributes();\n\n        if (attributes) {\n          node.attributes = attributes;\n        }\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n  }, {\n    key: \"parseImportSource\",\n    value: function parseImportSource() {\n      if (!this.match(types.string)) this.unexpected();\n      return this.parseExprAtom();\n    }\n  }, {\n    key: \"shouldParseDefaultImport\",\n    value: function shouldParseDefaultImport(node) {\n      return this.match(types.name);\n    }\n  }, {\n    key: \"parseImportSpecifierLocal\",\n    value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = this.parseIdentifier();\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n  }, {\n    key: \"parseAssertEntries\",\n    value: function parseAssertEntries() {\n      var attrs = [];\n      var attrNames = new Set();\n\n      do {\n        if (this.match(types.braceR)) {\n          break;\n        }\n\n        var node = this.startNode();\n        var keyName = this.state.value;\n\n        if (this.match(types.string)) {\n          node.key = this.parseLiteral(keyName, \"StringLiteral\");\n        } else {\n          node.key = this.parseIdentifier(true);\n        }\n\n        this.expect(types.colon);\n\n        if (keyName !== \"type\") {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n        }\n\n        if (attrNames.has(keyName)) {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n        }\n\n        attrNames.add(keyName);\n\n        if (!this.match(types.string)) {\n          throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n        }\n\n        node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n        this.finishNode(node, \"ImportAttribute\");\n        attrs.push(node);\n      } while (this.eat(types.comma));\n\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseModuleAttributes\",\n    value: function maybeParseModuleAttributes() {\n      if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n        this.expectPlugin(\"moduleAttributes\");\n        this.next();\n      } else {\n        if (this.hasPlugin(\"moduleAttributes\")) return [];\n        return null;\n      }\n\n      var attrs = [];\n      var attributes = new Set();\n\n      do {\n        var node = this.startNode();\n        node.key = this.parseIdentifier(true);\n\n        if (node.key.name !== \"type\") {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n        }\n\n        if (attributes.has(node.key.name)) {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n        }\n\n        attributes.add(node.key.name);\n        this.expect(types.colon);\n\n        if (!this.match(types.string)) {\n          throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n        }\n\n        node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n        this.finishNode(node, \"ImportAttribute\");\n        attrs.push(node);\n      } while (this.eat(types.comma));\n\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseImportAssertions\",\n    value: function maybeParseImportAssertions() {\n      if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n        this.expectPlugin(\"importAssertions\");\n        this.next();\n      } else {\n        if (this.hasPlugin(\"importAssertions\")) return [];\n        return null;\n      }\n\n      this.eat(types.braceL);\n      var attrs = this.parseAssertEntries();\n      this.eat(types.braceR);\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseDefaultImportSpecifier\",\n    value: function maybeParseDefaultImportSpecifier(node) {\n      if (this.shouldParseDefaultImport(node)) {\n        this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseStarImportSpecifier\",\n    value: function maybeParseStarImportSpecifier(node) {\n      if (this.match(types.star)) {\n        var specifier = this.startNode();\n        this.next();\n        this.expectContextual(\"as\");\n        this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseNamedImportSpecifiers\",\n    value: function parseNamedImportSpecifiers(node) {\n      var first = true;\n      this.expect(types.braceL);\n\n      while (!this.eat(types.braceR)) {\n        if (first) {\n          first = false;\n        } else {\n          if (this.eat(types.colon)) {\n            throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n          }\n\n          this.expect(types.comma);\n          if (this.eat(types.braceR)) break;\n        }\n\n        this.parseImportSpecifier(node);\n      }\n    }\n  }, {\n    key: \"parseImportSpecifier\",\n    value: function parseImportSpecifier(node) {\n      var specifier = this.startNode();\n      specifier.imported = this.parseModuleExportName();\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        var imported = specifier.imported;\n\n        if (imported.type === \"StringLiteral\") {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n        }\n\n        this.checkReservedWord(imported.name, specifier.start, true, true);\n        specifier.local = imported.__clone();\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n  }]);\n\n  return StatementParser;\n}(ExpressionParser);\n\nvar ClassScope = function ClassScope() {\n  _classCallCheck(this, ClassScope);\n\n  this.privateNames = new Set();\n  this.loneAccessors = new Map();\n  this.undefinedPrivateNames = new Map();\n};\n\nvar ClassScopeHandler = /*#__PURE__*/function () {\n  function ClassScopeHandler(raise) {\n    _classCallCheck(this, ClassScopeHandler);\n\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  _createClass(ClassScopeHandler, [{\n    key: \"current\",\n    value: function current() {\n      return this.stack[this.stack.length - 1];\n    }\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      this.stack.push(new ClassScope());\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      var oldClassScope = this.stack.pop();\n      var current = this.current();\n\n      for (var _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n        var _Array$from$_i2 = _slicedToArray(_Array$from[_i], 2),\n            name = _Array$from$_i2[0],\n            pos = _Array$from$_i2[1];\n\n        if (current) {\n          if (!current.undefinedPrivateNames.has(name)) {\n            current.undefinedPrivateNames.set(name, pos);\n          }\n        } else {\n          this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n        }\n      }\n    }\n  }, {\n    key: \"declarePrivateName\",\n    value: function declarePrivateName(name, elementType, pos) {\n      var classScope = this.current();\n      var redefined = classScope.privateNames.has(name);\n\n      if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n        var accessor = redefined && classScope.loneAccessors.get(name);\n\n        if (accessor) {\n          var oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n          var newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n          var oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n          var newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n          redefined = oldKind === newKind || oldStatic !== newStatic;\n          if (!redefined) classScope.loneAccessors.delete(name);\n        } else if (!redefined) {\n          classScope.loneAccessors.set(name, elementType);\n        }\n      }\n\n      if (redefined) {\n        this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n      }\n\n      classScope.privateNames.add(name);\n      classScope.undefinedPrivateNames.delete(name);\n    }\n  }, {\n    key: \"usePrivateName\",\n    value: function usePrivateName(name, pos) {\n      var classScope;\n\n      for (var _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n        classScope = _this$stack[_i2];\n        if (classScope.privateNames.has(name)) return;\n      }\n\n      if (classScope) {\n        classScope.undefinedPrivateNames.set(name, pos);\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }]);\n\n  return ClassScopeHandler;\n}();\n\nvar Parser = /*#__PURE__*/function (_StatementParser) {\n  _inherits(Parser, _StatementParser);\n\n  var _super18 = _createSuper(Parser);\n\n  function Parser(options, input) {\n    var _this55;\n\n    _classCallCheck(this, Parser);\n\n    options = getOptions(options);\n    _this55 = _super18.call(this, options, input);\n\n    var ScopeHandler = _this55.getScopeHandler();\n\n    _this55.options = options;\n    _this55.inModule = _this55.options.sourceType === \"module\";\n    _this55.scope = new ScopeHandler(_this55.raise.bind(_assertThisInitialized(_this55)), _this55.inModule);\n    _this55.prodParam = new ProductionParameterHandler();\n    _this55.classScope = new ClassScopeHandler(_this55.raise.bind(_assertThisInitialized(_this55)));\n    _this55.expressionScope = new ExpressionScopeHandler(_this55.raise.bind(_assertThisInitialized(_this55)));\n    _this55.plugins = pluginsMap(_this55.options.plugins);\n    _this55.filename = options.sourceFilename;\n    return _this55;\n  }\n\n  _createClass(Parser, [{\n    key: \"getScopeHandler\",\n    value: function getScopeHandler() {\n      return ScopeHandler;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      var paramFlags = PARAM;\n\n      if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n        paramFlags |= PARAM_AWAIT;\n      }\n\n      this.scope.enter(SCOPE_PROGRAM);\n      this.prodParam.enter(paramFlags);\n      var file = this.startNode();\n      var program = this.startNode();\n      this.nextToken();\n      file.errors = null;\n      this.parseTopLevel(file, program);\n      file.errors = this.state.errors;\n      return file;\n    }\n  }]);\n\n  return Parser;\n}(StatementParser);\n\nfunction pluginsMap(plugins) {\n  var pluginMap = new Map();\n\n  for (var _i = 0; _i < plugins.length; _i++) {\n    var plugin = plugins[_i];\n\n    var _ref15 = Array.isArray(plugin) ? plugin : [plugin, {}],\n        _ref16 = _slicedToArray(_ref15, 2),\n        name = _ref16[0],\n        options = _ref16[1];\n\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      var parser = getParser(options, input);\n      var ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  var parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  var cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nvar parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  var pluginList = mixinPluginNames.filter(function (name) {\n    return hasPlugin(pluginsFromOptions, name);\n  });\n  var key = pluginList.join(\"/\");\n  var cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (var _i = 0; _i < pluginList.length; _i++) {\n      var plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","plugins","has","plugin","hasPlugin","get","last","stack","length","CommentsParser","comment","loc","state","trailingComments","push","leadingComments","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","type","body","commentStack","firstChild","lastChild","lastInStack","pop","adjustCommentsAfterTrailingComma","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorMessages","freeze","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","DuplicateStaticBlock","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","ParserError","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","errorTemplate","params","raiseWithData","data","getLocationForPosition","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","estree","superClass","pattern","flags","regex","e","estreeParseLiteral","bigInt","BigInt","_unused","String","parseLiteral","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","isAsync","isObjectProperty","checkDeclaration","method","_stmt$expression$extr","parenthesized","addExtra","args","directiveStatements","directives","map","d","directiveToStmt","concat","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","refExpressionErrors","estreeParseRegExpLiteral","estreeParseBigIntLiteral","estreeParseDecimalLiteral","startPos","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","finishNode","prop","isPattern","isAccessor","shorthand","isLHS","toAssignable","raise","key","optional","callee","exported","specifiers","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","TokContext","isExpr","preserveSpace","override","types$1","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","isIterator","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords$1","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","_temp","flowPragma","getPluginOption","val","matches","Error","tok","oldInType","inType","expect","flowParseType","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","predicate","flowParsePredicate","flowParseInterfaceish","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","flowParseTypeAndPredicateInitialiser","returnType","typeAnnotation","resetEndLocation","semicolon","insideModule","flowParseDeclareClass","flowParseDeclareFunction","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","scope","declareName","enter","parseExprAtom","bodyNode","parseImport","flowParseDeclare","exit","hasModuleExport","forEach","default","isLet","suggestion","parseExport","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","liberal","checkReservedType","right","flowParseTypeInitialiser","declare","supertype","impltype","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","flowParseTypeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeOrImplicitInstantiation","isStatic","static","lookahead","flowParseObjectPropertyKey","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","flowParseObjectTypeInternalSlot","flowParseObjectTypeIndexer","flowParseObjectTypeCallProperty","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParsePrimaryType","lh","checkNotUnderscore","flowParseGenericType","isGroupedType","flowParseInterfaceType","flowIdentToTypeAnnotation","flowParseTupleType","reinterpretTypeAsFunctionTypeParam","flowParseTypeofType","canInsertSemicolon","elementType","flowParsePrefixType","flowParsePostfixType","param","flowParseAnonFunctionWithoutParens","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","allowExpressionBody","forwardNoArrowParamsConversionAt","topLevel","flowParseInterface","shouldParseEnums","flowParseEnumDeclaration","isValidDirective","expr","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","tryParseConditionalConsequent","consequent","failed","getArrowLikeExpressions","valid","invalid","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","_node$extra","toAssignableList","trailingComma","parse","indexOf","typeCastNode","decl","declarationNode","parseExportSpecifiers","parseExportFrom","hasNamespace","isStatement","optionalId","member","parseClassMemberFromModifier","charCodeAt","finishOp","isBinding","element","operator","typeCastToParameter","exprList","trailingCommaPos","isParenthesizedExpr","_expr$extra","close","canBePattern","isTuple","maybeInArrowParameters","toReferencedList","superTypeParameters","implemented","isPrivateNameAllowed","left","specifier","contextDescription","local","checkLVal","firstIdentLoc","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","allowModifiers","call","afterLeftParse","_jsx","jsx","j_oTag","j_expr","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","allowDuplicates","isArrowFunction","canBeArrow","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","finishCallExpression","shouldParseTypes","flowParseTypeParameterInstantiationCallOrNew","targs","parseFunctionParams","parseArrow","parseArrowExpression","hasFlowComment","nextToken","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","enumName","memberName","toUpperCase","suppliedType","explicitType","endOfInit","literal","parseBooleanLiteral","init","flowEnumMemberInit","expectedType","flowEnumErrorInvalidMemberInitializer","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","flowEnumMemberRaw","flowEnumErrorInvalidMemberName","flowEnumErrorDuplicateMemberName","add","flowEnumCheckExplicitTypeMismatch","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorNumberMemberNotInitialized","initializedMembers","_i","flowEnumErrorStringMemberInconsistentlyInitailized","_i2","flowEnumErrorInvalidExplicitType","nameLoc","flowEnumParseExplicitType","flowEnumMembers","flowEnumStringMembers","empty","boolsLen","numsLen","strsLen","defaultedLen","_i3","_members$defaultedMem","_i4","_members$defaultedMem2","flowEnumErrorInconsistentMemberValues","flowEnumBody","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","chunkStart","ch","finishToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","quote","str","count","entity","substr","fromCodePoint","parseInt","jsxParseIdentifier","jsxParseNamespacedName","newNode","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseAttributeValue","jsxParseElementName","jsxParseOpeningElementAfterName","attributes","jsxParseAttribute","selfClosing","children","openingElement","jsxParseOpeningElementAt","closingElement","contents","jsxParseClosingElementAt","jsxParseElementAt","jsxParseSpreadChild","openingFragment","closingFragment","jsxParseElement","inPropertyName","jsxReadToken","jsxReadWord","jsxReadString","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","createScope","bindingType","currentScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","treatFunctionsAsVarInScope","currentVarScope","currentThisScope","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","IndexSignatureHasDeclare","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TypeAnnotationAfterAssign","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","typescript","isLiteralPropertyName","allowedModifiers","modifier","tsTryParse","tsNextTokenCanFollowModifier","bind","modified","tsParseModifier","hasOwnProperty","parseElement","tsIsListTerminator","tsParseDelimitedListWorker","expectSuccess","bracket","skipFirstToken","tsParseDelimitedList","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","typeName","lhs","parameterName","tsParseTypeAnnotation","asserts","exprName","tsParseImportType","parseIdentifierName","constraint","tsEatThenParseType","tsParseTypeParameters","tsParseBracketedList","tsParseTypeParameter","tsParseTypeReference","returnToken","signature","returnTokenRequired","tsTryParseTypeParameters","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsFillSignature","tsParseTypeMemberSemicolon","tsLookAhead","tsIsUnambiguouslyIndexSignature","tsTryParseTypeAnnotation","readonly","nodeAny","tsParseSignatureMember","createIdentifier","tsParsePropertyOrMethodSignature","idx","tsTryParseIndexSignature","parsePropertyName","tsParseObjectTypeMembers","tsParseList","tsParseTypeMember","tsIsIdentifier","tsExpectThenParseType","tsParseMappedTypeParameter","nameType","tsParseType","tsTryParseType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","parseTemplate","thisKeyword","tsParseThisTypeNode","tsParseThisTypePredicate","lookaheadCharCode","tsParseLiteralTypeNode","parseMaybeUnary","tsParseThisTypeOrThisTypePredicate","tsParseTypeQuery","tsIsStartOfMappedType","tsParseMappedType","tsParseTypeLiteral","tsParseTupleType","tsParseParenthesizedType","tsParseTemplateLiteralType","tsParseNonArrayType","objectType","indexType","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","find","kw","tsParseTypeOperator","tsParseInferType","tsParseArrayTypeOrHigher","parseConstituentType","tsParseUnionOrIntersectionType","tsParseIntersectionTypeOrHigher","tsIsUnambiguouslyStartOfFunctionType","braceStackCounter","tsSkipParameterStart","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsIsStartOfFunctionType","tsParseFunctionOrConstructorType","tsParseUnionTypeOrHigher","tsTryNextParseConstantContext","tsNextThenParseType","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseHeritageClause","cb","oldContext","tsDoThenParseType","initializer","tsParseEnumMember","parseBlockOrModuleBlockBody","nested","inner","tsParseModuleOrNamespaceDeclaration","prodParam","tsParseModuleBlock","global","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","nany","isLineTerminator","starttype","tsInDeclareContext","parseFunctionStatement","parseClass","tsParseEnumDeclaration","parseVarStatement","tsParseAmbientExternalModuleDeclaration","tsParseDeclaration","tsTryParseDeclare","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tokenType","oldMaybeInArrowParameters","tsTryParseAndCatch","tsTryParseTypeOrTypePredicateAnnotation","tsInNoContext","tsIsDeclarationStart","decorators","accessibility","parseAccessModifier","parseMaybeDefault","parseAssignableListItemTypes","elt","pp","parameter","bodilessType","isDeclareContext","items","isInParens","tsCheckForInvalidTypeCasts","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","tsTryParseGenericAsyncArrowFunction","parseTaggedTemplateExpression","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","parseExprOp","checkKeywords","ahead","tsParseImportEqualsDeclaration","importNode","isAbstractClass","tsParseModifiers","callParseClassMember","methodOrProp","tsParseExpressionStatement","isDeclare","tsTryParseExportDeclaration","resetStartLocation","definite","parseClassPropertyAnnotation","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","tsParseTypeAssertion","readToken_lt_gt","baseCount","getObjectOrClassMethodParams","firstParam","hasContextParam","oldIsDeclareContext","placeholder","placeholders","expectedNode","assertNoSpace","finishPlaceholder","isFinished","parsePlaceholder","parseStatement","takeDecorators","oldStrict","parseClassId","parseClassSuper","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","v8IntrinsicStart","identifier","parseV8Intrinsic","some","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","mixinPlugins","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","_Object$keys","State","potentialArrowAt","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","strictErrors","exportedIdentifiers","tokensLength","curPosition","skipArrays","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","checkKeywordEscapes","pushToken","old","curr","skip","clear","skipSpace","getTokenFromCode","codePointAt","block","text","addComment","pushComment","startSkip","loop","skipBlockComment","skipLineComment","readToken_interpreter","nextPos","readNumber","readRegexp","width","size","next2","readToken_dot","readToken_question","readRadixNumber","readString","readToken_slash","readToken_mult_modulo","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_eq_excl","readToken_numberSign","readWord","escaped","inClass","charAt","content","mods","char","charCode","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","readInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseFloat","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","readCodePoint","octalStr","octal","n","escStart","identifierCheck","esc","readWord1","parent","update","UtilParser","op","nameStart","nameEnd","messageOrType","missingPlugin","names","fn","oldState","abortSignal","andThrow","shorthandAssign","doubleProto","isPrivateName","ExpressionErrors","Node","parser","range","NodeUtils","processComment","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","expressionScope","recordParenthesizedIdentifierError","_node$extra2","isLast","toAssignableObjectExpressionProp","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseBindingAtom","parseObjectLike","closeCharCode","allowEmpty","elts","first","parseRestBinding","checkCommaAfterRest","parseDecorator","parseAssignableListItem","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","_expr$properties","isObjectMethod","_expr$elements","elem","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","ArrowHeadParsingScope","iterator","ExpressionScopeHandler","isCertainlyParameterDeclaration","canBeArrowParameterDeclaration","recordDeclarationError","iterateErrors","clearDeclarationError","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","ExpressionParser","isRecord","protoRef","computed","used","paramFlags","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","hasYield","parseYield","ownExpressionErrors","parseMaybeConditional","checkExpressionErrors","parseExprOps","shouldExitDescending","parseConditional","prec","hasIn","checkPipelineAtInfixOperator","logical","coalesce","hasAwait","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","isDelete","hasPropertyAsPrivateName","parseUpdate","parseExprSubscripts","parseSubscripts","maybeAsyncArrow","parseSubscript","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseMaybePrivateName","classScope","usePrivateName","getPrivateNameSV","parseNoCallExpr","shouldParseAsyncArrow","validateAsPattern","parseAsyncArrowFromCallExpression","toReferencedArguments","tag","quasi","_node$arguments","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseParenAndDistinguishExpression","parseArrayLike","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","expectOnePlugin","oldLabels","parseBlock","allowSuper","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","parseParenItem","innerEndPos","innerEndLoc","arrowNode","shouldParseArrow","metaProp","inNonArrowFunction","parseNew","isOptionalChain","parseNewArguments","parseExprList","isTagged","cooked","tail","curElt","parseTemplateElement","quasis","parseTemplateSubstitution","propHash","create","parsePropertyDefinition","checkProto","parseSpread","maybeAsyncOrAccessorProp","keyName","parseObjPropValue","_params","getGetterSetterExpectedParamCount","checkGetterSetterParams","parseObjectMethod","parseObjectProperty","oldInPropertyName","generator","initFunction","parseFunctionBodyAndFinish","setArrowFunctionParameters","parseFunctionBody","isExpression","checkParams","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","_node$params","recordAsyncArrowParametersError","reservedTest","inFunction","recordParameterInitializerError","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","StatementParser","interpreter","parseInterpreterDirective","parseBlockBody","_Array$from","from","parseStatementContent","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","assertModuleNodeAllowed","isAsyncFunction","maybeName","parseLabeledStatement","parseExpressionStatement","allowExport","currentContextDecorators","decorator","canHaveLeadingDecorator","parseMaybeDecoratorArguments","isBreak","verifyBreakContinue","lab","withTopicForbiddingContext","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","hasReturn","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","parseCatchClauseParam","finalizer","_this$state$labels","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","stmtToDirective","setStrict","isForIn","await","isFor","isTypescript","parseVarId","parseMaybeAssignDisallowIn","statement","isHangingStatement","requireId","parseFunctionId","registerFunctionStatementId","treatFunctionsAsVar","constructorAllowsSuper","hadConstructor","hadStaticBlock","parseClassMember","isClassMethod","pushClassMethod","isClassProperty","parseClassProperty","parseClassStaticBlock","parseClassMemberWithIsStatic","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","pushClassPrivateMethod","isNonstaticConstructor","isSimple","maybeQuestionTokenStart","parsePostMemberNameModifiers","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseClassPrivateProperty","declarePrivateName","parseInitializer","hasDefault","maybeParseExportDefaultSpecifier","parseAfterDefault","hasStar","eatExportStar","maybeParseExportNamespaceSpecifier","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","checkExport","parseExportDefaultExpression","isExportDefaultSpecifier","shouldParseExportDeclaration","parseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","checkDuplicateExports","_declaration$extra","_node$specifiers","exportedName","checkLocalExport","_node$declaration$dec","_i5","_node$properties","_i6","_node$elements","nodes","surrogate","toString","maybeParseDefaultImportSpecifier","parseNext","maybeParseModuleAttributes","attrs","attrNames","parseAssertEntries","shouldParseDefaultImport","parseImportSpecifierLocal","parseImportSpecifier","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","_this$stack","Parser","getScopeHandler","pluginsMap","parseTopLevel","pluginMap","_options","getParser","ast","moduleError","_unused2","getExpression","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  DuplicateStaticBlock: \"Duplicate static block in the same class\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.override = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst SCOPE_OTHER = 0b00000000,\n      SCOPE_PROGRAM = 0b00000001,\n      SCOPE_FUNCTION = 0b00000010,\n      SCOPE_ARROW = 0b00000100,\n      SCOPE_SIMPLE_CATCH = 0b00001000,\n      SCOPE_SUPER = 0b00010000,\n      SCOPE_DIRECT_SUPER = 0b00100000,\n      SCOPE_CLASS = 0b01000000,\n      SCOPE_TS_MODULE = 0b10000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => {\n  var _temp;\n\n  return _temp = class extends superClass {\n    constructor(options, input) {\n      super(options, input);\n      this.flowPragma = void 0;\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes() {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums() {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type, val) {\n      if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment) {\n      if (this.flowPragma === undefined) {\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n        if (!matches) ; else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || types.colon);\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate() {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(types.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n\n      if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n\n      if (this.eat(types.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(types.colon);\n      let type = null;\n      let predicate = null;\n\n      if (this.match(types.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n\n        if (this.match(types.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node) {\n      this.next();\n      this.flowParseInterfaceish(node, true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(node) {\n      this.next();\n      const id = node.id = this.parseIdentifier();\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(types.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(types.parenR);\n      [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n      this.resetEndLocation(id);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(node, insideModule) {\n      if (this.match(types._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(types._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(types._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(types.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(types._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(node) {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(true);\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node) {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(types.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = node.body = this.startNode();\n      const body = bodyNode.body = [];\n      this.expect(types.braceL);\n\n      while (!this.match(types.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(types._import)) {\n          this.next();\n\n          if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n            this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n          }\n\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n      this.expect(types.braceR);\n      this.finishNode(bodyNode, \"BlockStatement\");\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n          }\n\n          if (kind === \"ES\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(node, insideModule) {\n      this.expect(types._export);\n\n      if (this.eat(types._default)) {\n        if (this.match(types._function) || this.match(types._class)) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n\n        node.default = true;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n        }\n\n        if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n            node = this.parseExport(node);\n\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(node) {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(node) {\n      this.next();\n      this.flowParseTypeAlias(node);\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(node) {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(node) {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    flowParseInterfaceish(node, isClass = false) {\n      node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n      this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false\n      });\n    }\n\n    flowParseInterfaceExtends() {\n      const node = this.startNode();\n      node.id = this.flowParseQualifiedTypeIdentifier();\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node) {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word, startLoc, declaration) {\n      if (!reservedTypes.has(word)) return;\n      this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n    }\n\n    flowParseRestrictedIdentifier(liberal, declaration) {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    flowParseTypeAlias(node) {\n      node.id = this.flowParseRestrictedIdentifier(false, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(types.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(node, declare) {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(true, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.supertype = null;\n\n      if (this.match(types.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(types.colon);\n      }\n\n      node.impltype = null;\n\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(types.eq);\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    flowParseTypeParameter(requireDefault = false) {\n      const nodeStart = this.state.start;\n      const node = this.startNode();\n      const variance = this.flowParseVariance();\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(types.eq)) {\n        this.eat(types.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration() {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n      this.state.inType = true;\n\n      if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      } while (!this.isRelational(\">\"));\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType() {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n      node.extends = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false\n      });\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey() {\n      return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(node, isStatic, variance) {\n      node.static = isStatic;\n\n      if (this.lookahead().type === types.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n\n      this.expect(types.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(node, isStatic) {\n      node.static = isStatic;\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(types.bracketR);\n      this.expect(types.bracketR);\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n      } else {\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n      }\n\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(node) {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(types.parenL);\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n\n      this.expect(types.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(node, isStatic) {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    }) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const nodeStart = this.startNode();\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n      let endDelim;\n      let exact;\n      let inexact = false;\n\n      if (allowExact && this.match(types.braceBarL)) {\n        this.expect(types.braceBarL);\n        endDelim = types.braceBarR;\n        exact = true;\n      } else {\n        this.expect(types.braceL);\n        endDelim = types.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart = null;\n        let inexactStart = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(types.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (this.eat(types.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n          } else {\n            nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n          }\n        } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n\n            if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n          this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n        }\n      }\n\n      this.expect(endDelim);\n\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n      this.state.inType = oldInType;\n      return out;\n    }\n\n    flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n      if (this.eat(types.ellipsis)) {\n        const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n        let optional = false;\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    flowCheckGetterSetterParams(property) {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon() {\n      if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(types.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(startPos, startLoc, id) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType() {\n      const node = this.startNode();\n      this.expect(types._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType() {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(types.bracketL);\n\n      while (this.state.pos < this.length && !this.match(types.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(types.bracketR)) break;\n        this.expect(types.comma);\n      }\n\n      this.expect(types.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam() {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n\n      if (lh.type === types.colon || lh.type === types.question) {\n        name = this.parseIdentifier();\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(type) {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params = []) {\n      let rest = null;\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n\n      return {\n        params,\n        rest\n      };\n    }\n\n    flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    flowParsePrimaryType() {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case types.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n        case types.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true\n          });\n\n        case types.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false\n          });\n\n        case types.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case types.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(types.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n\n          break;\n\n        case types.parenL:\n          this.next();\n\n          if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n            if (this.match(types.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== types.question && token !== types.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n              this.expect(types.parenR);\n              return type;\n            } else {\n              this.eat(types.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n        case types._true:\n        case types._false:\n          node.value = this.match(types._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case types.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n\n            if (this.match(types.num)) {\n              return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            if (this.match(types.bigint)) {\n              return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n          }\n\n          throw this.unexpected();\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n        case types.bigint:\n          return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n        case types._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case types._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case types._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case types.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType() {\n      const startPos = this.state.start,\n            startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n\n      while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(types.bracketL);\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n\n      return type;\n    }\n\n    flowParsePrefixType() {\n      const node = this.startNode();\n\n      if (this.eat(types.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens() {\n      const param = this.flowParsePrefixType();\n\n      if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n\n      return param;\n    }\n\n    flowParseIntersectionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation() {\n      if (this.state.type === types.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation() {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n      const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n      if (this.match(types.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n\n      return ident;\n    }\n\n    typeCastToParameter(node) {\n      node.expression.typeAnnotation = node.typeAnnotation;\n      this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n      return node.expression;\n    }\n\n    flowParseVariance() {\n      let variance = null;\n\n      if (this.match(types.plusMin)) {\n        variance = this.startNode();\n\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n\n      return variance;\n    }\n\n    parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(node, type, isMethod = false) {\n      if (this.match(types.colon)) {\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    parseStatement(context, topLevel) {\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type === types.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n\n    parseExpressionStatement(node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    shouldParseExportDeclaration() {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier() {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n      if (!this.match(types.question)) return expr;\n\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n        if (!result.node) {\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(types.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let {\n        consequent,\n        failed\n      } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(types.colon);\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent() {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(types.colon);\n      this.state.noArrowParamsConversionAt.pop();\n      return {\n        consequent,\n        failed\n      };\n    }\n\n    getArrowLikeExpressions(node, disallowInvalid) {\n      const stack = [node];\n      const arrows = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n    }\n\n    finishArrowValidation(node) {\n      var _node$extra;\n\n      this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt(node, parse) {\n      let result;\n\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(node, startPos, startLoc) {\n      node = super.parseParenItem(node, startPos, startLoc);\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(types.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node) {\n      if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node) {\n      const decl = super.parseExport(node);\n\n      if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n\n      return decl;\n    }\n\n    parseExportDeclaration(node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node) {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node) {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n\n      return hasNamespace;\n    }\n\n    parseClassId(node, isStatement, optionalId) {\n      super.parseClassId(node, isStatement, optionalId);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(classBody, member, state) {\n      const pos = this.state.start;\n\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n        }\n      }\n    }\n\n    getTokenFromCode(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 123 && next === 124) {\n        return this.finishOp(types.braceBarL, 2);\n      } else if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else if (this.state.inType && code === 63) {\n        return this.finishOp(types.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node, isBinding) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\":\n          {\n            const last = node.properties.length - 1;\n            return node.properties.every((prop, i) => {\n              return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n            });\n          }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node, isLHS = false) {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableList(exprList, trailingCommaPos, isLHS) {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n\n        if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    toReferencedList(exprList, isParenthesizedExpr) {\n      for (let i = 0; i < exprList.length; i++) {\n        var _expr$extra;\n\n        const expr = exprList[i];\n\n        if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n      const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(expr, ...args) {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    parseClassProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassPrivateProperty(node);\n    }\n\n    isClassMethod() {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty() {\n      return this.match(types.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method) {\n      return !this.match(types.colon) && super.isNonstaticConstructor(method);\n    }\n\n    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    }\n\n    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node) {\n      super.parseClassSuper(node);\n\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented = node.implements = [];\n\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(true);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    }\n\n    parsePropertyName(node, isPrivateNameAllowed) {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      node.variance = variance;\n      return key;\n    }\n\n    parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      if (prop.variance) {\n        this.unexpected(prop.variance.start);\n      }\n\n      delete prop.variance;\n      let typeParameters;\n\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param) {\n      if (this.eat(types.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        param.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(startPos, startLoc, left) {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node) {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    maybeParseDefaultImportSpecifier(node) {\n      node.importKind = \"value\";\n      let kind = null;\n\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n\n      if (kind) {\n        const lh = this.lookahead();\n\n        if (kind === \"type\" && lh.type === types.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    parseImportSpecifier(node) {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseModuleExportName();\n      let specifierTypeKind = null;\n\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        if (firstIdent.type === \"StringLiteral\") {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(specifier.local.name, specifier.local.start, true);\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseFunctionParams(node, allowModifiers) {\n      const kind = node.kind;\n\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    parseVarId(decl, kind) {\n      super.parseVarId(decl, kind);\n\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id);\n      }\n    }\n\n    parseAsyncArrowFromCallExpression(node, call) {\n      if (this.match(types.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    shouldParseAsyncArrow() {\n      return this.match(types.colon) || super.shouldParseAsyncArrow();\n    }\n\n    parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _jsx;\n\n      let state = null;\n      let jsx;\n\n      if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n        state = this.state.clone();\n        jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n        if (!jsx.error) return jsx.node;\n        const {\n          context\n        } = this.state;\n\n        if (context[context.length - 1] === types$1.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === types$1.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n        var _jsx2, _jsx3;\n\n        state = state || this.state.clone();\n        let typeParameters;\n        const arrow = this.tryParse(abort => {\n          var _arrowExpression$extr;\n\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n            const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n            this.resetStartLocationFromNode(result, typeParameters);\n            return result;\n          });\n\n          if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n            abort();\n          }\n\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n          return arrowExpression;\n        }, state);\n        let arrowExpression = null;\n\n        if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n          if (!arrow.error && !arrow.aborted) {\n            if (arrow.node.async) {\n              this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n    }\n\n    parseArrow(node) {\n      if (this.match(types.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          const typeNode = this.startNode();\n          [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          return typeNode;\n        });\n        if (result.thrown) return null;\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow() {\n      return this.match(types.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(node, params) {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(node, allowDuplicates, isArrowFunction) {\n      if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow) {\n      return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n    }\n\n    parseSubscripts(base, startPos, startLoc, noCalls) {\n      if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n        const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n      if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, true);\n      } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(types.parenL);\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(node, subscriptState.optionalChainMember);\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n    }\n\n    parseNewArguments(node) {\n      let targs = null;\n\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n      }\n\n      node.typeArguments = targs;\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(node, undefined, true);\n    }\n\n    readToken_mult_modulo(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 42 && next === 47 && this.state.hasFlowComment) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 124 && next === 125) {\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file, program) {\n      const fileNode = super.parseTopLevel(file, program);\n\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n\n      return fileNode;\n    }\n\n    skipBlockComment() {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n        }\n\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment() {\n      const {\n        pos\n      } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n\n      while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === 58 && ch3 === 58) {\n        return shiftToFirstNonWhiteSpace + 2;\n      }\n\n      if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n        return shiftToFirstNonWhiteSpace + 12;\n      }\n\n      if (ch2 === 58 && ch3 !== 58) {\n        return shiftToFirstNonWhiteSpace;\n      }\n\n      return false;\n    }\n\n    hasFlowCommentCompletion() {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n      }\n    }\n\n    flowEnumErrorBooleanMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n    }\n\n    flowEnumErrorInvalidMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n    }\n\n    flowEnumErrorDuplicateMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(pos, {\n      enumName,\n      suppliedType\n    }) {\n      return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n    }\n\n    flowEnumErrorInvalidMemberInitializer(pos, {\n      enumName,\n      explicitType,\n      memberName\n    }) {\n      let message = null;\n\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n\n        default:\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n    }\n\n    flowEnumMemberInit() {\n      const startPos = this.state.start;\n\n      const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n      switch (this.state.type) {\n        case types.num:\n          {\n            const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"number\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types.string:\n          {\n            const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"string\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types._true:\n        case types._false:\n          {\n            const literal = this.parseBooleanLiteral();\n\n            if (endOfInit()) {\n              return {\n                type: \"boolean\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        default:\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n      }\n    }\n\n    flowEnumMemberRaw() {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n        type: \"none\",\n        pos\n      };\n      return {\n        id,\n        init\n      };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n      const {\n        explicitType\n      } = context;\n\n      if (explicitType === null) {\n        return;\n      }\n\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType\n    }) {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: []\n      };\n\n      while (!this.match(types.braceR)) {\n        const memberNode = this.startNode();\n        const {\n          id,\n          init\n        } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n\n        if (memberName === \"\") {\n          continue;\n        }\n\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        seenNames.add(memberName);\n        const context = {\n          enumName,\n          explicitType,\n          memberName\n        };\n        memberNode.id = id;\n\n        switch (init.type) {\n          case \"boolean\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n              memberNode.init = init.value;\n              members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n              break;\n            }\n\n          case \"number\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n              memberNode.init = init.value;\n              members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n              break;\n            }\n\n          case \"string\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n              memberNode.init = init.value;\n              members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n              break;\n            }\n\n          case \"invalid\":\n            {\n              throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n            }\n\n          case \"none\":\n            {\n              switch (explicitType) {\n                case \"boolean\":\n                  this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                  break;\n\n                case \"number\":\n                  this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                  break;\n\n                default:\n                  members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n              }\n            }\n        }\n\n        if (!this.match(types.braceR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      return members;\n    }\n\n    flowEnumStringMembers(initializedMembers, defaultedMembers, {\n      enumName\n    }) {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (let _i = 0; _i < initializedMembers.length; _i++) {\n          const member = initializedMembers[_i];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return defaultedMembers;\n      } else {\n        for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n          const member = defaultedMembers[_i2];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName\n    }) {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(types.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null\n          });\n        }\n\n        const {\n          value\n        } = this.state;\n        this.next();\n\n        if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value\n          });\n        }\n\n        return value;\n      }\n\n      return null;\n    }\n\n    flowEnumBody(node, {\n      enumName,\n      nameLoc\n    }) {\n      const explicitType = this.flowEnumParseExplicitType({\n        enumName\n      });\n      this.expect(types.braceL);\n      const members = this.flowEnumMembers({\n        enumName,\n        explicitType\n      });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n            enumName\n          });\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n\n        default:\n          {\n            const empty = () => {\n              node.members = [];\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            };\n\n            node.explicitType = false;\n            const boolsLen = members.booleanMembers.length;\n            const numsLen = members.numberMembers.length;\n            const strsLen = members.stringMembers.length;\n            const defaultedLen = members.defaultedMembers.length;\n\n            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n              return empty();\n            } else if (!boolsLen && !numsLen) {\n              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                enumName\n              });\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n              for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                const member = _members$defaultedMem[_i3];\n                this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.booleanMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumBooleanBody\");\n            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n              for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                const member = _members$defaultedMem2[_i4];\n                this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.numberMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumNumberBody\");\n            } else {\n              this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                enumName\n              });\n              return empty();\n            }\n          }\n      }\n    }\n\n    flowParseEnumDeclaration(node) {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType) {\n      if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    isLookaheadToken_lt() {\n      const next = this.nextTokenStart();\n\n      if (this.input.charCodeAt(next) === 60) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return afterNext !== 60 && afterNext !== 61;\n      }\n\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n\n  }, _temp;\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return (this.match(types.bracketL) || this.match(types.braceL) || this.match(types.star) || this.match(types.ellipsis) || this.match(types.hash) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modified, modifier)) {\n        this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n      }\n\n      modified[modifier] = true;\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types.question);\n    const labeled = this.eat(types.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.bigint:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types.bigint:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    return this.tsInDeclareContext(() => {\n      switch (starttype) {\n        case types._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types._const:\n          if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isDeclareContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      }\n    }\n\n    if (!node.importKind) {\n      node.importKind = \"value\";\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state) {\n    this.tsParseModifiers(member, [\"declare\"]);\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    this.tsParseModifiers(member, [\"declare\"]);\n\n    const callParseClassMember = () => {\n      super.parseClassMember(classBody, member, state);\n    };\n\n    if (member.declare) {\n      this.tsInDeclareContext(callParseClassMember);\n    } else {\n      callParseClassMember();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isDeclareContext && this.match(types.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isDeclareContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInDeclareContext(cb) {\n    const oldIsDeclareContext = this.state.isDeclareContext;\n    this.state.isDeclareContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isDeclareContext = oldIsDeclareContext;\n    }\n  }\n\n});\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers == null ? void 0 : specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n    }\n\n    const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.isDeclareContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObjectLike(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, message) {\n    this.errors.set(pos, message);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, message) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, message);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, message);\n  }\n\n  recordParenthesizedIdentifierError(pos, message) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, message);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, message);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, message) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, message);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((message, pos) => {\n      this.raise(pos, message);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    }\n\n    const update = this.match(types.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    return this.parseUpdate(node, update, refExpressionErrors);\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n    if (this.isPrivateName(property)) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(this.getPrivateNameSV(property), property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (let _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n          const arg = _node$arguments[_i];\n\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        return this.parseSuper();\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types.name)) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            }\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          return this.parseDo();\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types.bracketL:\n        {\n          return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n        }\n\n      case types.braceL:\n        {\n          return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n        }\n\n      case types._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNewOrNewTarget();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n\n          const nextCh = this.input.codePointAt(this.state.end);\n\n          if (isIdentifierStart(nextCh) || nextCh === 92) {\n            const start = this.state.start;\n            node = this.parseMaybePrivateName(true);\n\n            if (this.match(types._in)) {\n              this.expectPlugin(\"privateIn\");\n              this.classScope.usePrivateName(node.id.name, node.start);\n            } else if (this.hasPlugin(\"privateIn\")) {\n              this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n            } else {\n              throw this.unexpected(start);\n            }\n\n            return node;\n          }\n        }\n\n      case types.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo() {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = ErrorMessages.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.exprAllowed = false;\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (!this.isPrivateName(prop.key)) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (let _i2 = 0, _node$params = node.params; _i2 < _node$params.length; _i2++) {\n      const param = _node$params[_i2];\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n        }\n\n      case types._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, ErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init, true);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      constructorAllowsSuper,\n      hadConstructor: false,\n      hadStaticBlock: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types.braceL)) {\n        this.parseClassStaticBlock(classBody, member, state);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (this.isPrivateName(method.key)) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = this.isPrivateName(key);\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isPrivateName(method.key)) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassElementName(publicMethod);\n\n      if (this.isPrivateName(method.key)) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, ErrorMessages.StaticPrototype);\n    }\n\n    if (this.isPrivateName(key) && this.getPrivateNameSV(key) === \"constructor\") {\n      this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(classBody, member, state) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types.braceR);\n    this.prodParam.exit();\n    this.expressionScope.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if (state.hadStaticBlock) {\n      this.raise(member.start, ErrorMessages.DuplicateStaticBlock);\n    }\n\n    if ((_member$decorators = member.decorators) == null ? void 0 : _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n\n    state.hadStaticBlock = true;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation || this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i3 = 0, _node$specifiers = node.specifiers; _i3 < _node$specifiers.length; _i3++) {\n          const specifier = _node$specifiers[_i3];\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type === \"StringLiteral\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i4 = 0, _node$declaration$dec = node.declaration.declarations; _i4 < _node$declaration$dec.length; _i4++) {\n            const declaration = _node$declaration$dec[_i4];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i5 = 0, _node$properties = node.properties; _i5 < _node$properties.length; _i5++) {\n        const prop = _node$properties[_i5];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i6 = 0, _node$elements = node.elements; _i6 < _node$elements.length; _i6++) {\n        const elem = _node$elements[_i6];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types.string)) {\n      this.expectPlugin(\"moduleStringNames\");\n      const result = this.parseLiteral(this.state.value, \"StringLiteral\");\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n        const attributes = this.maybeParseModuleAttributes();\n\n        if (attributes) {\n          node.attributes = attributes;\n        }\n      }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (this.match(types.string)) {\n        node.key = this.parseLiteral(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types.colon);\n\n      if (keyName !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n      }\n\n      if (attrNames.has(keyName)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types.colon);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}