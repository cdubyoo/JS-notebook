{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[94],{262:function(e,n){Prism.languages.dhall={comment:/--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,greedy:!0,inside:{interpolation:{pattern:/\\$\\{[^{}]*\\}/,inside:{expression:{pattern:/(^\\$\\{)[\\s\\S]+(?=\\}$)/,lookbehind:!0,alias:\"language-dhall\",inside:null},punctuation:/\\$\\{|\\}/}}}},label:{pattern:/`[^`]*`/,greedy:!0},url:{pattern:/\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,greedy:!0},env:{pattern:/\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,greedy:!0,inside:{function:/^env/,operator:/^:/,variable:/[\\s\\S]+/}},hash:{pattern:/\\bsha256:[\\da-fA-F]{64}\\b/,inside:{function:/sha256/,operator:/:/,number:/[\\da-fA-F]{64}/}},keyword:/\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,builtin:/\\b(?:Some|None)\\b/,boolean:/\\b(?:False|True)\\b/,number:/\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,operator:/\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||[!=]=|===|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,punctuation:/\\.\\.|[{}\\[\\](),./]/,\"class-name\":/\\b[A-Z]\\w*\\b/},Prism.languages.dhall.string.inside.interpolation.inside.expression.inside=Prism.languages.dhall}}]);","name":"static/js/94.07cb4c38.chunk.js","map":{"version":3,"sources":["static/js/94.07cb4c38.chunk.js"],"names":["this","push","262","module","exports","Prism","languages","dhall","comment","string","pattern","greedy","inside","interpolation","expression","lookbehind","alias","punctuation","label","url","env","function","operator","variable","hash","number","keyword","builtin","boolean","class-name"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAEnEC,IACA,SAAUC,EAAQC,GAIxBC,MAAMC,UAAUC,MAAQ,CAItBC,QAAW,yEACXC,OAAU,CACRC,QAAS,4DACTC,QAAQ,EACRC,OAAQ,CACNC,cAAiB,CACfH,QAAS,eACTE,OAAQ,CACNE,WAAc,CACZJ,QAAS,wBACTK,YAAY,EACZC,MAAO,iBACPJ,OAAQ,MAGVK,YAAe,cAKvBC,MAAS,CACPR,QAAS,UACTC,QAAQ,GAEVQ,IAAO,CAELT,QAAS,yFACTC,QAAQ,GAEVS,IAAO,CAELV,QAAS,yCACTC,QAAQ,EACRC,OAAQ,CACNS,SAAY,OACZC,SAAY,KACZC,SAAY,YAGhBC,KAAQ,CAENd,QAAS,4BACTE,OAAQ,CACNS,SAAY,SACZC,SAAY,IACZG,OAAU,mBAIdC,QAAW,qFACXC,QAAW,oBACXC,QAAW,qBACXH,OAAU,gFACVH,SAAY,qGACZL,YAAe,qBAEfY,aAAc,gBAEhBxB,MAAMC,UAAUC,MAAME,OAAOG,OAAOC,cAAcD,OAAOE,WAAWF,OAASP,MAAMC,UAAUC"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[94],{\n\n/***/ 262:\n/***/ (function(module, exports) {\n\n// ABNF grammar:\n// https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\nPrism.languages.dhall = {\n  // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n  // The multi-line pattern is essentially this:\n  //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n  'comment': /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\$\\{[^{}]*\\}/,\n        inside: {\n          'expression': {\n            pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n            lookbehind: true,\n            alias: 'language-dhall',\n            inside: null // see blow\n\n          },\n          'punctuation': /\\$\\{|\\}/\n        }\n      }\n    }\n  },\n  'label': {\n    pattern: /`[^`]*`/,\n    greedy: true\n  },\n  'url': {\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n    pattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n    greedy: true\n  },\n  'env': {\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n    pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n    greedy: true,\n    inside: {\n      'function': /^env/,\n      'operator': /^:/,\n      'variable': /[\\s\\S]+/\n    }\n  },\n  'hash': {\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n    pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n    inside: {\n      'function': /sha256/,\n      'operator': /:/,\n      'number': /[\\da-fA-F]{64}/\n    }\n  },\n  // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n  'keyword': /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n  'builtin': /\\b(?:Some|None)\\b/,\n  'boolean': /\\b(?:False|True)\\b/,\n  'number': /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n  'operator': /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||[!=]=|===|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n  'punctuation': /\\.\\.|[{}\\[\\](),./]/,\n  // we'll just assume that every capital word left is a type name\n  'class-name': /\\b[A-Z]\\w*\\b/\n};\nPrism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-dhall.js"],"names":["Prism","languages","dhall","pattern","greedy","inside","lookbehind","alias","string","interpolation","expression"],"mappings":";;;;;AAAA;AACA;AAEAA,KAAK,CAACC,SAAN,CAAgBC,KAAhB,GAAwB;AACvB;AACA;AACA;AACA,aAAW,wEAJY;AAKvB,YAAU;AACTC,WAAO,EAAE,2DADA;AAETC,UAAM,EAAE,IAFC;AAGTC,UAAM,EAAE;AACP,uBAAiB;AAChBF,eAAO,EAAE,cADO;AAEhBE,cAAM,EAAE;AACP,wBAAc;AACbF,mBAAO,EAAE,uBADI;AAEbG,sBAAU,EAAE,IAFC;AAGbC,iBAAK,EAAE,gBAHM;AAIbF,kBAAM,EAAE,IAJK,CAIA;;AAJA,WADP;AAOP,yBAAe;AAPR;AAFQ;AADV;AAHC,GALa;AAuBvB,WAAS;AACRF,WAAO,EAAE,SADD;AAERC,UAAM,EAAE;AAFA,GAvBc;AA2BvB,SAAO;AACN;AACAD,WAAO,EAAE,wFAFH;AAGNC,UAAM,EAAE;AAHF,GA3BgB;AAgCvB,SAAO;AACN;AACAD,WAAO,EAAE,wCAFH;AAGNC,UAAM,EAAE,IAHF;AAINC,UAAM,EAAE;AACP,kBAAY,MADL;AAEP,kBAAY,IAFL;AAGP,kBAAY;AAHL;AAJF,GAhCgB;AA0CvB,UAAQ;AACP;AACAF,WAAO,EAAE,2BAFF;AAGPE,UAAM,EAAE;AACP,kBAAY,QADL;AAEP,kBAAY,GAFL;AAGP,gBAAU;AAHH;AAHD,GA1Ce;AAoDvB;AACA,aAAW,oFArDY;AAsDvB,aAAW,mBAtDY;AAwDvB,aAAW,oBAxDY;AAyDvB,YAAU,+EAzDa;AA0DvB,cAAY,oGA1DW;AA2DvB,iBAAe,oBA3DQ;AA6DvB;AACA,gBAAc;AA9DS,CAAxB;AAiEAL,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBM,MAAtB,CAA6BH,MAA7B,CAAoCI,aAApC,CAAkDJ,MAAlD,CAAyDK,UAAzD,CAAoEL,MAApE,GAA6EL,KAAK,CAACC,SAAN,CAAgBC,KAA7F,C","file":"x","sourcesContent":["// ABNF grammar:\n// https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\n\nPrism.languages.dhall = {\n\t// Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n\t// The multi-line pattern is essentially this:\n\t//   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n\t'comment': /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n\t'string': {\n\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /\\$\\{[^{}]*\\}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'expression': {\n\t\t\t\t\t\tpattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: 'language-dhall',\n\t\t\t\t\t\tinside: null // see blow\n\t\t\t\t\t},\n\t\t\t\t\t'punctuation': /\\$\\{|\\}/\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t'label': {\n\t\tpattern: /`[^`]*`/,\n\t\tgreedy: true\n\t},\n\t'url': {\n\t\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n\t\tpattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n\t\tgreedy: true\n\t},\n\t'env': {\n\t\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n\t\tpattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'function': /^env/,\n\t\t\t'operator': /^:/,\n\t\t\t'variable': /[\\s\\S]+/\n\t\t}\n\t},\n\t'hash': {\n\t\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n\t\tpattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n\t\tinside: {\n\t\t\t'function': /sha256/,\n\t\t\t'operator': /:/,\n\t\t\t'number': /[\\da-fA-F]{64}/\n\t\t}\n\t},\n\n\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n\t'keyword': /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n\t'builtin': /\\b(?:Some|None)\\b/,\n\n\t'boolean': /\\b(?:False|True)\\b/,\n\t'number': /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n\t'operator': /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||[!=]=|===|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n\t'punctuation': /\\.\\.|[{}\\[\\](),./]/,\n\n\t// we'll just assume that every capital word left is a type name\n\t'class-name': /\\b[A-Z]\\w*\\b/\n};\n\nPrism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;\n"]}}