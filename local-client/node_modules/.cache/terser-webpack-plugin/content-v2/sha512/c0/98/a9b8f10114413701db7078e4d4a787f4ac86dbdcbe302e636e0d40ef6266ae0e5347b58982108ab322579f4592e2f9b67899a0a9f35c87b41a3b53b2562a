{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[348],{516:function(e,n){Prism.languages.reason=Prism.languages.extend(\"clike\",{string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,greedy:!0},\"class-name\":/\\b[A-Z]\\w*/,keyword:/\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,operator:/\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/}),Prism.languages.insertBefore(\"reason\",\"class-name\",{character:{pattern:/'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,alias:\"string\"},constructor:{pattern:/\\b[A-Z]\\w*\\b(?!\\s*\\.)/,alias:\"variable\"},label:{pattern:/\\b[a-z]\\w*(?=::)/,alias:\"symbol\"}}),delete Prism.languages.reason.function}}]);","name":"static/js/348.c6c9cbf8.chunk.js","map":{"version":3,"sources":["static/js/348.c6c9cbf8.chunk.js"],"names":["this","push","516","module","exports","Prism","languages","reason","extend","string","pattern","greedy","class-name","keyword","operator","insertBefore","character","alias","constructor","label","function"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,OAASF,MAAMC,UAAUE,OAAO,QAAS,CACvDC,OAAU,CACRC,QAAS,sCACTC,QAAQ,GAGVC,aAAc,aACdC,QAAW,4RACXC,SAAY,wGAEdT,MAAMC,UAAUS,aAAa,SAAU,aAAc,CACnDC,UAAa,CACXN,QAAS,gEACTO,MAAO,UAETC,YAAe,CAEbR,QAAS,wBACTO,MAAO,YAETE,MAAS,CACPT,QAAS,mBACTO,MAAO,mBAIJZ,MAAMC,UAAUC,OAAOa"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[348],{\n\n/***/ 516:\n/***/ (function(module, exports) {\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-reason.js"],"names":["Prism","languages","reason","extend","pattern","greedy","insertBefore","alias","function"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,OAAvB,EAAgC;AACxD,YAAU;AACTC,WAAO,EAAE,qCADA;AAETC,UAAM,EAAE;AAFC,GAD8C;AAKxD;AACA,gBAAc,YAN0C;AAOxD,aAAW,2RAP6C;AAQxD,cAAY;AAR4C,CAAhC,CAAzB;AAUAL,KAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,QAA7B,EAAuC,YAAvC,EAAqD;AACpD,eAAa;AACZF,WAAO,EAAE,+DADG;AAEZG,SAAK,EAAE;AAFK,GADuC;AAKpD,iBAAe;AACd;AACAH,WAAO,EAAE,uBAFK;AAGdG,SAAK,EAAE;AAHO,GALqC;AAUpD,WAAS;AACRH,WAAO,EAAE,kBADD;AAERG,SAAK,EAAE;AAFC;AAV2C,CAArD,E,CAgBA;;AACA,OAAOP,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBM,QAA9B,C","file":"x","sourcesContent":["Prism.languages.reason = Prism.languages.extend('clike', {\n\t'string': {\n\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n\t\tgreedy: true\n\t},\n\t// 'class-name' must be matched *after* 'constructor' defined below\n\t'class-name': /\\b[A-Z]\\w*/,\n\t'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n\t'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n\t'character': {\n\t\tpattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n\t\talias: 'string'\n\t},\n\t'constructor': {\n\t\t// Negative look-ahead prevents from matching things like String.capitalize\n\t\tpattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n\t\talias: 'variable'\n\t},\n\t'label': {\n\t\tpattern: /\\b[a-z]\\w*(?=::)/,\n\t\talias: 'symbol'\n\t}\n});\n\n// We can't match functions property, so let's not even try.\ndelete Prism.languages.reason.function;\n"]}}