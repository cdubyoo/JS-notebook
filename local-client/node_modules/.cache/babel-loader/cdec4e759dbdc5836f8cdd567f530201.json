{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\jbook\\\\src\\\\components\\\\code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        code: bundle.code,\n        err: bundle.err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CodeCell, \"hhoVrml0sATnr/EdUbaYW2v8+8A=\", false, function () {\n  return [useActions, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/components/code-cell.tsx"],"names":["CodeEditor","Preview","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","bundle","state","bundles","id","height","display","flexDirection","content","value","code","err"],"mappings":";;;;;AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACpD,QAAM;AAAEC,IAAAA;AAAF,MAAiBJ,UAAU,EAAjC;AACA,QAAMK,MAAM,GAAGJ,gBAAgB,CAAEK,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcJ,IAAI,CAACK,EAAnB,CAAZ,CAA/B;AAEA,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACI;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,mBAAV;AAA+BC,QAAAA,OAAO,EAAE,MAAxC;AAAgDC,QAAAA,aAAa,EAAE;AAA/D,OAAZ;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACA,QAAC,UAAD;AACI,UAAA,YAAY,EAAER,IAAI,CAACS,OADvB;AAEI,UAAA,QAAQ,EAAGC,KAAD,IAAWT,UAAU,CAACD,IAAI,CAACK,EAAN,EAAUK,KAAV;AAFnC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI,QAAC,OAAD;AAAS,QAAA,IAAI,EAAER,MAAM,CAACS,IAAtB;AAA4B,QAAA,GAAG,EAAET,MAAM,CAACU;AAAxC;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAjBD;;GAAMb,Q;UACqBF,U,EACRC,gB;;;KAFbC,Q;AAmBN,eAAeA,QAAf","sourcesContent":["import CodeEditor from './code-editor'\r\nimport Preview from './preview'\r\nimport Resizable from './resizable'\r\nimport { Cell } from '../state'\r\nimport { useActions } from '../hooks/use-actions'\r\nimport { useTypedSelector } from '../hooks/use-typed-selector'\r\n\r\ninterface CodeCellProps {\r\n    cell: Cell\r\n}\r\n\r\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\r\n    const { updateCell } = useActions()\r\n    const bundle = useTypedSelector((state) => state.bundles[cell.id])\r\n\r\n    return (\r\n        <Resizable direction='vertical'>\r\n            <div style={{ height: 'calc(100% - 10px)', display: 'flex', flexDirection: 'row'}}>\r\n                <Resizable direction=\"horizontal\">\r\n                <CodeEditor \r\n                    initialValue={cell.content}\r\n                    onChange={(value) => updateCell(cell.id, value)}\r\n                />\r\n                </Resizable>\r\n                <Preview code={bundle.code} err={bundle.err}/>\r\n            </div>\r\n        </Resizable>\r\n    )\r\n}\r\n\r\nexport default CodeCell"]},"metadata":{},"sourceType":"module"}