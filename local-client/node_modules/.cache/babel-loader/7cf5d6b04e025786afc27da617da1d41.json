{"ast":null,"code":"(function (Prism) {\n  Prism.languages.http = {\n    'request-line': {\n      pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n      inside: {\n        // HTTP Verb\n        'property': /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n        // Path or query argument\n        'attr-name': /:\\w+/\n      }\n    },\n    'response-status': {\n      pattern: /^HTTP\\/1.[01] \\d+.*/m,\n      inside: {\n        // Status, e.g. 200 OK\n        'property': {\n          pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n          lookbehind: true\n        }\n      }\n    },\n    // HTTP header name\n    'header-name': {\n      pattern: /^[\\w-]+:(?=.)/m,\n      alias: 'keyword'\n    }\n  }; // Create a mapping of Content-Type headers to language definitions\n\n  var langs = Prism.languages;\n  var httpLanguages = {\n    'application/javascript': langs.javascript,\n    'application/json': langs.json || langs.javascript,\n    'application/xml': langs.xml,\n    'text/xml': langs.xml,\n    'text/html': langs.html,\n    'text/css': langs.css\n  }; // Declare which types can also be suffixes\n\n  var suffixTypes = {\n    'application/json': true,\n    'application/xml': true\n  };\n  /**\n   * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n   *\n   * @param {string} contentType\n   * @returns {string}\n   */\n\n  function getSuffixPattern(contentType) {\n    var suffix = contentType.replace(/^[a-z]+\\//, '');\n    var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n    return '(?:' + contentType + '|' + suffixPattern + ')';\n  } // Insert each content type parser that has its associated language\n  // currently loaded.\n\n\n  var options;\n\n  for (var contentType in httpLanguages) {\n    if (httpLanguages[contentType]) {\n      options = options || {};\n      var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n      options[contentType.replace(/\\//g, '-')] = {\n        pattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n        lookbehind: true,\n        inside: httpLanguages[contentType]\n      };\n    }\n  }\n\n  if (options) {\n    Prism.languages.insertBefore('http', 'header-name', options);\n  }\n})(Prism);","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-http.js"],"names":["Prism","languages","http","pattern","inside","lookbehind","alias","langs","httpLanguages","javascript","json","xml","html","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","options","RegExp","insertBefore"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AACjBA,EAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuB;AACtB,oBAAgB;AACfC,MAAAA,OAAO,EAAE,6FADM;AAEfC,MAAAA,MAAM,EAAE;AACP;AACA,oBAAY,wDAFL;AAGP;AACA,qBAAa;AAJN;AAFO,KADM;AAUtB,uBAAmB;AAClBD,MAAAA,OAAO,EAAE,sBADS;AAElBC,MAAAA,MAAM,EAAE;AACP;AACA,oBAAY;AACXD,UAAAA,OAAO,EAAE,wBADE;AAEXE,UAAAA,UAAU,EAAE;AAFD;AAFL;AAFU,KAVG;AAoBtB;AACA,mBAAe;AACdF,MAAAA,OAAO,EAAE,gBADK;AAEdG,MAAAA,KAAK,EAAE;AAFO;AArBO,GAAvB,CADiB,CA4BjB;;AACA,MAAIC,KAAK,GAAGP,KAAK,CAACC,SAAlB;AACA,MAAIO,aAAa,GAAG;AACnB,8BAA0BD,KAAK,CAACE,UADb;AAEnB,wBAAoBF,KAAK,CAACG,IAAN,IAAcH,KAAK,CAACE,UAFrB;AAGnB,uBAAmBF,KAAK,CAACI,GAHN;AAInB,gBAAYJ,KAAK,CAACI,GAJC;AAKnB,iBAAaJ,KAAK,CAACK,IALA;AAMnB,gBAAYL,KAAK,CAACM;AANC,GAApB,CA9BiB,CAuCjB;;AACA,MAAIC,WAAW,GAAG;AACjB,wBAAoB,IADH;AAEjB,uBAAmB;AAFF,GAAlB;AAKA;AACD;AACA;AACA;AACA;AACA;;AACC,WAASC,gBAAT,CAA0BC,WAA1B,EAAuC;AACtC,QAAIC,MAAM,GAAGD,WAAW,CAACE,OAAZ,CAAoB,WAApB,EAAiC,EAAjC,CAAb;AACA,QAAIC,aAAa,GAAG,0BAA0BF,MAA1B,GAAmC,cAAvD;AACA,WAAO,QAAQD,WAAR,GAAsB,GAAtB,GAA4BG,aAA5B,GAA4C,GAAnD;AACA,GAvDgB,CAyDjB;AACA;;;AACA,MAAIC,OAAJ;;AACA,OAAK,IAAIJ,WAAT,IAAwBR,aAAxB,EAAuC;AACtC,QAAIA,aAAa,CAACQ,WAAD,CAAjB,EAAgC;AAC/BI,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,UAAIjB,OAAO,GAAGW,WAAW,CAACE,WAAD,CAAX,GAA2BD,gBAAgB,CAACC,WAAD,CAA3C,GAA2DA,WAAzE;AACAI,MAAAA,OAAO,CAACJ,WAAW,CAACE,OAAZ,CAAoB,KAApB,EAA2B,GAA3B,CAAD,CAAP,GAA2C;AAC1Cf,QAAAA,OAAO,EAAEkB,MAAM,CAAC,uBAAuBlB,OAAvB,GAAiC,wCAAlC,EAA4E,GAA5E,CAD2B;AAE1CE,QAAAA,UAAU,EAAE,IAF8B;AAG1CD,QAAAA,MAAM,EAAEI,aAAa,CAACQ,WAAD;AAHqB,OAA3C;AAKA;AACD;;AACD,MAAII,OAAJ,EAAa;AACZpB,IAAAA,KAAK,CAACC,SAAN,CAAgBqB,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoDF,OAApD;AACA;AAED,CA5EA,EA4ECpB,KA5ED,CAAD","sourcesContent":["(function (Prism) {\n\tPrism.languages.http = {\n\t\t'request-line': {\n\t\t\tpattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n\t\t\tinside: {\n\t\t\t\t// HTTP Verb\n\t\t\t\t'property': /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n\t\t\t\t// Path or query argument\n\t\t\t\t'attr-name': /:\\w+/\n\t\t\t}\n\t\t},\n\t\t'response-status': {\n\t\t\tpattern: /^HTTP\\/1.[01] \\d+.*/m,\n\t\t\tinside: {\n\t\t\t\t// Status, e.g. 200 OK\n\t\t\t\t'property': {\n\t\t\t\t\tpattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// HTTP header name\n\t\t'header-name': {\n\t\t\tpattern: /^[\\w-]+:(?=.)/m,\n\t\t\talias: 'keyword'\n\t\t}\n\t};\n\n\t// Create a mapping of Content-Type headers to language definitions\n\tvar langs = Prism.languages;\n\tvar httpLanguages = {\n\t\t'application/javascript': langs.javascript,\n\t\t'application/json': langs.json || langs.javascript,\n\t\t'application/xml': langs.xml,\n\t\t'text/xml': langs.xml,\n\t\t'text/html': langs.html,\n\t\t'text/css': langs.css\n\t};\n\n\t// Declare which types can also be suffixes\n\tvar suffixTypes = {\n\t\t'application/json': true,\n\t\t'application/xml': true\n\t};\n\n\t/**\n\t * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n\t *\n\t * @param {string} contentType\n\t * @returns {string}\n\t */\n\tfunction getSuffixPattern(contentType) {\n\t\tvar suffix = contentType.replace(/^[a-z]+\\//, '');\n\t\tvar suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n\t\treturn '(?:' + contentType + '|' + suffixPattern + ')';\n\t}\n\n\t// Insert each content type parser that has its associated language\n\t// currently loaded.\n\tvar options;\n\tfor (var contentType in httpLanguages) {\n\t\tif (httpLanguages[contentType]) {\n\t\t\toptions = options || {};\n\n\t\t\tvar pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n\t\t\toptions[contentType.replace(/\\//g, '-')] = {\n\t\t\t\tpattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: httpLanguages[contentType]\n\t\t\t};\n\t\t}\n\t}\n\tif (options) {\n\t\tPrism.languages.insertBefore('http', 'header-name', options);\n\t}\n\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}