{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[108],{276:function(e,r){Prism.languages.eiffel={comment:/--.*/,string:[{pattern:/\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,greedy:!0},{pattern:/\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,greedy:!0},{pattern:/\"(?:%\\s*\\n\\s*%|%.|[^%\"\\r\\n])*\"/,greedy:!0}],char:/'(?:%.|[^%'\\r\\n])+'/,keyword:/\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,boolean:/\\b(?:True|False)\\b/i,\"class-name\":{pattern:/\\b[A-Z][\\dA-Z_]*\\b/,alias:\"builtin\"},number:[/\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,/(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i],punctuation:/:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,operator:/\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/}}}]);","name":"static/js/108.9dc14030.chunk.js","map":{"version":3,"sources":["static/js/108.9dc14030.chunk.js"],"names":["this","push","276","module","exports","Prism","languages","eiffel","comment","string","pattern","greedy","char","keyword","boolean","class-name","alias","number","punctuation","operator"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,OAAS,CACvBC,QAAW,OACXC,OAAU,CACV,CACEC,QAAS,0BACTC,QAAQ,GAEV,CACED,QAAS,0BACTC,QAAQ,GAEV,CACED,QAAS,iCACTC,QAAQ,IAGVC,KAAQ,sBACRC,QAAW,+YACXC,QAAW,sBAEXC,aAAc,CACZL,QAAW,qBACXM,MAAS,WAEXC,OAAU,CACV,mCACA,oFACAC,YAAe,+CACfC,SAAY"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[108],{\n\n/***/ 276:\n/***/ (function(module, exports) {\n\nPrism.languages.eiffel = {\n  'comment': /--.*/,\n  'string': [// Aligned-verbatim-strings\n  {\n    pattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,\n    greedy: true\n  }, // Non-aligned-verbatim-strings\n  {\n    pattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,\n    greedy: true\n  }, // Single-line string\n  {\n    pattern: /\"(?:%\\s*\\n\\s*%|%.|[^%\"\\r\\n])*\"/,\n    greedy: true\n  }],\n  // normal char | special char | char code\n  'char': /'(?:%.|[^%'\\r\\n])+'/,\n  'keyword': /\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\n  'boolean': /\\b(?:True|False)\\b/i,\n  // Convention: class-names are always all upper-case characters\n  'class-name': {\n    'pattern': /\\b[A-Z][\\dA-Z_]*\\b/,\n    'alias': 'builtin'\n  },\n  'number': [// hexa | octal | bin\n  /\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i, // Decimal\n  /(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i],\n  'punctuation': /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,\n  'operator': /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/\n};\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-eiffel.js"],"names":["Prism","languages","eiffel","pattern","greedy"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB;AACxB,aAAW,MADa;AAExB,YAAU,CACT;AACA;AACCC,WAAO,EAAE,yBADV;AAECC,UAAM,EAAE;AAFT,GAFS,EAMT;AACA;AACCD,WAAO,EAAE,yBADV;AAECC,UAAM,EAAE;AAFT,GAPS,EAWT;AACA;AACCD,WAAO,EAAE,gCADV;AAECC,UAAM,EAAE;AAFT,GAZS,CAFc;AAmBxB;AACA,UAAQ,qBApBgB;AAqBxB,aAAW,8YArBa;AAsBxB,aAAW,qBAtBa;AAuBxB;AACA,gBAAc;AACb,eAAW,oBADE;AAEb,aAAS;AAFI,GAxBU;AA4BxB,YAAU,CACT;AACA,oCAFS,EAGT;AACA,oFAJS,CA5Bc;AAkCxB,iBAAe,8CAlCS;AAmCxB,cAAY;AAnCY,CAAzB,C","file":"x","sourcesContent":["Prism.languages.eiffel = {\n\t'comment': /--.*/,\n\t'string': [\n\t\t// Aligned-verbatim-strings\n\t\t{\n\t\t\tpattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,\n\t\t\tgreedy: true\n\t\t},\n\t\t// Non-aligned-verbatim-strings\n\t\t{\n\t\t\tpattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,\n\t\t\tgreedy: true\n\t\t},\n\t\t// Single-line string\n\t\t{\n\t\t\tpattern: /\"(?:%\\s*\\n\\s*%|%.|[^%\"\\r\\n])*\"/,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t// normal char | special char | char code\n\t'char': /'(?:%.|[^%'\\r\\n])+'/,\n\t'keyword': /\\b(?:across|agent|alias|all|and|attached|as|assign|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\n\t'boolean': /\\b(?:True|False)\\b/i,\n\t// Convention: class-names are always all upper-case characters\n\t'class-name': {\n\t\t'pattern': /\\b[A-Z][\\dA-Z_]*\\b/,\n\t\t'alias': 'builtin'\n\t},\n\t'number': [\n\t\t// hexa | octal | bin\n\t\t/\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,\n\t\t// Decimal\n\t\t/(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i\n\t],\n\t'punctuation': /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,\n\t'operator': /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/\n};\n"]}}