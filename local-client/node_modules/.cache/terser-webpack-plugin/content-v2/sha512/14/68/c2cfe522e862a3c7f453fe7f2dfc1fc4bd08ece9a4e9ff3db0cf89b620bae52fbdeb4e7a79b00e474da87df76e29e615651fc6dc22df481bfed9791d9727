{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[434],{602:function(e,n){Prism.languages.vala=Prism.languages.extend(\"clike\",{\"class-name\":[{pattern:/\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,inside:{punctuation:/\\./}},{pattern:/(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}},{pattern:/((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,lookbehind:!0,inside:{punctuation:/\\./}}],constant:/\\b[A-Z0-9_]+\\b/,function:/\\w+(?=\\s*\\()/,keyword:/\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,number:/(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,operator:/\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,punctuation:/[{}[\\];(),.:]/}),Prism.languages.insertBefore(\"vala\",\"string\",{\"raw-string\":{pattern:/\"\"\"[\\s\\S]*?\"\"\"/,greedy:!0,alias:\"string\"},\"template-string\":{pattern:/@\"[\\s\\S]*?\"/,greedy:!0,inside:{interpolation:{pattern:/\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,inside:{delimiter:{pattern:/^\\$\\(?|\\)$/,alias:\"punctuation\"},rest:Prism.languages.vala}},string:/[\\s\\S]+/}}}),Prism.languages.insertBefore(\"vala\",\"keyword\",{regex:{pattern:/\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,greedy:!0,inside:{\"regex-source\":{pattern:/^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,lookbehind:!0,alias:\"language-regex\",inside:Prism.languages.regex},\"regex-flags\":/[a-z]+$/,\"regex-delimiter\":/^\\/|\\/$/}}})}}]);","name":"static/js/434.4f561564.chunk.js","map":{"version":3,"sources":["static/js/434.4f561564.chunk.js"],"names":["this","push","602","module","exports","Prism","languages","vala","extend","class-name","pattern","inside","punctuation","lookbehind","constant","function","keyword","number","operator","insertBefore","raw-string","greedy","alias","template-string","interpolation","delimiter","rest","string","regex","regex-source","regex-flags","regex-delimiter"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,KAAOF,MAAMC,UAAUE,OAAO,QAAS,CAErDC,aAAc,CAAC,CAEbC,QAAS,mDACTC,OAAQ,CACNC,YAAa,OAEd,CAEDF,QAAS,2BACTG,YAAY,EACZF,OAAQ,CACNC,YAAa,OAEd,CAEDF,QAAS,0EACTG,YAAY,EACZF,OAAQ,CACNC,YAAa,OAEd,CAEDF,QAAS,oFACTG,YAAY,EACZF,OAAQ,CACNC,YAAa,QAGjBE,SAAY,iBACZC,SAAY,eACZC,QAAW,4kBACXC,OAAU,uEACVC,SAAY,oEACZN,YAAe,kBAEjBP,MAAMC,UAAUa,aAAa,OAAQ,SAAU,CAC7CC,aAAc,CACZV,QAAS,iBACTW,QAAQ,EACRC,MAAO,UAETC,kBAAmB,CACjBb,QAAS,cACTW,QAAQ,EACRV,OAAQ,CACNa,cAAiB,CACfd,QAAS,8BACTC,OAAQ,CACNc,UAAa,CACXf,QAAS,aACTY,MAAO,eAETI,KAAMrB,MAAMC,UAAUC,OAG1BoB,OAAU,cAIhBtB,MAAMC,UAAUa,aAAa,OAAQ,UAAW,CAC9CS,MAAS,CACPlB,QAAS,yFACTW,QAAQ,EACRV,OAAQ,CACNkB,eAAgB,CACdnB,QAAS,4BACTG,YAAY,EACZS,MAAO,iBACPX,OAAQN,MAAMC,UAAUsB,OAE1BE,cAAe,UACfC,kBAAmB"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[434],{\n\n/***/ 602:\n/***/ (function(module, exports) {\n\nPrism.languages.vala = Prism.languages.extend('clike', {\n  // Classes copied from prism-csharp\n  'class-name': [{\n    // (Foo bar, Bar baz)\n    pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    // [Foo]\n    pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: true,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    // class Foo : Bar\n    pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: true,\n    inside: {\n      punctuation: /\\./\n    }\n  }, {\n    // class Foo\n    pattern: /((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n    lookbehind: true,\n    inside: {\n      punctuation: /\\./\n    }\n  }],\n  'constant': /\\b[A-Z0-9_]+\\b/,\n  'function': /\\w+(?=\\s*\\()/,\n  'keyword': /\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,\n  'number': /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n  'operator': /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n  'punctuation': /[{}[\\];(),.:]/\n});\nPrism.languages.insertBefore('vala', 'string', {\n  'raw-string': {\n    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n    greedy: true,\n    alias: 'string'\n  },\n  'template-string': {\n    pattern: /@\"[\\s\\S]*?\"/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n        inside: {\n          'delimiter': {\n            pattern: /^\\$\\(?|\\)$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.vala\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\nPrism.languages.insertBefore('vala', 'keyword', {\n  'regex': {\n    pattern: /\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: Prism.languages.regex\n      },\n      'regex-flags': /[a-z]+$/,\n      'regex-delimiter': /^\\/|\\/$/\n    }\n  }\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-vala.js"],"names":["Prism","languages","vala","extend","pattern","inside","punctuation","lookbehind","insertBefore","greedy","alias","rest","regex"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,OAAvB,EAAgC;AACtD;AACA,gBAAc,CACb;AACC;AACAC,WAAO,EAAE,kDAFV;AAGCC,UAAM,EAAE;AACPC,iBAAW,EAAE;AADN;AAHT,GADa,EAQb;AACC;AACAF,WAAO,EAAE,0BAFV;AAGCG,cAAU,EAAE,IAHb;AAICF,UAAM,EAAE;AACPC,iBAAW,EAAE;AADN;AAJT,GARa,EAgBb;AACC;AACAF,WAAO,EAAE,yEAFV;AAGCG,cAAU,EAAE,IAHb;AAICF,UAAM,EAAE;AACPC,iBAAW,EAAE;AADN;AAJT,GAhBa,EAwBb;AACC;AACAF,WAAO,EAAE,mFAFV;AAGCG,cAAU,EAAE,IAHb;AAICF,UAAM,EAAE;AACPC,iBAAW,EAAE;AADN;AAJT,GAxBa,CAFwC;AAmCtD,cAAY,gBAnC0C;AAoCtD,cAAY,cApC0C;AAqCtD,aAAW,2kBArC2C;AAsCtD,YAAU,sEAtC4C;AAuCtD,cAAY,mEAvC0C;AAwCtD,iBAAe;AAxCuC,CAAhC,CAAvB;AA2CAN,KAAK,CAACC,SAAN,CAAgBO,YAAhB,CAA6B,MAA7B,EAAoC,QAApC,EAA8C;AAC7C,gBAAc;AACbJ,WAAO,EAAE,gBADI;AAEbK,UAAM,EAAE,IAFK;AAGbC,SAAK,EAAE;AAHM,GAD+B;AAM7C,qBAAmB;AAClBN,WAAO,EAAE,aADS;AAElBK,UAAM,EAAE,IAFU;AAGlBJ,UAAM,EAAE;AACP,uBAAiB;AAChBD,eAAO,EAAE,6BADO;AAEhBC,cAAM,EAAE;AACP,uBAAa;AACZD,mBAAO,EAAE,YADG;AAEZM,iBAAK,EAAE;AAFK,WADN;AAKPC,cAAI,EAAEX,KAAK,CAACC,SAAN,CAAgBC;AALf;AAFQ,OADV;AAWP,gBAAU;AAXH;AAHU;AAN0B,CAA9C;AAyBAF,KAAK,CAACC,SAAN,CAAgBO,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;AAC/C,WAAS;AACRJ,WAAO,EAAE,wFADD;AAERK,UAAM,EAAE,IAFA;AAGRJ,UAAM,EAAE;AACP,sBAAgB;AACfD,eAAO,EAAE,2BADM;AAEfG,kBAAU,EAAE,IAFG;AAGfG,aAAK,EAAE,gBAHQ;AAIfL,cAAM,EAAEL,KAAK,CAACC,SAAN,CAAgBW;AAJT,OADT;AAOP,qBAAe,SAPR;AAQP,yBAAmB;AARZ;AAHA;AADsC,CAAhD,E","file":"x","sourcesContent":["Prism.languages.vala = Prism.languages.extend('clike', {\n\t// Classes copied from prism-csharp\n\t'class-name': [\n\t\t{\n\t\t\t// (Foo bar, Bar baz)\n\t\t\tpattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\./\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t// [Foo]\n\t\t\tpattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\./\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t// class Foo : Bar\n\t\t\tpattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\./\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t// class Foo\n\t\t\tpattern: /((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\./\n\t\t\t}\n\t\t}\n\t],\n\t'constant': /\\b[A-Z0-9_]+\\b/,\n\t'function': /\\w+(?=\\s*\\()/,\n\t'keyword': /\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,\n\t'number': /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n\t'operator': /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n\t'punctuation': /[{}[\\];(),.:]/\n});\n\nPrism.languages.insertBefore('vala','string', {\n\t'raw-string': {\n\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n\t\tgreedy: true,\n\t\talias: 'string'\n\t},\n\t'template-string': {\n\t\tpattern: /@\"[\\s\\S]*?\"/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'delimiter': {\n\t\t\t\t\t\tpattern: /^\\$\\(?|\\)$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.vala\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\n\nPrism.languages.insertBefore('vala', 'keyword', {\n\t'regex': {\n\t\tpattern: /\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-flags': /[a-z]+$/,\n\t\t\t'regex-delimiter': /^\\/|\\/$/\n\t\t}\n\t}\n});\n"]}}