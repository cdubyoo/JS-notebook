{"ast":null,"code":"!function (n) {\n  n.languages.php = n.languages.extend(\"clike\", {\n    keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    boolean: {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: \"constant\"\n    },\n    constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: !0\n    }\n  }), n.languages.insertBefore(\"php\", \"string\", {\n    \"shell-comment\": {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: !0,\n      alias: \"comment\"\n    }\n  }), n.languages.insertBefore(\"php\", \"comment\", {\n    delimiter: {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: \"important\"\n    }\n  }), n.languages.insertBefore(\"php\", \"keyword\", {\n    variable: /\\$+(?:\\w+\\b|(?={))/i,\n    package: {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }), n.languages.insertBefore(\"php\", \"operator\", {\n    property: {\n      pattern: /(->)[\\w]+/,\n      lookbehind: !0\n    }\n  });\n  var e = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,\n    lookbehind: !0,\n    inside: n.languages.php\n  };\n  n.languages.insertBefore(\"php\", \"string\", {\n    \"nowdoc-string\": {\n      pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    \"heredoc-string\": {\n      pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: e\n      }\n    },\n    \"single-quoted-string\": {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: !0,\n      alias: \"string\"\n    },\n    \"double-quoted-string\": {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        interpolation: e\n      }\n    }\n  }), delete n.languages.php.string, n.hooks.add(\"before-tokenize\", function (e) {\n    if (/<\\?/.test(e.code)) {\n      n.languages[\"markup-templating\"].buildPlaceholders(e, \"php\", /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi);\n    }\n  }), n.hooks.add(\"after-tokenize\", function (e) {\n    n.languages[\"markup-templating\"].tokenizePlaceholders(e, \"php\");\n  });\n}(Prism);","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-php.min.js"],"names":["n","languages","php","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","delimiter","variable","package","inside","punctuation","property","e","greedy","interpolation","string","hooks","add","test","code","buildPlaceholders","tokenizePlaceholders","Prism"],"mappings":"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","sourcesContent":["!function(n){n.languages.php=n.languages.extend(\"clike\",{keyword:/\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,boolean:{pattern:/\\b(?:false|true)\\b/i,alias:\"constant\"},constant:[/\\b[A-Z_][A-Z0-9_]*\\b/,/\\b(?:null)\\b/i],comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0}}),n.languages.insertBefore(\"php\",\"string\",{\"shell-comment\":{pattern:/(^|[^\\\\])#.*/,lookbehind:!0,alias:\"comment\"}}),n.languages.insertBefore(\"php\",\"comment\",{delimiter:{pattern:/\\?>$|^<\\?(?:php(?=\\s)|=)?/i,alias:\"important\"}}),n.languages.insertBefore(\"php\",\"keyword\",{variable:/\\$+(?:\\w+\\b|(?={))/i,package:{pattern:/(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,lookbehind:!0,inside:{punctuation:/\\\\/}}}),n.languages.insertBefore(\"php\",\"operator\",{property:{pattern:/(->)[\\w]+/,lookbehind:!0}});var e={pattern:/{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,lookbehind:!0,inside:n.languages.php};n.languages.insertBefore(\"php\",\"string\",{\"nowdoc-string\":{pattern:/<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,greedy:!0,alias:\"string\",inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<'?|[';]$/}}}},\"heredoc-string\":{pattern:/<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,greedy:!0,alias:\"string\",inside:{delimiter:{pattern:/^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,alias:\"symbol\",inside:{punctuation:/^<<<\"?|[\";]$/}},interpolation:e}},\"single-quoted-string\":{pattern:/'(?:\\\\[\\s\\S]|[^\\\\'])*'/,greedy:!0,alias:\"string\"},\"double-quoted-string\":{pattern:/\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,greedy:!0,alias:\"string\",inside:{interpolation:e}}}),delete n.languages.php.string,n.hooks.add(\"before-tokenize\",function(e){if(/<\\?/.test(e.code)){n.languages[\"markup-templating\"].buildPlaceholders(e,\"php\",/<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi)}}),n.hooks.add(\"after-tokenize\",function(e){n.languages[\"markup-templating\"].tokenizePlaceholders(e,\"php\")})}(Prism);"]},"metadata":{},"sourceType":"script"}