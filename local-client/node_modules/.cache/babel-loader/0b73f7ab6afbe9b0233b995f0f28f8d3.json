{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\jbook\\\\src\\\\components\\\\code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport './code-cell.css';\nimport { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport { useCumulativeCode } from '../hooks/use-cumulate-code';\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  const cumulativeCode = useCumulativeCode(cell.id);\n  useEffect(() => {\n    // if no bundle then create one without setting timer\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cumulativeCode.join('\\n'), cell.id, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-wrapper\",\n        children: //ternary expression to check for bundle loading\n        !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-cover\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-primary\",\n            max: \"100\",\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n          code: bundle.code,\n          err: bundle.err\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CodeCell, \"YdvzI4JhxthmaOjy94Z5IgkoJ60=\", false, function () {\n  return [useActions, useTypedSelector, useCumulativeCode];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","useCumulativeCode","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","join","timer","setTimeout","clearTimeout","height","display","flexDirection","content","value","loading","code","err"],"mappings":";;;;;AAAA,OAAO,iBAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,iBAAT,QAAkC,4BAAlC;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACpD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BN,UAAU,EAA/C;AACA,QAAMO,MAAM,GAAGN,gBAAgB,CAAEO,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAAZ,CAA/B;AACA,QAAMC,cAAc,GAAGT,iBAAiB,CAACE,IAAI,CAACM,EAAN,CAAxC;AAGAd,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAI,CAACW,MAAL,EAAa;AACTD,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUC,cAAc,CAACC,IAAf,CAAoB,IAApB,CAAV,CAAZ;AACA;AACH;;AAED,UAAMC,KAAK,GAAGC,UAAU,CAAC,YAAY;AACjCR,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUC,cAAc,CAACC,IAAf,CAAoB,IAApB,CAAV,CAAZ;AACH,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAM;AACTG,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACH,KAFD,CAXY,CAcZ;AACH,GAfQ,EAeN,CAACF,cAAc,CAACC,IAAf,CAAoB,IAApB,CAAD,EAA4BR,IAAI,CAACM,EAAjC,EAAqCJ,YAArC,CAfM,CAAT;AAiBA,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACA;AACI,MAAA,KAAK,EAAE;AACPU,QAAAA,MAAM,EAAE,mBADD;AAEPC,QAAAA,OAAO,EAAE,MAFF;AAGPC,QAAAA,aAAa,EAAE;AAHR,OADX;AAAA,8BAOI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACA,QAAC,UAAD;AACI,UAAA,YAAY,EAAEd,IAAI,CAACe,OADvB;AAEI,UAAA,QAAQ,EAAGC,KAAD,IAAWf,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUU,KAAV;AAFnC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAaI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,kBACE;AACE,SAACb,MAAD,IAAWA,MAAM,CAACc,OAAlB,gBACI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAU,YAAA,SAAS,EAAC,8BAApB;AAAmD,YAAA,GAAG,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,gBAOI,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEd,MAAM,CAACe,IAAtB;AAA4B,UAAA,GAAG,EAAEf,MAAM,CAACgB;AAAxC;AAAA;AAAA;AAAA;AAAA;AATR;AAAA;AAAA;AAAA;AAAA,cAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CArDD;;GAAMpB,Q;UACmCH,U,EACtBC,gB,EACQC,iB;;;KAHrBC,Q;AAuDN,eAAeA,QAAf","sourcesContent":["import './code-cell.css'\r\nimport { useEffect } from 'react'\r\nimport CodeEditor from './code-editor'\r\nimport Preview from './preview'\r\nimport Resizable from './resizable'\r\nimport { Cell } from '../state'\r\nimport { useActions } from '../hooks/use-actions'\r\nimport { useTypedSelector } from '../hooks/use-typed-selector'\r\nimport { useCumulativeCode } from '../hooks/use-cumulate-code'\r\n\r\ninterface CodeCellProps {\r\n    cell: Cell;\r\n}\r\n\r\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\r\n    const { updateCell, createBundle } = useActions()\r\n    const bundle = useTypedSelector((state) => state.bundles[cell.id])\r\n    const cumulativeCode = useCumulativeCode(cell.id)\r\n    \r\n\r\n    useEffect(() => {\r\n        // if no bundle then create one without setting timer\r\n        if (!bundle) {\r\n            createBundle(cell.id, cumulativeCode.join('\\n'))\r\n            return\r\n        }\r\n\r\n        const timer = setTimeout(async () => {\r\n            createBundle(cell.id, cumulativeCode.join('\\n'))\r\n        }, 750)\r\n\r\n        return () => {\r\n            clearTimeout(timer)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [cumulativeCode.join('\\n'), cell.id, createBundle])\r\n\r\n    return (\r\n        <Resizable direction=\"vertical\">\r\n        <div\r\n            style={{\r\n            height: 'calc(100% - 10px)',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            }}\r\n        >\r\n            <Resizable direction=\"horizontal\">\r\n            <CodeEditor\r\n                initialValue={cell.content}\r\n                onChange={(value) => updateCell(cell.id, value)}\r\n            />\r\n            </Resizable>\r\n            <div className=\"progress-wrapper\">\r\n            { //ternary expression to check for bundle loading\r\n                !bundle || bundle.loading ? (\r\n                    <div className=\"progress-cover\">\r\n                        <progress className=\"progress is-small is-primary\" max=\"100\">\r\n                                Loading\r\n                        </progress>\r\n                    </div>\r\n                ) : (\r\n                    <Preview code={bundle.code} err={bundle.err} />\r\n                )}\r\n            </div>\r\n        </div>\r\n        </Resizable>\r\n    )\r\n}\r\n\r\nexport default CodeCell;\r\n"]},"metadata":{},"sourceType":"module"}