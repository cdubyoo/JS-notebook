{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\jbook\\\\src\\\\components\\\\code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  console.log(bundle);\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content, cell.id]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: /*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CodeCell, \"drpAkWiXS2fQt+ooxmYouDs1MXE=\", false, function () {\n  return [useActions, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","console","log","timer","setTimeout","content","clearTimeout","height","display","flexDirection","value"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACpD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BL,UAAU,EAA/C;AACA,QAAMM,MAAM,GAAGL,gBAAgB,CAAEM,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAAZ,CAA/B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,KAAK,GAAGC,UAAU,CAAC,YAAY;AACjCR,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUN,IAAI,CAACW,OAAf,CAAZ;AACH,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAM;AACTC,MAAAA,YAAY,CAACH,KAAD,CAAZ;AACH,KAFD;AAGH,GARQ,EAQN,CAACT,IAAI,CAACW,OAAN,EAAeX,IAAI,CAACM,EAApB,CARM,CAAT;AAUA,sBACI,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACA;AACI,MAAA,KAAK,EAAE;AACPO,QAAAA,MAAM,EAAE,mBADD;AAEPC,QAAAA,OAAO,EAAE,MAFF;AAGPC,QAAAA,aAAa,EAAE;AAHR,OADX;AAAA,6BAOI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACA,QAAC,UAAD;AACI,UAAA,YAAY,EAAEf,IAAI,CAACW,OADvB;AAEI,UAAA,QAAQ,EAAGK,KAAD,IAAWf,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUU,KAAV;AAFnC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CAlCD;;GAAMjB,Q;UACmCF,U,EACtBC,gB;;;KAFbC,Q;AAoCN,eAAeA,QAAf","sourcesContent":["import { useEffect } from 'react'\r\nimport CodeEditor from './code-editor'\r\nimport Preview from './preview'\r\nimport Resizable from './resizable'\r\nimport { Cell } from '../state'\r\nimport { useActions } from '../hooks/use-actions'\r\nimport { useTypedSelector } from '../hooks/use-typed-selector'\r\n\r\ninterface CodeCellProps {\r\n    cell: Cell;\r\n}\r\n\r\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\r\n    const { updateCell, createBundle } = useActions()\r\n    const bundle = useTypedSelector((state) => state.bundles[cell.id])\r\n    console.log(bundle);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(async () => {\r\n            createBundle(cell.id, cell.content)\r\n        }, 750)\r\n\r\n        return () => {\r\n            clearTimeout(timer)\r\n        }\r\n    }, [cell.content, cell.id])\r\n\r\n    return (\r\n        <Resizable direction=\"vertical\">\r\n        <div\r\n            style={{\r\n            height: 'calc(100% - 10px)',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            }}\r\n        >\r\n            <Resizable direction=\"horizontal\">\r\n            <CodeEditor\r\n                initialValue={cell.content}\r\n                onChange={(value) => updateCell(cell.id, value)}\r\n            />\r\n            </Resizable>\r\n            {/* <Preview code={code} err={err} /> */}\r\n        </div>\r\n        </Resizable>\r\n    )\r\n}\r\n\r\nexport default CodeCell;\r\n"]},"metadata":{},"sourceType":"module"}