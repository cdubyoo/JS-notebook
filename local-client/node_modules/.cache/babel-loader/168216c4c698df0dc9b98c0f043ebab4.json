{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/User/Desktop/jbook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{useTypedSelector}from\"./use-typed-selector\";export var useCumulativeCode=function useCumulativeCode(cellId){return useTypedSelector(function(state){var _state$cells=state.cells,data=_state$cells.data,order=_state$cells.order;var orderedCells=order.map(function(id){return data[id];});var showFunc=\"\\n            import _React from 'react';\\n            import _ReactDOM from 'react-dom';\\n            var show = (value) => {\\n                const root = document.querySelector('#root')\\n\\n                if (typeof value === 'object') {\\n                    if (value.$$typeof && value.props) {\\n                        _ReactDOM.render(value, root)\\n                    } else {\\n                        root.innerHTML = JSON.stringify(value)\\n                    }\\n                } else {\\n                    root.innerHTML = value\\n                }\\n            }\\n        \";var showFuncNoop='var show = () => {}';var cumulativeCode=[];var _iterator=_createForOfIteratorHelper(orderedCells),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var c=_step.value;if(c.type==='code'){if(c.id===cellId){cumulativeCode.push(showFunc);}else{cumulativeCode.push(showFuncNoop);}cumulativeCode.push(c.content);}if(c.id===cellId){break;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return cumulativeCode;}).join('\\n');};","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/hooks/use-cumulate-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","cells","data","order","orderedCells","map","id","showFunc","showFuncNoop","cumulativeCode","c","type","push","content","join"],"mappings":"0KAAA,OAASA,gBAAT,KAAiC,sBAAjC,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAAoB,CACjD,MAAOF,CAAAA,gBAAgB,CAAC,SAACG,KAAD,CAAW,kBACPA,KAAK,CAACC,KADC,CACvBC,IADuB,cACvBA,IADuB,CACjBC,KADiB,cACjBA,KADiB,CAE/B,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACE,GAAN,CAAU,SAAAC,EAAE,QAAIJ,CAAAA,IAAI,CAACI,EAAD,CAAR,EAAZ,CAArB,CAGA,GAAMC,CAAAA,QAAQ,2kBAAd,CAiBA,GAAMC,CAAAA,YAAY,CAAG,qBAArB,CACA,GAAMC,CAAAA,cAAc,CAAG,EAAvB,CAvB+B,yCAwBjBL,YAxBiB,YAwB/B,+CAA4B,IAAnBM,CAAAA,CAAmB,aACxB,GAAIA,CAAC,CAACC,IAAF,GAAW,MAAf,CAAuB,CACnB,GAAID,CAAC,CAACJ,EAAF,GAASP,MAAb,CAAqB,CACjBU,cAAc,CAACG,IAAf,CAAoBL,QAApB,EACH,CAFD,IAEO,CACHE,cAAc,CAACG,IAAf,CAAoBJ,YAApB,EACH,CACDC,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB,EACH,CACD,GAAIH,CAAC,CAACJ,EAAF,GAASP,MAAb,CAAqB,CACjB,MACH,CACJ,CApC8B,qDAqC/B,MAAOU,CAAAA,cAAP,CACH,CAtCsB,CAAhB,CAsCJK,IAtCI,CAsCC,IAtCD,CAAP,CAuCH,CAxCM","sourcesContent":["import { useTypedSelector } from \"./use-typed-selector\"\r\n\r\nexport const useCumulativeCode = (cellId: string) => {\r\n    return useTypedSelector((state) => {\r\n        const { data, order } = state.cells\r\n        const orderedCells = order.map(id => data[id])\r\n\r\n\r\n        const showFunc = `\r\n            import _React from 'react';\r\n            import _ReactDOM from 'react-dom';\r\n            var show = (value) => {\r\n                const root = document.querySelector('#root')\r\n\r\n                if (typeof value === 'object') {\r\n                    if (value.$$typeof && value.props) {\r\n                        _ReactDOM.render(value, root)\r\n                    } else {\r\n                        root.innerHTML = JSON.stringify(value)\r\n                    }\r\n                } else {\r\n                    root.innerHTML = value\r\n                }\r\n            }\r\n        `\r\n        const showFuncNoop = 'var show = () => {}'\r\n        const cumulativeCode = []\r\n        for (let c of orderedCells) {\r\n            if (c.type === 'code') {\r\n                if (c.id === cellId) {\r\n                    cumulativeCode.push(showFunc)\r\n                } else {\r\n                    cumulativeCode.push(showFuncNoop)\r\n                }\r\n                cumulativeCode.push(c.content)\r\n            }\r\n            if (c.id === cellId) {\r\n                break\r\n            }\r\n        }\r\n        return cumulativeCode\r\n    }).join('\\n')\r\n}"]},"metadata":{},"sourceType":"module"}