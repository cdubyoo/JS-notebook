{"code":"(this.webpackJsonpjbook=this.webpackJsonpjbook||[]).push([[320],{488:function(n,o){Prism.languages.prolog={comment:[/%.+/,/\\/\\*[\\s\\S]*?\\*\\//],string:{pattern:/([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,variable:/\\b[A-Z_]\\w*/,function:/\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,number:/\\b\\d+\\.?\\d*/,operator:/[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,punctuation:/[(){}\\[\\],]/}}}]);","name":"static/js/320.4105ba7a.chunk.js","map":{"version":3,"sources":["static/js/320.4105ba7a.chunk.js"],"names":["this","push","488","module","exports","Prism","languages","prolog","comment","string","pattern","greedy","builtin","variable","function","number","operator","punctuation"],"mappings":"CAACA,KAAwB,kBAAIA,KAAwB,mBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEpEC,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,OAAS,CAEvBC,QAAW,CAAC,MAAO,oBAEnBC,OAAU,CACRC,QAAS,sDACTC,QAAQ,GAEVC,QAAW,6BACXC,SAAY,cAEZC,SAAY,6BACZC,OAAU,cAEVC,SAAY,iDACZC,YAAe"},"input":"(this[\"webpackJsonpjbook\"] = this[\"webpackJsonpjbook\"] || []).push([[320],{\n\n/***/ 488:\n/***/ (function(module, exports) {\n\nPrism.languages.prolog = {\n  // Syntax depends on the implementation\n  'comment': [/%.+/, /\\/\\*[\\s\\S]*?\\*\\//],\n  // Depending on the implementation, strings may allow escaped newlines and quote-escape\n  'string': {\n    pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin': /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n  'variable': /\\b[A-Z_]\\w*/,\n  // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n  'function': /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n  'number': /\\b\\d+\\.?\\d*/,\n  // Custom operators are allowed\n  'operator': /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n  'punctuation': /[(){}\\[\\],]/\n};\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-prolog.js"],"names":["Prism","languages","prolog","pattern","greedy"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB;AACxB;AACA,aAAW,CACV,KADU,EAEV,kBAFU,CAFa;AAMxB;AACA,YAAU;AACTC,WAAO,EAAE,qDADA;AAETC,UAAM,EAAE;AAFC,GAPc;AAWxB,aAAW,4BAXa;AAYxB,cAAY,aAZY;AAaxB;AACA,cAAY,4BAdY;AAexB,YAAU,aAfc;AAgBxB;AACA,cAAY,gDAjBY;AAkBxB,iBAAe;AAlBS,CAAzB,C","file":"x","sourcesContent":["Prism.languages.prolog = {\n\t// Syntax depends on the implementation\n\t'comment': [\n\t\t/%.+/,\n\t\t/\\/\\*[\\s\\S]*?\\*\\//\n\t],\n\t// Depending on the implementation, strings may allow escaped newlines and quote-escape\n\t'string': {\n\t\tpattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'builtin': /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n\t'variable': /\\b[A-Z_]\\w*/,\n\t// FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n\t'function': /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n\t'number': /\\b\\d+\\.?\\d*/,\n\t// Custom operators are allowed\n\t'operator': /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n\t'punctuation': /[(){}\\[\\],]/\n};"]}}