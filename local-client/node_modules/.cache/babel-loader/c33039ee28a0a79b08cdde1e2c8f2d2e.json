{"ast":null,"code":"(function (Prism) {\n  var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|null|open|opens|package|private|protected|provides|public|record|requires|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/; // based on the java naming conventions\n\n  var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n  Prism.languages.java = Prism.languages.extend('clike', {\n    'class-name': [className, // variables and parameters\n    // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n    /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],\n    'keyword': keywords,\n    'function': [Prism.languages.clike.function, {\n      pattern: /(\\:\\:)[a-z_]\\w*/,\n      lookbehind: true\n    }],\n    'number': /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n    'operator': {\n      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('java', 'string', {\n    'triple-quoted-string': {\n      // http://openjdk.java.net/jeps/355#Description\n      pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    }\n  });\n  Prism.languages.insertBefore('java', 'class-name', {\n    'annotation': {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    },\n    'namespace': {\n      pattern: RegExp(/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(/<keyword>/g, function () {\n        return keywords.source;\n      })),\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'generics': {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    }\n  });\n})(Prism);","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-java.js"],"names":["Prism","keywords","className","languages","java","extend","clike","function","pattern","lookbehind","insertBefore","greedy","alias","RegExp","source","replace","inside"],"mappings":"AAAC,WAAUA,KAAV,EAAiB;AAEjB,MAAIC,QAAQ,GAAG,sbAAf,CAFiB,CAIjB;;AACA,MAAIC,SAAS,GAAG,2BAAhB;AAEAF,EAAAA,KAAK,CAACG,SAAN,CAAgBC,IAAhB,GAAuBJ,KAAK,CAACG,SAAN,CAAgBE,MAAhB,CAAuB,OAAvB,EAAgC;AACtD,kBAAc,CACbH,SADa,EAGb;AACA;AACA,qCALa,CADwC;AAQtD,eAAWD,QAR2C;AAStD,gBAAY,CACXD,KAAK,CAACG,SAAN,CAAgBG,KAAhB,CAAsBC,QADX,EAEX;AACCC,MAAAA,OAAO,EAAE,iBADV;AAECC,MAAAA,UAAU,EAAE;AAFb,KAFW,CAT0C;AAgBtD,cAAU,kHAhB4C;AAiBtD,gBAAY;AACXD,MAAAA,OAAO,EAAE,uEADE;AAEXC,MAAAA,UAAU,EAAE;AAFD;AAjB0C,GAAhC,CAAvB;AAuBAT,EAAAA,KAAK,CAACG,SAAN,CAAgBO,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC9C,4BAAwB;AACvB;AACAF,MAAAA,OAAO,EAAE,gDAFc;AAGvBG,MAAAA,MAAM,EAAE,IAHe;AAIvBC,MAAAA,KAAK,EAAE;AAJgB;AADsB,GAA/C;AASAZ,EAAAA,KAAK,CAACG,SAAN,CAAgBO,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AAClD,kBAAc;AACbE,MAAAA,KAAK,EAAE,aADM;AAEbJ,MAAAA,OAAO,EAAE,cAFI;AAGbC,MAAAA,UAAU,EAAE;AAHC,KADoC;AAMlD,iBAAa;AACZD,MAAAA,OAAO,EAAEK,MAAM,CACd,qJACEC,MADF,CACSC,OADT,CACiB,YADjB,EAC+B,YAAY;AAAE,eAAOd,QAAQ,CAACa,MAAhB;AAAyB,OADtE,CADc,CADH;AAIZL,MAAAA,UAAU,EAAE,IAJA;AAKZO,MAAAA,MAAM,EAAE;AACP,uBAAe;AADR;AALI,KANqC;AAelD,gBAAY;AACXR,MAAAA,OAAO,EAAE,qEADE;AAEXQ,MAAAA,MAAM,EAAE;AACP,sBAAcd,SADP;AAEP,mBAAWD,QAFJ;AAGP,uBAAe,WAHR;AAIP,oBAAY;AAJL;AAFG;AAfsC,GAAnD;AAyBA,CAhEA,EAgECD,KAhED,CAAD","sourcesContent":["(function (Prism) {\n\n\tvar keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|null|open|opens|package|private|protected|provides|public|record|requires|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n\n\t// based on the java naming conventions\n\tvar className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n\n\tPrism.languages.java = Prism.languages.extend('clike', {\n\t\t'class-name': [\n\t\t\tclassName,\n\n\t\t\t// variables and parameters\n\t\t\t// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n\t\t\t/\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/\n\t\t],\n\t\t'keyword': keywords,\n\t\t'function': [\n\t\t\tPrism.languages.clike.function,\n\t\t\t{\n\t\t\t\tpattern: /(\\:\\:)[a-z_]\\w*/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'number': /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n\t\t'operator': {\n\t\t\tpattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'string', {\n\t\t'triple-quoted-string': {\n\t\t\t// http://openjdk.java.net/jeps/355#Description\n\t\t\tpattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('java', 'class-name', {\n\t\t'annotation': {\n\t\t\talias: 'punctuation',\n\t\t\tpattern: /(^|[^.])@\\w+/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'namespace': {\n\t\t\tpattern: RegExp(\n\t\t\t\t/(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/\n\t\t\t\t\t.source.replace(/<keyword>/g, function () { return keywords.source; })),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./,\n\t\t\t}\n\t\t},\n\t\t'generics': {\n\t\t\tpattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n\t\t\tinside: {\n\t\t\t\t'class-name': className,\n\t\t\t\t'keyword': keywords,\n\t\t\t\t'punctuation': /[<>(),.:]/,\n\t\t\t\t'operator': /[?&|]/\n\t\t\t}\n\t\t}\n\t});\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}