{"ast":null,"code":"Prism.languages.scheme = {\n  // this supports \"normal\" single-line comments:\n  //   ; comment\n  // and (potentially nested) multiline comments:\n  //   #| comment #| nested |# still comment |#\n  // (only 1 level of nesting is supported)\n  'comment': /;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n    greedy: true\n  },\n  'symbol': {\n    pattern: /'[^()#'\\s]+/,\n    greedy: true\n  },\n  'character': {\n    pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|\\S)/,\n    greedy: true,\n    alias: 'string'\n  },\n  'lambda-parameter': [// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n  {\n    pattern: /(\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n    lookbehind: true\n  }, {\n    pattern: /(\\(lambda\\s+\\()[^()']+/,\n    lookbehind: true\n  }],\n  'keyword': {\n    pattern: /(\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'builtin': {\n    // all functions of the base library of R7RS plus some of built-ins of R5Rs\n    pattern: /(\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'operator': {\n    pattern: /(\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'number': {\n    // This pattern (apart from the lookarounds) works like this:\n    //\n    // Decimal numbers\n    // <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n    // <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n    // <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n    // <dec number>     := <dec prefix>[+-]?<complex>\n    //\n    // Binary, octal, and hexadecimal numbers\n    // <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n    // <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n    // <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n    // <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n    //\n    // <number>         := <dec number>|<b.o.x. number>\n    pattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'boolean': {\n    pattern: /(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'function': {\n    pattern: /(\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'identifier': {\n    pattern: /(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'punctuation': /[()']/\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/node_modules/prismjs/components/prism-scheme.js"],"names":["Prism","languages","scheme","pattern","greedy","alias","lookbehind"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAW,sGANa;AAOxB,YAAU;AACTC,IAAAA,OAAO,EAAE,mBADA;AAETC,IAAAA,MAAM,EAAE;AAFC,GAPc;AAWxB,YAAU;AACTD,IAAAA,OAAO,EAAE,aADA;AAETC,IAAAA,MAAM,EAAE;AAFC,GAXc;AAexB,eAAa;AACZD,IAAAA,OAAO,EAAE,0CADG;AAEZC,IAAAA,MAAM,EAAE,IAFI;AAGZC,IAAAA,KAAK,EAAE;AAHK,GAfW;AAoBxB,sBAAoB,CACnB;AACA;AACCF,IAAAA,OAAO,EAAE,iDADV;AAECG,IAAAA,UAAU,EAAE;AAFb,GAFmB,EAMnB;AACCH,IAAAA,OAAO,EAAE,wBADV;AAECG,IAAAA,UAAU,EAAE;AAFb,GANmB,CApBI;AA+BxB,aAAW;AACVH,IAAAA,OAAO,EAAE,iYADC;AAEVG,IAAAA,UAAU,EAAE;AAFF,GA/Ba;AAmCxB,aAAW;AACV;AACAH,IAAAA,OAAO,EAAE,snDAFC;AAGVG,IAAAA,UAAU,EAAE;AAHF,GAnCa;AAwCxB,cAAY;AACXH,IAAAA,OAAO,EAAE,wCADE;AAEXG,IAAAA,UAAU,EAAE;AAFD,GAxCY;AA4CxB,YAAU;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,IAAAA,OAAO,EAAE,sVAhBA;AAiBTG,IAAAA,UAAU,EAAE;AAjBH,GA5Cc;AA+DxB,aAAW;AACVH,IAAAA,OAAO,EAAE,4CADC;AAEVG,IAAAA,UAAU,EAAE;AAFF,GA/Da;AAmExB,cAAY;AACXH,IAAAA,OAAO,EAAE,oDADE;AAEXG,IAAAA,UAAU,EAAE;AAFD,GAnEY;AAuExB,gBAAc;AACbH,IAAAA,OAAO,EAAE,2CADI;AAEbG,IAAAA,UAAU,EAAE,IAFC;AAGbF,IAAAA,MAAM,EAAE;AAHK,GAvEU;AA4ExB,iBAAe;AA5ES,CAAzB","sourcesContent":["Prism.languages.scheme = {\n\t// this supports \"normal\" single-line comments:\n\t//   ; comment\n\t// and (potentially nested) multiline comments:\n\t//   #| comment #| nested |# still comment |#\n\t// (only 1 level of nesting is supported)\n\t'comment': /;.*|#;\\s*\\((?:[^()]|\\([^()]*\\))*\\)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n\t'string': {\n\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t\tgreedy: true\n\t},\n\t'symbol': {\n\t\tpattern: /'[^()#'\\s]+/,\n\t\tgreedy: true\n\t},\n\t'character': {\n\t\tpattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|\\S)/,\n\t\tgreedy: true,\n\t\talias: 'string'\n\t},\n\t'lambda-parameter': [\n\t\t// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n\t\t{\n\t\t\tpattern: /(\\(lambda\\s+)(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(lambda\\s+\\()[^()']+/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': {\n\t\tpattern: /(\\()(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'builtin': {\n\t\t// all functions of the base library of R7RS plus some of built-ins of R5Rs\n\t\tpattern: /(\\()(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'operator': {\n\t\tpattern: /(\\()(?:[-+*%/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'number': {\n\t\t// This pattern (apart from the lookarounds) works like this:\n\t\t//\n\t\t// Decimal numbers\n\t\t// <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n\t\t// <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n\t\t// <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n\t\t// <dec number>     := <dec prefix>[+-]?<complex>\n\t\t//\n\t\t// Binary, octal, and hexadecimal numbers\n\t\t// <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n\t\t// <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n\t\t// <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n\t\t// <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n\t\t//\n\t\t// <number>         := <dec number>|<b.o.x. number>\n\t\tpattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'boolean': {\n\t\tpattern: /(^|[\\s()])#(?:[ft]|false|true)(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'function': {\n\t\tpattern: /(\\()(?:[^|()'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'identifier': {\n\t\tpattern: /(^|[\\s()])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\s]|$)/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t'punctuation': /[()']/\n};\n"]},"metadata":{},"sourceType":"script"}