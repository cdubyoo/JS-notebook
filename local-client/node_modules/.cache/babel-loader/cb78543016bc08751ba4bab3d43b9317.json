{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\jbook\\\\src\\\\components\\\\cell-list.tsx\",\n    _s = $RefreshSig$();\n\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport CellListItem from './cell-list-item';\n\nconst CellList = () => {\n  _s();\n\n  const cells = useTypedSelector(({\n    cells: {\n      order,\n      data\n    }\n  }) => order.map(id => data[id]));\n  const renderedCells = cells.map(cell => /*#__PURE__*/_jsxDEV(CellListItem, {\n    cell: cell\n  }, cell.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderedCells\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CellList, \"ij3ho+NMbIxaBKnXgl+evU0tiZI=\", false, function () {\n  return [useTypedSelector];\n});\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/components/cell-list.tsx"],"names":["useTypedSelector","CellListItem","CellList","cells","order","data","map","id","renderedCells","cell"],"mappings":";;;;;AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,YAAP,MAAyB,kBAAzB;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,KAAK,GAAGH,gBAAgB,CAAC,CAAC;AAAEG,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAT,GAAD,KAC3BD,KAAK,CAACE,GAAN,CAAWC,EAAD,IAAQF,IAAI,CAACE,EAAD,CAAtB,CAD0B,CAA9B;AAIA,QAAMC,aAAa,GAAGL,KAAK,CAACG,GAAN,CAAWG,IAAD,iBAC5B,QAAC,YAAD;AAA4B,IAAA,IAAI,EAAEA;AAAlC,KAAmBA,IAAI,CAACF,EAAxB;AAAA;AAAA;AAAA;AAAA,UADkB,CAAtB;AAIA,sBAAO;AAAA,cAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAVD;;GAAMN,Q;UACYF,gB;;;KADZE,Q;AAYN,eAAeA,QAAf","sourcesContent":["import { useTypedSelector } from '../hooks/use-typed-selector'\r\nimport CellListItem from './cell-list-item'\r\n\r\nconst CellList: React.FC = () => {\r\n    const cells = useTypedSelector(({ cells: { order, data } }) => \r\n        order.map((id) => data[id])\r\n    )\r\n\r\n    const renderedCells = cells.map((cell) => (\r\n        <CellListItem key={cell.id} cell={cell} />\r\n    ))\r\n\r\n    return <div>{renderedCells}</div>\r\n}\r\n\r\nexport default CellList"]},"metadata":{},"sourceType":"module"}