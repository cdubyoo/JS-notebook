{"ast":null,"code":"import { ActionType } from '../action-types';\nimport bundle from '../../bundler';\nexport const updateCell = (id, content) => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content\n    }\n  };\n};\nexport const deleteCell = id => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id\n  };\n};\nexport const moveCell = (id, direction) => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction\n    }\n  };\n};\nexport const insertCellAfter = (id, CellType) => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: CellType\n    }\n  };\n};\nexport const createBundle = (cellId, input) => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.BUNDLE_CREATED,\n      payload: {\n        cellId: cellId\n      }\n    });\n    const result = await bundle(input);\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId: cellId,\n        bundle: {\n          code: result.code,\n          err: result.err\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/state/action-creators/index.ts"],"names":["ActionType","bundle","updateCell","id","content","type","UPDATE_CELL","payload","deleteCell","DELETE_CELL","moveCell","direction","MOVE_CELL","insertCellAfter","CellType","INSERT_CELL_AFTER","createBundle","cellId","input","dispatch","BUNDLE_CREATED","result","BUNDLE_COMPLETE","code","err"],"mappings":"AACA,SAASA,UAAT,QAA2B,iBAA3B;AAUA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,EAAD,EAAaC,OAAb,KAAmD;AACzE,SAAO;AACHC,IAAAA,IAAI,EAAEL,UAAU,CAACM,WADd;AAEHC,IAAAA,OAAO,EAAE;AACLJ,MAAAA,EADK;AAELC,MAAAA;AAFK;AAFN,GAAP;AAOH,CARM;AAUP,OAAO,MAAMI,UAAU,GAAIL,EAAD,IAAkC;AACxD,SAAO;AACHE,IAAAA,IAAI,EAAEL,UAAU,CAACS,WADd;AAEHF,IAAAA,OAAO,EAAEJ;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMO,QAAQ,GAAG,CAACP,EAAD,EAAaQ,SAAb,KAAsD;AAC1E,SAAO;AACHN,IAAAA,IAAI,EAAEL,UAAU,CAACY,SADd;AAEHL,IAAAA,OAAO,EAAE;AACLJ,MAAAA,EADK;AAELQ,MAAAA;AAFK;AAFN,GAAP;AAOH,CARM;AAUP,OAAO,MAAME,eAAe,GAAG,CAACV,EAAD,EAAoBW,QAApB,KAAmE;AAC9F,SAAO;AACHT,IAAAA,IAAI,EAAEL,UAAU,CAACe,iBADd;AAEHR,IAAAA,OAAO,EAAE;AACLJ,MAAAA,EADK;AAELE,MAAAA,IAAI,EAAES;AAFD;AAFN,GAAP;AAOH,CARM;AAUP,OAAO,MAAME,YAAY,GAAG,CAACC,MAAD,EAAiBC,KAAjB,KAAmC;AAC3D,SAAO,MAAOC,QAAP,IAAsC;AACzCA,IAAAA,QAAQ,CAAC;AACLd,MAAAA,IAAI,EAAEL,UAAU,CAACoB,cADZ;AAELb,MAAAA,OAAO,EAAE;AACLU,QAAAA,MAAM,EAAEA;AADH;AAFJ,KAAD,CAAR;AAOA,UAAMI,MAAM,GAAG,MAAMpB,MAAM,CAACiB,KAAD,CAA3B;AAEAC,IAAAA,QAAQ,CAAC;AACLd,MAAAA,IAAI,EAAEL,UAAU,CAACsB,eADZ;AAELf,MAAAA,OAAO,EAAE;AACLU,QAAAA,MAAM,EAAEA,MADH;AAELhB,QAAAA,MAAM,EAAE;AACJsB,UAAAA,IAAI,EAAEF,MAAM,CAACE,IADT;AAEJC,UAAAA,GAAG,EAAEH,MAAM,CAACG;AAFR;AAFH;AAFJ,KAAD,CAAR;AAUH,GApBD;AAqBH,CAtBM","sourcesContent":["import {  Dispatch } from 'redux'\r\nimport { ActionType } from '../action-types'\r\nimport { \r\n    UpdateCellAction, \r\n    DeleteCellAction, \r\n    MoveCellAction, \r\n    InsertCellAfterAction,\r\n    Direction,\r\n    Action\r\n} from '../actions'\r\nimport { CellTypes } from '../cell'\r\nimport bundle from '../../bundler'\r\n\r\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\r\n    return {\r\n        type: ActionType.UPDATE_CELL,\r\n        payload: {\r\n            id,\r\n            content\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteCell = (id: string): DeleteCellAction => {\r\n    return {\r\n        type: ActionType.DELETE_CELL,\r\n        payload: id\r\n    }\r\n}\r\n\r\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\r\n    return {\r\n        type: ActionType.MOVE_CELL,\r\n        payload: {\r\n            id,\r\n            direction\r\n        }\r\n    }\r\n}\r\n\r\nexport const insertCellAfter = (id: string | null, CellType: CellTypes): InsertCellAfterAction => {\r\n    return {\r\n        type: ActionType.INSERT_CELL_AFTER,\r\n        payload: {\r\n            id,\r\n            type: CellType\r\n        }\r\n    }\r\n}\r\n\r\nexport const createBundle = (cellId: string, input: string) => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type: ActionType.BUNDLE_CREATED,\r\n            payload: {\r\n                cellId: cellId\r\n            }\r\n        })\r\n\r\n        const result = await bundle(input)\r\n\r\n        dispatch({\r\n            type: ActionType.BUNDLE_COMPLETE,\r\n            payload: {\r\n                cellId: cellId,\r\n                bundle: {\r\n                    code: result.code,\r\n                    err: result.err\r\n                }\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}