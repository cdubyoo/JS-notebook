{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\jbook\\\\src\\\\components\\\\code-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport './code-editor.css';\nimport './syntax.css';\nimport { useRef } from 'react';\nimport MonacoEditor from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport codeShift from 'jscodeshift';\nimport Highlighter from 'monaco-jsx-highlighter';\n\nconst CodeEditor = ({\n  onChange,\n  initialValue\n}) => {\n  _s();\n\n  const editorRef = useRef(); // work around for onChange to display value\n\n  const onEditorDidMount = (getValue, monacoEditor) => {\n    var _monacoEditor$getMode;\n\n    // reference monacoEditor\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n    (_monacoEditor$getMode = monacoEditor.getModel()) === null || _monacoEditor$getMode === void 0 ? void 0 : _monacoEditor$getMode.updateOptions({\n      tabSize: 2\n    });\n    const highlighter = new Highlighter( // @ts-ignore\n    window.monaco, codeShift, monacoEditor);\n    highlighter.highLightOnDidChangeModelContent(() => {}, () => {}, undefined, () => {});\n  };\n\n  const onFormatClick = () => {\n    // get current value from editor\n    const unformatted = editorRef.current.getModel().getValue(); // format that value\n\n    const formatted = prettier.format(unformatted, {\n      parser: 'babel',\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true\n    }).replace(/\\n$/, ''); // remove new line\n    // set the formatted value back in the editor\n\n    editorRef.current.setValue(formatted);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button-format is-primary is-small\",\n      onClick: onFormatClick,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      editorDidMount: onEditorDidMount,\n      value: initialValue,\n      theme: \"dark\",\n      language: \"javascript\",\n      height: \"100%\",\n      options: {\n        wordWrap: 'on',\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 13\n  }, this);\n};\n\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/components/code-editor.tsx"],"names":["useRef","MonacoEditor","prettier","parser","codeShift","Highlighter","CodeEditor","onChange","initialValue","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","highlighter","window","monaco","highLightOnDidChangeModelContent","undefined","onFormatClick","unformatted","formatted","format","plugins","useTabs","semi","singleQuote","replace","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":";;;;;AAAA,OAAO,mBAAP;AACA,OAAO,cAAP;AACA,SAASA,MAAT,QAAuB,OAAvB;AACA,OAAOC,YAAP,MAA6C,sBAA7C;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;AAQA,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAgC;AAAA;;AAC1E,QAAMC,SAAS,GAAGT,MAAM,EAAxB,CAD0E,CAE1E;;AACA,QAAMU,gBAAgC,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;AAAA;;AACjE;AACAH,IAAAA,SAAS,CAACI,OAAV,GAAoBD,YAApB;AACAA,IAAAA,YAAY,CAACE,uBAAb,CAAqC,MAAM;AACvCP,MAAAA,QAAQ,CAACI,QAAQ,EAAT,CAAR;AACH,KAFD;AAGA,6BAAAC,YAAY,CAACG,QAAb,kFAAyBC,aAAzB,CAAuC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAvC;AAEA,UAAMC,WAAW,GAAG,IAAIb,WAAJ,EAChB;AACAc,IAAAA,MAAM,CAACC,MAFS,EAGhBhB,SAHgB,EAIhBQ,YAJgB,CAApB;AAMAM,IAAAA,WAAW,CAACG,gCAAZ,CACI,MAAM,CAAE,CADZ,EAEI,MAAM,CAAE,CAFZ,EAGIC,SAHJ,EAII,MAAM,CAAE,CAJZ;AAMH,GApBD;;AAsBA,QAAMC,aAAa,GAAG,MAAM;AACxB;AACA,UAAMC,WAAW,GAAGf,SAAS,CAACI,OAAV,CAAkBE,QAAlB,GAA6BJ,QAA7B,EAApB,CAFwB,CAIxB;;AACA,UAAMc,SAAS,GAAGvB,QAAQ,CAACwB,MAAT,CAAgBF,WAAhB,EAA6B;AAC3CrB,MAAAA,MAAM,EAAE,OADmC;AAE3CwB,MAAAA,OAAO,EAAE,CAACxB,MAAD,CAFkC;AAG3CyB,MAAAA,OAAO,EAAE,KAHkC;AAI3CC,MAAAA,IAAI,EAAE,IAJqC;AAK3CC,MAAAA,WAAW,EAAE;AAL8B,KAA7B,EAMfC,OANe,CAMP,KANO,EAMA,EANA,CAAlB,CALwB,CAWF;AACtB;;AACAtB,IAAAA,SAAS,CAACI,OAAV,CAAkBmB,QAAlB,CAA2BP,SAA3B;AACH,GAdD;;AAgBA,sBACQ;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACI;AACI,MAAA,SAAS,EAAC,0CADd;AAEI,MAAA,OAAO,EAAEF,aAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOA,QAAC,YAAD;AACI,MAAA,cAAc,EAAEb,gBADpB;AAEI,MAAA,KAAK,EAAEF,YAFX;AAGI,MAAA,KAAK,EAAC,MAHV;AAII,MAAA,QAAQ,EAAC,YAJb;AAKI,MAAA,MAAM,EAAC,MALX;AAMI,MAAA,OAAO,EAAE;AACLyB,QAAAA,QAAQ,EAAE,IADL;AAELC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFJ;AAGLC,QAAAA,UAAU,EAAE,KAHP;AAILC,QAAAA,OAAO,EAAE,KAJJ;AAKLC,QAAAA,mBAAmB,EAAE,CALhB;AAMLC,QAAAA,QAAQ,EAAE,EANL;AAOLC,QAAAA,oBAAoB,EAAE,KAPjB;AAQLC,QAAAA,eAAe,EAAE;AARZ;AANb;AAAA;AAAA;AAAA;AAAA,YAPA;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AA2BH,CApED;;GAAMnC,U;;KAAAA,U;AAsEN,eAAeA,UAAf","sourcesContent":["import './code-editor.css'\r\nimport './syntax.css'\r\nimport { useRef } from 'react'\r\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react'\r\nimport prettier from 'prettier'\r\nimport parser from 'prettier/parser-babel'\r\nimport codeShift from 'jscodeshift'\r\nimport Highlighter from 'monaco-jsx-highlighter'\r\n\r\ninterface CodeEditorProps {\r\n    initialValue: string\r\n    // function with arg of value that returns nothing\r\n    onChange(value: string): void\r\n}\r\n\r\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\r\n    const editorRef = useRef<any>()\r\n    // work around for onChange to display value\r\n    const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\r\n        // reference monacoEditor\r\n        editorRef.current = monacoEditor\r\n        monacoEditor.onDidChangeModelContent(() => {\r\n            onChange(getValue())\r\n        })\r\n        monacoEditor.getModel()?.updateOptions({ tabSize: 2 })\r\n\r\n        const highlighter = new Highlighter(\r\n            // @ts-ignore\r\n            window.monaco,\r\n            codeShift,\r\n            monacoEditor\r\n        )\r\n        highlighter.highLightOnDidChangeModelContent(\r\n            () => {},\r\n            () => {},\r\n            undefined,\r\n            () => {}\r\n        )\r\n    }\r\n\r\n    const onFormatClick = () => {\r\n        // get current value from editor\r\n        const unformatted = editorRef.current.getModel().getValue()\r\n\r\n        // format that value\r\n        const formatted = prettier.format(unformatted, {\r\n            parser: 'babel',\r\n            plugins: [parser],\r\n            useTabs: false,\r\n            semi: true,\r\n            singleQuote: true\r\n        }).replace(/\\n$/, '') // remove new line\r\n        // set the formatted value back in the editor\r\n        editorRef.current.setValue(formatted)\r\n    }\r\n\r\n    return (\r\n            <div className=\"editor-wrapper\">\r\n                <button \r\n                    className=\"button button-format is-primary is-small\" \r\n                    onClick={onFormatClick}\r\n                >\r\n                    Format\r\n                </button>\r\n            <MonacoEditor \r\n                editorDidMount={onEditorDidMount}\r\n                value={initialValue}\r\n                theme=\"dark\" \r\n                language=\"javascript\"  \r\n                height=\"100%\" \r\n                options={{\r\n                    wordWrap: 'on',\r\n                    minimap: { enabled: false },\r\n                    showUnused: false,\r\n                    folding: false,\r\n                    lineNumbersMinChars: 3,\r\n                    fontSize: 16,\r\n                    scrollBeyondLastLine: false,\r\n                    automaticLayout: true,\r\n                }}\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default CodeEditor"]},"metadata":{},"sourceType":"module"}