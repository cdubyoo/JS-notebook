{"ast":null,"code":"import axios from 'axios';\nimport localForage from 'localforage';\nconst fileCache = localForage.createInstance({\n  name: 'filecache'\n});\nexport const fetchPlugin = inputCode => {\n  return {\n    name: 'fetch-plugin',\n\n    setup(build) {\n      build.onLoad({\n        filter: /(^index\\.js$)/\n      }, () => {\n        return {\n          loader: 'jsx',\n          contents: inputCode\n        };\n      }); // check for cache results\n\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        // check to see if we already fetched this file and if its in the cache\n        const cachedResult = await fileCache.getItem(args.path); // use type onLoadresult so typescript knows the type\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n      }); // onload for css\n\n      build.onLoad({\n        filter: /.css$/\n      }, async args => {\n        const cachedResult = await fileCache.getItem(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const escaped = data.replace(/\\n/g, '').replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\n        const contents = `\n                    const style = document.createElement('style')\n                    style.innerText = '${escaped}'\n                    document.head.appendChild(style)\n                `;\n        const result = {\n          loader: 'jsx',\n          contents,\n          // find directory of package\n          resolveDir: new URL('./', request.responseURL).pathname\n        }; // store response in cache\n\n        await fileCache.setItem(args.path, result);\n        return result;\n      }); // onload for all other files\n\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        // get data from url for test pkg\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const result = {\n          loader: 'jsx',\n          // modules inputs\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        };\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/jbook/src/bundler/plugins/fetch-plugin.ts"],"names":["axios","localForage","fileCache","createInstance","name","fetchPlugin","inputCode","setup","build","onLoad","filter","loader","contents","args","cachedResult","getItem","path","data","request","get","escaped","replace","result","resolveDir","URL","responseURL","pathname","setItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AACzCC,EAAAA,IAAI,EAAE;AADmC,CAA3B,CAAlB;AAIA,OAAO,MAAMC,WAAW,GAAIC,SAAD,IAAuB;AAC9C,SAAO;AACHF,IAAAA,IAAI,EAAE,cADH;;AAEHG,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAC9BA,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA0C,MAAM;AAC5C,eAAO;AACHC,UAAAA,MAAM,EAAE,KADL;AAEHC,UAAAA,QAAQ,EAAEN;AAFP,SAAP;AAIH,OALD,EAD8B,CAQlC;;AACAE,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOG,IAAP,IAAoB;AAC/C;AACA,cAAMC,YAAY,GAAG,MAAMZ,SAAS,CAACa,OAAV,CAAwCF,IAAI,CAACG,IAA7C,CAA3B,CAF+C,CAE+B;;AAE9E,YAAIF,YAAJ,EAAkB;AACd,iBAAOA,YAAP;AACH;AACJ,OAPD,EATkC,CAkB9B;;AACAN,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAAkC,MAAOG,IAAP,IAAqB;AACnD,cAAMC,YAAY,GAAG,MAAMZ,SAAS,CAACa,OAAV,CAAwCF,IAAI,CAACG,IAA7C,CAA3B;;AAEA,YAAIF,YAAJ,EAAkB;AACd,iBAAOA,YAAP;AACH;;AACD,cAAM;AAAEG,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAMlB,KAAK,CAACmB,GAAN,CAAUN,IAAI,CAACG,IAAf,CAAhC;AACA,cAAMI,OAAO,GAAGH,IAAI,CACfI,OADW,CACH,KADG,EACI,EADJ,EAEXA,OAFW,CAEH,IAFG,EAEG,KAFH,EAGXA,OAHW,CAGH,IAHG,EAGG,KAHH,CAAhB;AAIA,cAAMT,QAAQ,GAAI;AAClC;AACA,yCAAyCQ,OAAQ;AACjD;AACA,iBAJgB;AAMA,cAAME,MAA4B,GAAG;AACjCX,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAFiC;AAGjC;AACAW,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcN,OAAO,CAACO,WAAtB,EAAmCC;AAJd,SAArC,CAjBmD,CAuBnD;;AACA,cAAMxB,SAAS,CAACyB,OAAV,CAAkBd,IAAI,CAACG,IAAvB,EAA6BM,MAA7B,CAAN;AAEA,eAAOA,MAAP;AACH,OA3BD,EAnB8B,CAgD9B;;AACAd,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOG,IAAP,IAAqB;AAChD;AACA,cAAM;AAAEI,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAMlB,KAAK,CAACmB,GAAN,CAAUN,IAAI,CAACG,IAAf,CAAhC;AAEA,cAAMM,MAA4B,GAAG;AACjCX,UAAAA,MAAM,EAAE,KADyB;AAEjC;AACAC,UAAAA,QAAQ,EAAEK,IAHuB;AAIjCM,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcN,OAAO,CAACO,WAAtB,EAAmCC;AAJd,SAArC;AAMA,cAAMxB,SAAS,CAACyB,OAAV,CAAkBd,IAAI,CAACG,IAAvB,EAA6BM,MAA7B,CAAN;AAEA,eAAOA,MAAP;AACH,OAbD;AAcH;;AAjEE,GAAP;AAmEH,CApEM","sourcesContent":["import * as esbuild from 'esbuild-wasm'\r\nimport axios from 'axios'\r\nimport localForage from 'localforage'\r\n\r\nconst fileCache = localForage.createInstance({\r\n    name: 'filecache'\r\n});\r\n\r\nexport const fetchPlugin = (inputCode: string) => {\r\n    return {\r\n        name: 'fetch-plugin',\r\n        setup(build: esbuild.PluginBuild) {\r\n            build.onLoad({ filter: /(^index\\.js$)/ }, () => {\r\n                return {\r\n                    loader: 'jsx',\r\n                    contents: inputCode,\r\n                }\r\n            })\r\n        \r\n        // check for cache results\r\n        build.onLoad({ filter: /.*/ }, async (args:any) => {\r\n            // check to see if we already fetched this file and if its in the cache\r\n            const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path) // use type onLoadresult so typescript knows the type\r\n        \r\n            if (cachedResult) {\r\n                return cachedResult\r\n            }\r\n        })\r\n\r\n            // onload for css\r\n            build.onLoad({ filter: /.css$/ }, async (args: any) => {\r\n                const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path)\r\n        \r\n                if (cachedResult) {\r\n                    return cachedResult;\r\n                }\r\n                const { data, request } = await axios.get(args.path)\r\n                const escaped = data\r\n                    .replace(/\\n/g, '')\r\n                    .replace(/\"/g, '\\\\\"')\r\n                    .replace(/'/g, \"\\\\'\")\r\n                const contents = `\r\n                    const style = document.createElement('style')\r\n                    style.innerText = '${escaped}'\r\n                    document.head.appendChild(style)\r\n                `\r\n        \r\n                const result: esbuild.OnLoadResult = {\r\n                    loader: 'jsx',\r\n                    contents,\r\n                    // find directory of package\r\n                    resolveDir: new URL('./', request.responseURL).pathname,\r\n                }\r\n                // store response in cache\r\n                await fileCache.setItem(args.path, result)\r\n        \r\n                return result\r\n            });\r\n\r\n            // onload for all other files\r\n            build.onLoad({ filter: /.*/ }, async (args: any) => {\r\n                // get data from url for test pkg\r\n                const { data, request } = await axios.get(args.path)\r\n        \r\n                const result: esbuild.OnLoadResult = {\r\n                    loader: 'jsx',\r\n                    // modules inputs\r\n                    contents: data,\r\n                    resolveDir: new URL('./', request.responseURL).pathname\r\n                }\r\n                await fileCache.setItem(args.path, result)\r\n        \r\n                return result\r\n            })\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}